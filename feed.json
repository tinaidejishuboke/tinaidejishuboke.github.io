{
    "version": "https://jsonfeed.org/version/1",
    "title": "路宇航的博客",
    "description": "",
    "home_page_url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io",
    "items": [
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/",
            "title": "python基础4（语法糖）",
            "date_published": "2021-05-06T00:16:50.000Z",
            "content_html": "<h1 id=\"python语法糖\"><a class=\"markdownIt-Anchor\" href=\"#python语法糖\">#</a> python 语法糖</h1>\n<h4 id=\"语法糖说明\"><a class=\"markdownIt-Anchor\" href=\"#语法糖说明\">#</a> 语法糖说明</h4>\n<pre><code>计算机语言中特殊的某种语法\n这种语法对语言的功能并没有影响\n对于程序员有更好的易用性\n能够增加程序的可读性\n通过这类方式编写出来的代码，即好看又好用,好似糖一般的语法\n</code></pre>\n<h5 id=\"一个简单的例子\"><a class=\"markdownIt-Anchor\" href=\"#一个简单的例子\">#</a> 一个简单的例子</h5>\n<p>假设：有 2 个数字，现需要从中得到最大的那个数字。应该如何实现？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">2</span> </span><br><span class=\"line\">c = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> b &gt; c:</span><br><span class=\"line\">    a = b</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    a = c</span><br></pre></td></tr></table></figure>\n<p>其实还有更多的其它实现方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">max</span>(b, c)</span><br><span class=\"line\">a = c &gt; b <span class=\"keyword\">and</span> c <span class=\"keyword\">or</span> b</span><br><span class=\"line\">a = c <span class=\"keyword\">if</span> c &gt; b <span class=\"keyword\">else</span> b</span><br><span class=\"line\">a = [b, c][c &gt; b]</span><br></pre></td></tr></table></figure>\n<p>这些都是可以实现我们需求的方法，殊途同归。但是它们在易用性、简洁性、可读性、性能等方面的表现都不一样。那么问题来了！</p>\n<p>哪个才是我们所说的语法糖呢？</p>\n<p>一些常见的语法糖</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>; b = <span class=\"number\">2</span>; c = <span class=\"number\">3</span></span><br><span class=\"line\">b, c = c, b</span><br><span class=\"line\">a &lt; c &lt; b &lt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> * <span class=\"number\">100</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] + [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到这些语法，在其它语言里通常不会出现的。但是在 Python 中却神奇的被支持了，所以这些都是当之无愧的 Python 语法糖。</p>\n<p>切片操作<br>\n像列表这类可以支持<strong>切片</strong>操作的对象，则是我最初喜欢 Python 的一个非常重要的原因。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[::-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">3</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[::<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\">#[9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\"><span class=\"comment\">#3</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">#[4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"comment\">#[3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>\n<p>with 语法糖<br>\n with 语法糖实现的是一个上下文管理器，它主要的特点就是帮助我们自动管理上下文的衔接。即在需要的时候传给我们，不需要的时候自动关闭上下文对象。 需要注意的是：使用 with 语法糖是有条件的。即其后跟的对象必须要实现__enter__和__exit__这 2 个魔法属性。具体使用的例子如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;example_2.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>else 语法糖<br>\n Python 中提供一类 else 的语法，它可以在原有语法基础之上，支持更多一种情况的选择。 主要有 for-else，while-else，try-else。需要注意的是，for-else 和 while-else 需要和 break 语句配合时使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;for end&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">else</span></span><br><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;while end&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span> <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span> / <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;except occured&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;it is fine&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;i am finally&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>函数相关语法糖<br>\n Python 中函数我们都非常的熟悉，而在函数的使用上却有着与其它语言不同的选择。</p>\n<p>动态参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_dynamic_args</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;动态参数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)</span><br></pre></td></tr></table></figure>\n<p>这个函数的参数与函数相比，其参数会有些不同之处。因为它们在接收参数时使用了不同方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example_dynamic_args(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"literal\">True</span>, name=<span class=\"string\">&#x27;xiaowu&#x27;</span>, age=<span class=\"number\">18</span>)</span><br><span class=\"line\">l = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"literal\">False</span>]</span><br><span class=\"line\">d = &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;xiaoming&#x27;</span>, age: <span class=\"string\">&#x27;16&#x27;</span>&#125;</span><br><span class=\"line\">example_dynamic_args(*l, **d)</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数</h3>\n<p>​\t\t匿名函数在很多的语言中都存在，通常在临时需要一个函数的场景下使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> x: x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>​\t\tPython 中使用 lambda 表达式来实现匿名函数，观察上面的 lambda 表达式。</p>\n<h5 id=\"其特点如下\"><a class=\"markdownIt-Anchor\" href=\"#其特点如下\">#</a> 其特点如下：</h5>\n<p>​\t可以接受函数</p>\n<p>​\t函数体只有一个表达式</p>\n<p>​\t无需显式的 return 语句</p>\n<p>​\t整个表达式在一个语法行内实现</p>\n<p>​\tlambda 表达式除了一些语法上的限制之外；其它函数该有的特性它都有。比如：支持动态参数。下面是一个使用 lambda 表示的场景：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_dict = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in_dict:&#x27;</span>, in_dict)</span><br><span class=\"line\">out_dict = <span class=\"built_in\">sorted</span>(in_dict.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;out_dict&#x27;</span>, out_dict)</span><br></pre></td></tr></table></figure>\n<p>推导表达式<br>\n推导表达式是 Python 中常见的语法糖，在很多的数据处理场景中，我们可能会使用的到。 最常见的就是列表推导表达式，可以用来过滤、处理列表中的子项并输出一个新的列表。除此之外还有几个推导式也是非常好用的。</p>\n<p>列表推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>] <span class=\"comment\"># 列表推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>生成器推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) <span class=\"comment\"># 生成器推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>集合推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = &#123;i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>&#125; <span class=\"comment\"># 集合推导表达式</span></span><br></pre></td></tr></table></figure>\n<p>print(‘array after:’, array)<br>\n 字典推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = &#123;i: i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>&#125;  <span class=\"comment\"># 字典推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>不同推导式在语法使用上基本一致，只是在返回对象的类型上有所差别。</p>\n<p>yield 表达式<br>\n yield 语法也是 Python 中比较有特点的语法糖，可以说是特有的。虽然其它语言有实现类似机制的功能。 yield 是 Python 中实现 ** 协程 (coroutine)** 的一个重要基础。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_generator</span>(<span class=\"params\">in_list</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;生成器&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>装饰器<br>\n重要的往往在最后面，装饰器是学习 Python 绕不过去的坎。就像学习 Java 要理解面向对象和设计模式一样。 学习 Python，你就应该要掌握好闭包、生成器、装饰器等相关知识。而对于编写高并发程序时则要掌握协程相关知识。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_decorator</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;装饰器&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        func()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inner</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "title": "python设计模式之观察者模式",
            "date_published": "2021-04-28T08:04:15.000Z",
            "content_html": "<h1 id=\"观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#观察者模式\">#</a> 观察者模式</h1>\n<p>观察者模式也叫发布订阅模式，** 定义了对象之间一对多依赖，当一个对象改变状态时，这个对象的所有依赖者都会收到通知并按照自己的方式进行更新。** 举个现实生活的例子，<strong>职员们趁老板不在，都在玩着自己的东西，同时观察着前台小姐姐，前台小姐姐在老板回来的时候，发布通知让各同事回到工作状态。</strong></p>\n<h4 id=\"话不多说上代码\"><a class=\"markdownIt-Anchor\" href=\"#话不多说上代码\">#</a> 话不多说，上代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 看股票的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StockClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_stock_software</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 关闭了股票软件，并开始办公&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 睡着的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepingClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_word</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 打开了word，并开始办公&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 玩游戏的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Play_gamesClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_word</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 打开了ppt，并开始做作业&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receptionist</span>:</span></span><br><span class=\"line\">    actions = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attach</span>(<span class=\"params\">cls, action</span>):</span></span><br><span class=\"line\">        cls.actions.append(action)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;老板回来了，各同事行动...&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> actioin <span class=\"keyword\">in</span> cls.actions:</span><br><span class=\"line\">            actioin()</span><br><span class=\"line\"><span class=\"comment\"># 实例化职员</span></span><br><span class=\"line\">c1 = StockClerk(<span class=\"string\">&#x27;张丁介&#x27;</span>)</span><br><span class=\"line\">c2 = SleepingClerk(<span class=\"string\">&#x27;刘万兴&#x27;</span>)</span><br><span class=\"line\">c3 = Play_gamesClerk(<span class=\"string\">&#x27;张思彤&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告诉前台小姐姐如何通知</span></span><br><span class=\"line\">Receptionist.attach(c1.close_stock_software)</span><br><span class=\"line\">Receptionist.attach(c2.open_word)</span><br><span class=\"line\">Receptionist.attach(c3.open_word)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前台小姐姐发布通知</span></span><br><span class=\"line\">Receptionist.notify()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\">#老板回来了，各同事行动...</span></span><br><span class=\"line\"><span class=\"comment\">#张丁介 关闭了股票软件，并开始办公</span></span><br><span class=\"line\"><span class=\"comment\">#刘万兴 打开了word，并开始办公</span></span><br><span class=\"line\"><span class=\"comment\">#张思彤 打开了ppt，并开始做作业</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"四观察者模式的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#四观察者模式的优缺点\">#</a> 四。观察者模式的优缺点</h2>\n<p>优点：</p>\n<ul>\n<li>它使彼此交互的对象保持松耦合</li>\n<li>当需要添加其他对象时，无需对主题和观察者做任何修改</li>\n<li>可以随时添加和删除观察者</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>实现不当可能会增加复杂性，导致性能降低</li>\n<li>通知有时是不可靠的，并导致竞争条件或不一致性</li>\n</ul>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/",
            "title": "日活人数和高并发",
            "date_published": "2021-04-22T12:45:14.000Z",
            "content_html": "<h1 id=\"日活人数和高并发\"><a class=\"markdownIt-Anchor\" href=\"#日活人数和高并发\">#</a> 日活人数和高并发</h1>\n<h1 id=\"redis主从复制与优化\"><a class=\"markdownIt-Anchor\" href=\"#redis主从复制与优化\">#</a> Redis 主从复制与优化</h1>\n<h2 id=\"主从复制\"><a class=\"markdownIt-Anchor\" href=\"#主从复制\">#</a> 主从复制</h2>\n<p>我们关注主从复制之前，首先要考虑单机有什么问题？</p>\n<ul>\n<li>机器故障</li>\n<li>容量瓶颈</li>\n<li>QPS 瓶颈</li>\n</ul>\n<p>这些都是单节点所遇到的问题，所以这个时候出现了主从复制（一主一从，一主多从）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2020101321485247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>使用主从复制可以：</p>\n<ul>\n<li>数据副本</li>\n<li>扩展读性能</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>一个 master 可以有多个 slave</li>\n<li>一个 slave 只有一个 master</li>\n<li>数据流向是单向的，master 到 slave</li>\n</ul>\n<hr>\n<h2 id=\"主从复制的配置\"><a class=\"markdownIt-Anchor\" href=\"#主从复制的配置\">#</a> 主从复制的配置</h2>\n<p><strong>两种实现方式</strong></p>\n<ul>\n<li>slaveof 命令</li>\n</ul>\n<p>两台机器：主节点：47.11.11.11 从节点 47.22.22.22</p>\n<p>在从节点执行 slaveof 命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">47.22</span><span class=\"number\">.22</span><span class=\"number\">.22</span>-<span class=\"number\">6379</span> &gt; slacefof <span class=\"number\">47.11</span><span class=\"number\">.11</span><span class=\"number\">.11</span> <span class=\"number\">6379</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>取消复制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">47.22</span><span class=\"number\">.22</span><span class=\"number\">.22</span>-<span class=\"number\">6379</span> &gt; slacefof no one</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof ip  port    <span class=\"comment\">//从节点ip + 端口</span></span><br><span class=\"line\">slave-read-only yes <span class=\"comment\">//开启只做读的操作</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>两种方式比较</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201013220336165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>查看主从</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master   <span class=\"comment\">//主节点 </span></span><br><span class=\"line\">connected_slaves:<span class=\"number\">0</span></span><br><span class=\"line\">master_replid:1d43401335a5343b27b1638fc9843e3a593fc1a7</span><br><span class=\"line\">master_replid2:<span class=\"number\">0000000000000000000000000000000000000000</span></span><br><span class=\"line\">master_repl_offset:<span class=\"number\">0</span></span><br><span class=\"line\">second_repl_offset:-<span class=\"number\">1</span></span><br><span class=\"line\">repl_backlog_active:<span class=\"number\">0</span></span><br><span class=\"line\">repl_backlog_size:<span class=\"number\">1048576</span></span><br><span class=\"line\">repl_backlog_first_byte_offset:<span class=\"number\">0</span></span><br><span class=\"line\">repl_backlog_histlen:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>知识点 ：</p>\n<ul>\n<li>主节点 runID：</li>\n</ul>\n<p>每个 redis 节点启动后都会动态分配一个 40 位的十六进制字符串为运行 ID。运行 ID 的主要作用是来唯一识别 redis 节点，比如从节点保存主节点的运行 ID 识别自已正在复制是哪个主节点。如果只使用 ip+port 的方式识别主节点，那么主节点重启变更了整体数据集（如替换 RDB/AOF 文件），从节点再基于偏移量复制数据将是不安全的，因此当运行 ID 变化后从节点将做全量复制。可以在 info server 命令查看当前节点的运行 ID。</p>\n<p>需要注意的是 redis 关闭再启动，运行的 id 会随之变化。</p>\n<hr>\n<h2 id=\"全量复制和部分复制等\"><a class=\"markdownIt-Anchor\" href=\"#全量复制和部分复制等\">#</a> 全量复制和部分复制等</h2>\n<h3 id=\"全量复制\"><a class=\"markdownIt-Anchor\" href=\"#全量复制\">#</a> 全量复制</h3>\n<p>用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。</p>\n<p>redis2.8+ 全量复制流程</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2020101322385755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>开销：</p>\n<ol>\n<li>bgsave 时间</li>\n<li>RDB 文件网络传输</li>\n<li>从节点清空数据时间</li>\n<li>从节点加载 RDB 时间</li>\n<li>可能的 AOF 重写时间</li>\n</ol>\n<h3 id=\"部分复制\"><a class=\"markdownIt-Anchor\" href=\"#部分复制\">#</a> 部分复制</h3>\n<p>用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。</p>\n<p>流程： <img data-src=\"https://img-blog.csdnimg.cn/20201013224506931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"复制偏移量\"><a class=\"markdownIt-Anchor\" href=\"#复制偏移量\">#</a> 复制偏移量：</h3>\n<ul>\n<li>参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在 info replication 中的 master_repl_offset 指标中。</li>\n<li>从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量 slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0</li>\n<li>从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在 info replication 中的 slave_repl_offset 中。</li>\n</ul>\n<h3 id=\"复制积压缓冲区\"><a class=\"markdownIt-Anchor\" href=\"#复制积压缓冲区\">#</a> 复制积压缓冲区：</h3>\n<ul>\n<li>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为 1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。 在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量 (offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</li>\n</ul>\n<hr>\n<h2 id=\"生产中常见问题\"><a class=\"markdownIt-Anchor\" href=\"#生产中常见问题\">#</a> 生产中常见问题</h2>\n<h5 id=\"读写分离\"><a class=\"markdownIt-Anchor\" href=\"#读写分离\">#</a> 读写分离</h5>\n<p>分流到从节点。主节点写数据，从节点读数据，可能遇到读问题</p>\n<ol>\n<li>复制数据延迟</li>\n<li>读到过期数据</li>\n<li>从节点故障</li>\n</ol>\n<h5 id=\"主从配置不一致\"><a class=\"markdownIt-Anchor\" href=\"#主从配置不一致\">#</a> 主从配置不一致</h5>\n<ol>\n<li>例如 maxmemory 不一致 会导致 丢失数据</li>\n<li>例如数据结构优化参数（例如 hash-max-ziplist-entries）: 内存不一致</li>\n</ol>\n<h5 id=\"规避全量复制\"><a class=\"markdownIt-Anchor\" href=\"#规避全量复制\">#</a> 规避全量复制</h5>\n<ol>\n<li>第一次全量复制的时候  - 第一次不可避免，尽量小节点 ，低峰处理</li>\n<li>节点 运行 ID 不匹配  - 故障转移，例如哨兵或者集群</li>\n<li>复制积压缓存区不足  - 增大复制缓存区配置 rel_backlog_size , 网络增强</li>\n</ol>\n<h5 id=\"规避复制风暴\"><a class=\"markdownIt-Anchor\" href=\"#规避复制风暴\">#</a> 规避复制风暴</h5>\n<ol>\n<li>单机器复制风暴（redis&lt;4.0 当 master 宕机重启，会导致该机器下所有 slave 同时产生复制。避免单机部署一套 redis 主从）====》主节点分散多台机</li>\n</ol>\n<hr>\n<h3 id=\"最后的注意事项\"><a class=\"markdownIt-Anchor\" href=\"#最后的注意事项\">#</a> 最后的注意事项：</h3>\n<ul>\n<li>在上述的过程的实现是从库不开启 AOF 持久化情况下，如果从库开启的 AOF 持久化，重启时候依然使用全量复制。</li>\n<li>之前从 master 复制过来的数据并不会丢失，只是不再同步之前 master（如上图的 6379 节点）后续写入的数据</li>\n<li>slaveof 可以用来改变其所属的 master 节点，即重新成为另一台 master 的 slave，但是新的 master 首先就会把从节点的数据全部清除掉</li>\n<li>关于读写分离延时：读写分离 ，master 会一步将数据复制到 slave，如果 slave 发生阻塞，则会延迟 master 数据的写命令，造成数据不一致的问题。------- 一般不考虑这个问题</li>\n<li>读到过期数据：redis 在删除 key 时有两种策略，一种是懒惰型策略，即只有当 redis 操作这个 key 时才会将 key 删除，第二种是定期采样 key 删除 -------- 当 key 数据非常多时，采样速度比不上 key 生成速度会造成很多过期数据没有删除，因为 redis 一般都是在 master 节点（增加删除数据），slave 查询到过期数据也不能删除。会导致 slave 读到过期数据（在 redis3.2 中已经解决）</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/13/python%E7%9A%84pymongo%E5%B0%81%E8%A3%85%E7%B1%BB/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/13/python%E7%9A%84pymongo%E5%B0%81%E8%A3%85%E7%B1%BB/",
            "title": "python的pymongo封装类",
            "date_published": "2021-04-13T09:08:06.000Z",
            "content_html": "<h2 id=\"1-创建一个mypymongopy文件\"><a class=\"markdownIt-Anchor\" href=\"#1-创建一个mypymongopy文件\">#</a> 1. 创建一个 MyPyMongo.py 文件</h2>\n<h2 id=\"2-导包\"><a class=\"markdownIt-Anchor\" href=\"#2-导包\">#</a> 2. 导包</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-创建类\"><a class=\"markdownIt-Anchor\" href=\"#3-创建类\">#</a> 3. 创建类</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyMongo:</span><br><span class=\"line\">    def __init__(self, database, collection, **mongo_kwargs):  # database 数据库名  collection 集合名(表) **mongo_kwargs 端口号 地址</span><br><span class=\"line\">        self.data &#x3D; MongoClient(**mongo_kwargs)  # 连接MongoDB</span><br><span class=\"line\">        self.db &#x3D; self.data[database]  # 进入数据库</span><br><span class=\"line\">        self.collection &#x3D; self.db[collection]  # 进入集合(表)</span><br><span class=\"line\"></span><br><span class=\"line\">    def find_one(self, key: dict) -&gt; dict:  # 按条件指定查询</span><br><span class=\"line\">        return self.collection.find_one(key)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def find(self) -&gt; object:  # 查询集合所有数据</span><br><span class=\"line\">        return self.db.find()</span><br><span class=\"line\"></span><br><span class=\"line\">    def insert(self, info: dict) -&gt; None:  # 插入数据</span><br><span class=\"line\">        self.db.insert(info)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-调用\"><a class=\"markdownIt-Anchor\" href=\"#4-调用\">#</a> 4. 调用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m &#x3D; MyMongo(&#39;conn&#39;, &#39;cate_test_set&#39;, **&#123;&#39;host&#39;: &#39;127.0.0.1&#39;, &#39;port&#39;: 27017&#125;)</span><br><span class=\"line\">print(m.find_one(&#123;&#39;name&#39;:&#39;Asia&#39;&#125;))</span><br><span class=\"line\">m.find()</span><br><span class=\"line\">m.insert(&#123;&#39;name1&#39;:&#39;li&#39;&#125;)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "title": "Tree的概念",
            "date_published": "2021-03-31T13:26:37.000Z",
            "content_html": "<h1 id=\"二叉树的概念\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的概念\">#</a> 二叉树的概念</h1>\n<h4 id=\"概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点\"><a class=\"markdownIt-Anchor\" href=\"#概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点\">#</a> 概念：二叉树是树形结构的一个重要类型，二叉树特点是每个结点最多只能有两棵子树，且有左右之分，就是递归调用自己，定一个根节点，二叉树递归的最后一层，就被称为叶节点。</h4>\n<h2 id=\"2-二叉树先序遍历就是先访问自己然后左子树然后右子树\"><a class=\"markdownIt-Anchor\" href=\"#2-二叉树先序遍历就是先访问自己然后左子树然后右子树\">#</a> 2、二叉树先序遍历就是先访问自己，然后左子树，然后右子树。</h2>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215615026.png\" alt=\"image-20210331215615026\"></p>\n<h4 id=\"0137849256\"><a class=\"markdownIt-Anchor\" href=\"#0137849256\">#</a> 0,1,3,7,8,4,9,2,5,6</h4>\n<h2 id=\"3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树\"><a class=\"markdownIt-Anchor\" href=\"#3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树\">#</a> 3、二叉树的中序遍历是先访问左子树，然后访问自己，最后右子树。</h2>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215700942.png\" alt=\"image-20210331215700942\"></p>\n<h4 id=\"7381940526\"><a class=\"markdownIt-Anchor\" href=\"#7381940526\">#</a> 7,3,8,1,9,4,0,5,2,6</h4>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215811657.png\" alt=\"image-20210331215811657\"></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "title": "vue拦截器的概念",
            "date_published": "2020-08-13T07:18:19.000Z",
            "content_html": "<h2 id=\"一-拦截器的基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-拦截器的基本介绍\">#</a> 一、拦截器的基本介绍</h2>\n<ul>\n<li>什么是拦截器:\n<ul>\n<li>想拦截住我们的请求过程<br>\n比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求<br>\n或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回</li>\n</ul>\n</li>\n<li>拦截器的作用:\n<ul>\n<li>一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token 验证，验证用户<br>\n是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-拦截器的分类\"><a class=\"markdownIt-Anchor\" href=\"#二-拦截器的分类\">#</a> 二、拦截器的分类</h2>\n<p>请求拦截器和响应拦截器 / 路由拦截器<br>\n <code>PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理</code> <br>\n① axios 提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加 token 头信息。<br>\n② axios 提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理 401 身份认证错误。</p>\n<h2 id=\"三-代码演示\"><a class=\"markdownIt-Anchor\" href=\"#三-代码演示\">#</a> 三、代码演示</h2>\n<h4 id=\"路由拦截器-通过路由进行判断\"><a class=\"markdownIt-Anchor\" href=\"#路由拦截器-通过路由进行判断\">#</a> 路由拦截器：通过路由进行判断</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">&#x2F;&#x2F;to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作</span><br><span class=\"line\">&#x2F;&#x2F; 配置全局的vue路由拦截器  导航守卫(路由守卫)</span><br><span class=\"line\">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(to)</span><br><span class=\"line\">        &#x2F;&#x2F; 判断 是否是跳转到 admin页 如果是则必须登录才能跳转</span><br><span class=\"line\">    if (to.path in [&quot;&#x2F;路由地址&quot;,&quot;&#x2F;...&quot;,&quot;&#x2F;...&quot;])&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;判断 是否登录</span><br><span class=\"line\">        const token &#x3D; sessionStorage.getItem(&quot;token&quot;)</span><br><span class=\"line\">        if (!token) &#123;</span><br><span class=\"line\">            alert(&quot;没有登录，不能操作&quot;)</span><br><span class=\"line\">                &#x2F;&#x2F;跳转到登录页</span><br><span class=\"line\">            next(&quot;&#x2F;login?back&#x3D;&quot; + to.fullPath)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;放行</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)  </span><br></pre></td></tr></table></figure>\n<h4 id=\"request请求拦截器-在请求发送前进行一些操作\"><a class=\"markdownIt-Anchor\" href=\"#request请求拦截器-在请求发送前进行一些操作\">#</a> request 请求拦截器：在请求发送前进行一些操作</h4>\n<p>在 main.js 中<br>\n import axios from ‘axios’ // 引入 axios<br>\nVue.prototype.$http = axios // 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">&#x2F;&#x2F; 添加请求拦截器</span><br><span class=\"line\">axios.interceptors.request.use(config &#x3D;&gt; &#123;</span><br><span class=\"line\">  let token &#x3D; localStorage.getItem(&#39;token&#39;);</span><br><span class=\"line\">  if (token) &#123;</span><br><span class=\"line\">     config.headers.token &#x3D; token &#x2F;&#x2F;把token放在请求头中（headers是对象类型）</span><br><span class=\"line\">     &#x2F;&#x2F; 如果后端使用了rest framework jwt，如下：</span><br><span class=\"line\">   &#x2F;&#x2F;config.headers.common[&#39;Authorization&#39;] &#x3D; &#39;jwt &#39; + token &#x2F;&#x2F; 头部设置</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return config;</span><br><span class=\"line\">&#125;, error &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(error) &#x2F;&#x2F;打印错误信息</span><br><span class=\"line\">  return Promise.reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"response响应拦截器-在接收到响应后进行一些操作\"><a class=\"markdownIt-Anchor\" href=\"#response响应拦截器-在接收到响应后进行一些操作\">#</a> response 响应拦截器：在接收到响应后进行一些操作</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">&#x2F;&#x2F; 响应拦截器（在响应时自动会做的操作）</span><br><span class=\"line\">axios.interceptors.response.use(response &#x3D;&gt; &#123;</span><br><span class=\"line\">　　return response &#x2F;&#x2F; 成功直接返回</span><br><span class=\"line\">&#125;, error &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(error.request) &#x2F;&#x2F; 打印错误信息</span><br><span class=\"line\">&#x2F;&#x2F;处理错误信息</span><br><span class=\"line\">  if (error.request.status &#x3D;&#x3D;&#x3D; 400)&#123;  &#x2F;&#x2F; 400错误的状态码</span><br><span class=\"line\">    window.location.href &#x3D; &quot;&#x2F;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return error </span><br><span class=\"line\">&#x2F;&#x2F;返回错误信息</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/05/26/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E3%80%90snowflake%E3%80%91/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/05/26/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E3%80%90snowflake%E3%80%91/",
            "title": "雪花算法【snowflake】",
            "date_published": "2020-05-26T05:54:43.000Z",
            "content_html": "<h3 id=\"雪花算法\"><a class=\"markdownIt-Anchor\" href=\"#雪花算法\">#</a> 雪花算法</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200921211050182.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"> 为什么需要分布式全局唯一 ID 以及分布式 ID 的业务需求？</p>\n<ul>\n<li>在复杂分布式系统中，往往需要对大量对数据和消息进行标识</li>\n<li>如在美团、支付、餐饮 中 系统的数据日渐增长，对数据分库分表需要有一个唯一来标识一条数据或消息</li>\n<li>此时一个能够生成全局唯一 ID 的系统是非常有必要的</li>\n</ul>\n<h4 id=\"id生成规则部分硬性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成规则部分硬性要求\">#</a> ID 生成规则部分硬性要求</h4>\n<ul>\n<li>全局唯一 ：不能出现重复的 ID，要 唯一标识</li>\n<li>趋势递增 ：在 Mysql 的 InnoDB 引擎使用的是聚集索引，由于多数 RDBMS 使用的是 Btree 数据结构来存储数据，在主键的选择上面我们应该尽量使用有序的主键保证数据写入</li>\n<li>单调递增 ：保证下一个 ID 一定大于上一个 ID，例如事物版本号，增量消息</li>\n<li>信息安全 ：如果 ID 是连续的，恶意用户的扒取数据就非常容易来，直接按照顺序下载指定的 URL，如果是订单号就更危险来，竞争对手可以知道我们一天的单量，所以在一些应用场景下，需要 ID 不规则</li>\n<li>含时间戳 ：这样就能够在开发中快速了解这个分布式 id 的生成时间</li>\n</ul>\n<hr>\n<h4 id=\"id生成系统的可用性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成系统的可用性要求\">#</a> ID 生成系统的可用性要求</h4>\n<ul>\n<li>高可用 ：发一个获取分布式 ID 的请求，服务器就要保证 99.99% 的情况下给我创建一个唯一分布式 ID</li>\n<li>低延迟 ：发一个获取分布式 ID 的请求，服务器就是要快，极速</li>\n<li>高 QPS ：假如并发一口气 10 万个创建分布式 ID 请求同时杀过来，服务器要顶的住一下子成功创建 10w 个分布式 ID</li>\n</ul>\n<h4 id=\"我们平时的方案\"><a class=\"markdownIt-Anchor\" href=\"#我们平时的方案\">#</a> 我们平时的方案</h4>\n<p>UUID 、 数据库自增主键 、基于 Redis 生成全局 ID 策略</p>\n<p>弊端</p>\n<blockquote>\n<p>UUID 不能生成顺序，递增的数据，并且长，不是很推荐</p>\n</blockquote>\n<blockquote>\n<p>数据库自增，集群多的情况下，扩容简直就是噩梦</p>\n</blockquote>\n<blockquote>\n<p>Redis 使用 Redis INCR 和 INCRBY 实现</p>\n</blockquote>\n<h4 id=\"snowflake雪花算法\"><a class=\"markdownIt-Anchor\" href=\"#snowflake雪花算法\">#</a> snowflake（雪花算法）</h4>\n<p>Twitter 的分布式自增 ID 算法：snowflake（雪花算法）</p>\n<h5 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h5>\n<blockquote>\n<p>最初 Twitter 把存储系统从 Mysql 迁移到 Cassandra (由 Facebook 开发一套开源分布式 Nosql 系统) 因为 Cassandra 没有顺序 ID 生成机制，所以开发成了这样一套全局唯一 ID 生成服务</p>\n</blockquote>\n<p>Twitter 的分布式雪花算法 SnowFlake ， 经测试 snowflake 每秒能产出 26 万个自增可排序的 ID</p>\n<ol>\n<li>twitter 的 SnowFlake 生成 ID 能够按照时间有序生成</li>\n<li>SnowFlake 算法生成 id 的结果是一个 64 bit 大小的整数，为一个 Long 型（转换成字符后长度 19 位）</li>\n<li>分布式系统不会产生 ID 碰撞（由 datacenter 和 workerld 区分）并且效率较高</li>\n</ol>\n<h5 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h5>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200921220349644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>号段解析：</p>\n<p>1bit ，</p>\n<ul>\n<li>不用，因为二进制中最高位是符号位，毫秒级，生成的 id 一般用整数，所以最高位 0</li>\n</ul>\n<p>41bit - 时间戳，用来记录时间戳，毫秒级，</p>\n<ul>\n<li>41 位可以表示 2 ^ {41}-1 个数字</li>\n<li>如果只用来表示正整数 (计算机中正整数包含 0)。可以表示数值范围：0 至 2^{41}-1 , 减 1 是因为表示的数值是从 0 开始算的 ，而不是 1.</li>\n<li>也就是说 41 位可以表示 2 ^ <ruby>41}-1 个毫秒的值，装换成单位年则 （2<rp>【</rp><rt>{41</rt><rp>】</rp></ruby>-1）/ （1000 * 60 * 60 * 24 * 365）=69 年</li>\n</ul>\n<p>10bit- 工作机器 ID，用来记录工作机器 ID</p>\n<ul>\n<li>可以部署在 2^{10} = 1024 个节点，包括 5 位 datacenterId 和 5 位的 workeId</li>\n<li>5 位（bit）可以表示的最大正整数是 2 ^ {5}-1 =31 , 即可以用 0、1、2、3…31 这 32 个数字，来表示不同的 datacenterId 或者 workId</li>\n</ul>\n<p>12 bit - 序列号，序列号，用来记录同毫秒内产生的不同的 id。</p>\n<ul>\n<li>12 位可以表示的最大正整数是 2^{12}-1 = 4095 即可以用 0、1、2、34094 这 4095 个数字来表示同一机器同一时间（毫秒）产生的 4095 个 ID 序号</li>\n</ul>\n<hr>\n<p>SnowFlake 可以保证</p>\n<ul>\n<li>所有生成的 id 按时间趋势递增</li>\n<li>整个分布式系统内不会产生重复的 id</li>\n</ul>\n<h5 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h5>\n<p>twitter 的雪花算法：<a href=\"https://github.com/twitter-archive/snowflake\">https://github.com/twitter-archive/snowflake</a></p>\n<p>GitHub 上 java 版的雪花算法： <a href=\"https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java\">https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java</a> <a href=\"https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java\">https://github.com/souyunku/SnowFlake/blob/master/SnowFlake.java</a></p>\n<p>java 版❄️雪花算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnowflakeIdWorker</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// ==============================Fields==================</span></span><br><span class=\"line\">    <span class=\"comment\">/** 开始时间截 (2019-08-06) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> twepoch = <span class=\"number\">1565020800000L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 机器id所占的位数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdBits = <span class=\"number\">5L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 数据标识id所占的位数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdBits = <span class=\"number\">5L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxWorkerId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxDatacenterId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 序列在id中占的位数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceBits = <span class=\"number\">12L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 机器ID向左移12位 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdShift = sequenceBits;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 数据标识id向左移17位(12+5) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 时间截向左移22位(5+5+12) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceMask = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 工作机器ID(0~31) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 数据中心ID(0~31) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 毫秒内序列(0~4095) */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** 上次生成ID的时间截 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//==============================Constructors====================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> workerId 工作ID (0~31)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SnowflakeIdWorker</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workerId = workerId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.datacenterId = datacenterId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// ==============================Methods=================================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> SnowflakeId</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> timestamp = timeGen();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">                    String.format(<span class=\"string\">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class=\"line\">            sequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</span><br><span class=\"line\">            <span class=\"comment\">//毫秒内序列溢出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class=\"line\">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//时间戳改变，毫秒内序列重置</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sequence = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//上次生成ID的时间截</span></span><br><span class=\"line\">        lastTimestamp = timestamp;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class=\"comment\">//</span></span><br><span class=\"line\">                | (datacenterId &lt;&lt; datacenterIdShift) <span class=\"comment\">//</span></span><br><span class=\"line\">                | (workerId &lt;&lt; workerIdShift) <span class=\"comment\">//</span></span><br><span class=\"line\">                | sequence;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> timestamp = timeGen();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class=\"line\">            timestamp = timeGen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回以毫秒为单位的当前时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前时间(毫秒)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">timeGen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//==============================Test=============================================</span></span><br><span class=\"line\">    <span class=\"comment\">/** 测试 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SnowflakeIdWorker idWorker = <span class=\"keyword\">new</span> SnowflakeIdWorker(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> id = idWorker.nextId();</span><br><span class=\"line\">            System.out.println(Long.toBinaryString(id));</span><br><span class=\"line\">            System.out.println(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"springboot整合雪花算法\"><a class=\"markdownIt-Anchor\" href=\"#springboot整合雪花算法\">#</a> springboot 整合雪花算法</h5>\n<ol>\n<li>新建项目 snowflake</li>\n<li>pom</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!--hutool 引入糊涂工具包，测试雪花算法--&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;hutool-captcha&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;5.3.8&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>yml</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">7777</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>新建 utils 包 IdGeneratorSnowflake 类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGeneratorSnowflake</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId = <span class=\"number\">0</span>;  <span class=\"comment\">//第几号机房</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId = <span class=\"number\">1</span>;  <span class=\"comment\">//第几号机器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span>  <span class=\"comment\">//构造后开始执行，加载初始化工作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取本机的ip地址编码</span></span><br><span class=\"line\">            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;当前机器的workerId: &quot;</span> + workerId);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;当前机器的workerId获取失败 ----&gt; &quot;</span> + e);</span><br><span class=\"line\">            workerId = NetUtil.getLocalhostStr().hashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snowflake.nextId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span></span>&#123;</span><br><span class=\"line\">        Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snowflake.nextId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> IdGeneratorSnowflake().snowflakeId());   <span class=\"comment\">//1277896081711169536</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>新建 service 包 OrderService 接口 与 service.impl 包 OrderServiceImpl 实现 OrderService 的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getIDBySnowFlake</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IdGeneratorSnowflake idGenerator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIDBySnowFlake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建线程池（5个线程）</span></span><br><span class=\"line\">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            threadPool.submit(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(idGenerator.snowflakeId());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPool.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello snowflake&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>新建 controller 包 OrderController</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/snowflake&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderService.getIDBySnowFlake();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>主启动类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainApp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MainApp.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目 浏览器输入 http://localhost:7777/snowflake</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200921223551325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"优缺点\"><a class=\"markdownIt-Anchor\" href=\"#优缺点\">#</a> 优缺点</h5>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200921223628111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>解决时钟回拨问题</p>\n<ul>\n<li>百度开源的分布式唯一 ID 生成器 UidGenerator</li>\n<li>美团开源的分布式 ID 生成系统 Leaf</li>\n</ul>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "vue中websocket和http的区别",
            "date_published": "2020-04-13T07:20:24.000Z",
            "content_html": "<h2 id=\"什么是websocket\"><a class=\"markdownIt-Anchor\" href=\"#什么是websocket\">#</a> 什么是 Websocket</h2>\n<ul>\n<li>Websocket 是一种网络通信协议，是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议</li>\n</ul>\n<h2 id=\"websocket有什么特点\"><a class=\"markdownIt-Anchor\" href=\"#websocket有什么特点\">#</a> Websocket 有什么特点</h2>\n<ul>\n<li>建立在 TCP 协议之上</li>\n<li>性能开销小通信高效</li>\n<li>协议标识符 ws wss（加密之后）</li>\n<li>持久化网络通信协议</li>\n<li>客户端可以与任意服务器通信</li>\n</ul>\n<h2 id=\"websocket是什么样的协议具体有什么优点\"><a class=\"markdownIt-Anchor\" href=\"#websocket是什么样的协议具体有什么优点\">#</a> Websocket 是什么样的协议，具体有什么优点</h2>\n<blockquote>\n<p>首先，Websocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说<br>\n HTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了。<br>\n在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response ， 在 HTTP 中永远是这样，也就是说一个 request 只能有一个 response。而且这个 response 也是被动的，不能主动发起。</p>\n</blockquote>\n<h2 id=\"websocket的作用\"><a class=\"markdownIt-Anchor\" href=\"#websocket的作用\">#</a> Websocket 的作用</h2>\n<h3 id=\"1ajax轮询\"><a class=\"markdownIt-Anchor\" href=\"#1ajax轮询\">#</a> 1）ajax 轮询</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"2long-poll长轮询\"><a class=\"markdownIt-Anchor\" href=\"#2long-poll长轮询\">#</a> 2）long poll 长轮询</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</span><br><span class=\"line\">从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。</span><br><span class=\"line\">何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。</span><br><span class=\"line\">ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</span><br></pre></td></tr></table></figure>\n<h3 id=\"3websocket\"><a class=\"markdownIt-Anchor\" href=\"#3websocket\">#</a> 3）WebSocket</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。</span><br><span class=\"line\">解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。</span><br><span class=\"line\">由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接&#x2F;状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</span><br><span class=\"line\">目前唯一的问题是：不兼容低版本的IE</span><br></pre></td></tr></table></figure>\n<h2 id=\"websocket使用场景\"><a class=\"markdownIt-Anchor\" href=\"#websocket使用场景\">#</a> Websocket 使用场景</h2>\n<blockquote>\n<p>社交聊天、弹幕、多玩家游戏、视频会议 / 聊天、在线教育、智能家居等需要高实时的场景</p>\n</blockquote>\n<h2 id=\"websocket-四个事件两个方法\"><a class=\"markdownIt-Anchor\" href=\"#websocket-四个事件两个方法\">#</a> Websocket 四个事件，两个方法</h2>\n<ul>\n<li>\n<h3 id=\"4个事件\"><a class=\"markdownIt-Anchor\" href=\"#4个事件\">#</a> 4 个事件</h3>\n<ul>\n<li>open Socket.onopen 连接建立时触发</li>\n<li>message Socket.onmessage 客户端接收服务端数据时触发</li>\n<li>error Socket.onerror 通信发生错误时触发</li>\n<li>close Socket.onclose 连接关闭时触发</li>\n</ul>\n</li>\n<li>\n<h3 id=\"2个方法\"><a class=\"markdownIt-Anchor\" href=\"#2个方法\">#</a> 2 个方法</h3>\n<ul>\n<li>Socket.send () 使用连接发送数据</li>\n<li>Socket.close () 关闭连接</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"什么是http协议\"><a class=\"markdownIt-Anchor\" href=\"#什么是http协议\">#</a> 什么是 HTTP 协议</h2>\n<ul>\n<li>超文本传输协议，本质上是一种通信协议。用来将 html 从服务端传送到客户端</li>\n</ul>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<ul>\n<li>\n<p>简单快速</p>\n<blockquote>\n<p>客户向服务器请求服务时，只需传送请求方法和路径</p>\n</blockquote>\n</li>\n<li>\n<p>无连接</p>\n<blockquote>\n<p>限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</p>\n</blockquote>\n</li>\n<li>\n<p>无状态</p>\n<blockquote>\n<p>协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"websocket与http的关系\"><a class=\"markdownIt-Anchor\" href=\"#websocket与http的关系\">#</a> Websocket 与 http 的关系</h2>\n<ul>\n<li>\n<h3 id=\"相同点\"><a class=\"markdownIt-Anchor\" href=\"#相同点\">#</a> 相同点</h3>\n<ol>\n<li>都是一样基于 TCP 的，都是可靠性传输协议。</li>\n<li>都是应用层协议。</li>\n</ol>\n</li>\n<li>\n<h3 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点</h3>\n<ol>\n<li>WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息。HTTP 是单向的。</li>\n<li>WebSocket 是需要浏览器和服务器握手进行建立连接的。而 http 是浏览器发起向服务器的连接，服务器预先并不知道这个连接。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"websocket实例\"><a class=\"markdownIt-Anchor\" href=\"#websocket实例\">#</a> Websocket 实例</h2>\n<ul>\n<li>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h3>\n<ul>\n<li>pip install -i <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZQ==\">https://pypi.tuna.tsinghua.edu.cn/simple</span> dwebsocket</li>\n</ul>\n</li>\n<li>\n<h3 id=\"定义视图文件的逻辑viewspy\"><a class=\"markdownIt-Anchor\" href=\"#定义视图文件的逻辑viewspy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3huLS12aWV3cy14czFobDRiNnoxYm55amM0eTR3NmJna3ljN3pwOGZjLnB5\">定义视图文件的逻辑 views.py</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">#导入websocket装饰器</span><br><span class=\"line\">from dwebsocket.decorators import accept_websocket</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#接收前端信息</span><br><span class=\"line\">@accept_websocket</span><br><span class=\"line\">def test_socket(request):</span><br><span class=\"line\">    if request.is_websocket():</span><br><span class=\"line\">        for message in request.websocket:</span><br><span class=\"line\">            c&#x3D;str(message,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">            print(c)</span><br><span class=\"line\">            request.websocket.send(message)</span><br><span class=\"line\"></span><br><span class=\"line\">#主动推送消息</span><br><span class=\"line\">@accept_websocket</span><br><span class=\"line\">def test_websocket(request):</span><br><span class=\"line\">    if request.is_websocket():</span><br><span class=\"line\">        while 1:</span><br><span class=\"line\">            time.sleep(1) ## 向前端发送时间</span><br><span class=\"line\">            dit &#x3D; &#123;</span><br><span class=\"line\">                &#39;time&#39;:time.strftime(&#39;%Y.%m.%d %H:%M:%S&#39;,time.localtime(time.time()))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request.websocket.send(json.dumps(dit))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<h3 id=\"路由配置\"><a class=\"markdownIt-Anchor\" href=\"#路由配置\">#</a> 路由配置</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">#websocket</span><br><span class=\"line\">path(&#39;test_socket&#39;,test_socket),</span><br><span class=\"line\">path(&#39;test_websocket&#39;,test_websocket),</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<h3 id=\"定义前端发送消息的页面-socketvue\"><a class=\"markdownIt-Anchor\" href=\"#定义前端发送消息的页面-socketvue\">#</a> 定义前端发送消息的页面 – socket.vue</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input id&#x3D;&quot;chat-message-input&quot; type&#x3D;&quot;text&quot; size&#x3D;&quot;100&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class=\"line\">    &lt;input id&#x3D;&quot;chat-message-submit&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;Send&quot; @click&#x3D;&#39;sendmessage()&#39;&#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;socket&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sendmessage() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      window.s.send(document.getElementById(&quot;chat-message-input&quot;).value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;生成socket对象</span><br><span class=\"line\">    var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8000&#x2F;z&#x2F;test_socket&#x2F;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    socket.onopen &#x3D; function () &#123;</span><br><span class=\"line\">      console.log(&#39;WebSocket open&#39;);&#x2F;&#x2F;成功连接上Websocket</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onmessage &#x3D; function (e) &#123;</span><br><span class=\"line\">      console.log(&#39;message: &#39; + e.data);&#x2F;&#x2F;打印服务端返回的数据</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onclose &#x3D; function (e) &#123;</span><br><span class=\"line\">      console.log(e);</span><br><span class=\"line\">      socket.close(); &#x2F;&#x2F;关闭TCP连接</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (socket.readyState &#x3D;&#x3D; WebSocket.OPEN) &#123;</span><br><span class=\"line\">      socket.onopen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    window.s &#x3D; socket;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<h3 id=\"然后再定义一个页面测试后台的主动推送-socket_pushvue\"><a class=\"markdownIt-Anchor\" href=\"#然后再定义一个页面测试后台的主动推送-socket_pushvue\">#</a> 然后再定义一个页面，测试后台的主动推送 – socket_push.vue</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;socket_push&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;生成socket对象</span><br><span class=\"line\">    var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8000&#x2F;z&#x2F;test_websocket&#x2F;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    socket.onopen &#x3D; function () &#123;</span><br><span class=\"line\">      console.log(&#39;WebSocket open&#39;);&#x2F;&#x2F;成功连接上Websocket</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onmessage &#x3D; function (e) &#123;</span><br><span class=\"line\">      console.log(&#39;message: &#39; + e.data);&#x2F;&#x2F;打印服务端返回的数据</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onclose &#x3D; function (e) &#123;</span><br><span class=\"line\">      console.log(e);</span><br><span class=\"line\">      socket.close(); &#x2F;&#x2F;关闭TCP连接</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (socket.readyState &#x3D;&#x3D; WebSocket.OPEN) &#123;</span><br><span class=\"line\">      socket.onopen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/",
            "title": "vue钩子函数",
            "date_published": "2019-09-13T07:16:54.000Z",
            "content_html": "<h2 id=\"一-路由钩子函数相关概念\"><a class=\"markdownIt-Anchor\" href=\"#一-路由钩子函数相关概念\">#</a> 一、路由钩子函数相关概念</h2>\n<ul>\n<li>什么情况下要使用路由的钩子函数？\n<ul>\n<li>在路由跳转的时候，我们需要一些权限判断或者其他操作，这个时候就需要使用路由的钩子函数</li>\n</ul>\n</li>\n<li>路由钩子函数的定义:\n<ul>\n<li>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-路由钩子的分类\"><a class=\"markdownIt-Anchor\" href=\"#二-路由钩子的分类\">#</a> 二、路由钩子的分类</h2>\n<h4 id=\"1-全局路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#1-全局路由钩子\">#</a> 1、全局路由钩子</h4>\n<blockquote>\n<p>在初始化 VueRouter 以后，直接使用 router 实例进行注册<br>\n包括两个钩子：beforeEach、afterEach（每个路由切换前或者切换后调用）</p>\n</blockquote>\n<h4 id=\"2-单个路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#2-单个路由钩子\">#</a> 2、单个路由钩子</h4>\n<blockquote>\n<p>写在路由配置中，只有访问到这个路径，才能触发钩子函数<br>\n包括两个钩子：beforeEnter、beforeLeave</p>\n</blockquote>\n<h4 id=\"3-组件内路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#3-组件内路由钩子\">#</a> 3、组件内路由钩子</h4>\n<blockquote>\n<p>这个钩子要在组件内定义<br>\n包括三个钩子：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p>\n</blockquote>\n<hr>\n<p>（1） 路由对象是在使用 vue-route 启动应用时，每个匹配的组件实例都会被注入 router 的对象，称之为路由对象。<br>\n在组件内部可以通过 this.$route 的方式调用<br>\n（2）路由对象有： $route.path , $route.params, $route.query, $route.router 等属性</p>\n<h2 id=\"三-代码演示\"><a class=\"markdownIt-Anchor\" href=\"#三-代码演示\">#</a> 三、代码演示</h2>\n<ul>\n<li>\n<h3 id=\"全局路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#全局路由钩子\">#</a> 全局路由钩子</h3>\n<ul>\n<li>\n<h4 id=\"routerbeforeeachtofromnext-全局前置守卫\"><a class=\"markdownIt-Anchor\" href=\"#routerbeforeeachtofromnext-全局前置守卫\">#</a> router.beforeEach（（to,from,next）=&gt;{ }）：全局前置守卫</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">router.beforeEach(function (to,from,next) &#123;</span><br><span class=\"line\">  console.log(to);  &#x2F;&#x2F;到达的路由</span><br><span class=\"line\">  console.log(next);&#x2F;&#x2F;跳转到其他路由</span><br><span class=\"line\">  console.log(from);&#x2F;&#x2F;离开的路由</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<h4 id=\"routeraftereachtofrom-全局后置钩子\"><a class=\"markdownIt-Anchor\" href=\"#routeraftereachtofrom-全局后置钩子\">#</a> router.afterEach（（to,from）=&gt;{ }）：全局后置钩子</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">router.afterEach(function (to,from) &#123;</span><br><span class=\"line\">  console.log(to);  &#x2F;&#x2F;到达的路由</span><br><span class=\"line\">  console.log(from);&#x2F;&#x2F;离开的路由</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<h3 id=\"单个路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#单个路由钩子\">#</a> 单个路由钩子</h3>\n<ul>\n<li>\n<h4 id=\"beforeenter\"><a class=\"markdownIt-Anchor\" href=\"#beforeenter\">#</a> beforeEnter</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">export default new Router (&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: &#39;&#x2F;index&#39;,</span><br><span class=\"line\">            component: Index,</span><br><span class=\"line\">            beforeEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<h4 id=\"beforeleave\"><a class=\"markdownIt-Anchor\" href=\"#beforeleave\">#</a> beforeLeave</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">export default new Router (&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: &#39;&#x2F;index&#39;,</span><br><span class=\"line\">            component: Index,</span><br><span class=\"line\">            beforeLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<h3 id=\"组件内路由钩子\"><a class=\"markdownIt-Anchor\" href=\"#组件内路由钩子\">#</a> 组件内路由钩子</h3>\n<ul>\n<li>\n<h4 id=\"beforerouteenter-进入这个组件路由之前\"><a class=\"markdownIt-Anchor\" href=\"#beforerouteenter-进入这个组件路由之前\">#</a> beforeRouteEnter: 进入这个组件路由之前</h4>\n<h4 id=\"beforerouteleave离开这个组件路由\"><a class=\"markdownIt-Anchor\" href=\"#beforerouteleave离开这个组件路由\">#</a> beforeRouteLeave：离开这个组件路由</h4>\n<h4 id=\"beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate\"><a class=\"markdownIt-Anchor\" href=\"#beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate\">#</a> beforeRouteUpdate：在本路由的下级路由切换才会触发 beforeRouteUpdate</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        测验：&#123;&#123;zst&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                zst:&#39;廾匸改变之前&#39;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeCreate()&#123; &#x2F;&#x2F;组件生命周期函数</span><br><span class=\"line\">            console.log(&#39;创建之前&#39;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#x2F;&#x2F;进入组件之前，执行 beforRouteEnter </span><br><span class=\"line\">        beforeRouteEnter(to,from,next)&#123;</span><br><span class=\"line\">            console.log(&#39;123&#39;)</span><br><span class=\"line\">            console.log(this) &#x2F;&#x2F; 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来，得先执行beforRouteEnter，再执行beforeCreate</span><br><span class=\"line\">            next((gx)&#x3D;&gt;&#123; &#x2F;&#x2F;参数gx就是当前组件的实例</span><br><span class=\"line\">                gx.zst &#x3D; &#39;被改变了&#39;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeRouteUpdate(to,from,next)&#123;</span><br><span class=\"line\">            console.log(&#39;abc&#39;)</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeRouteLeave(to,from,next)&#123;&#x2F;&#x2F;离开组件的时候触发</span><br><span class=\"line\">            &#x2F;&#x2F;什么都不写的时候，走下一步</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/",
            "title": "redis哨兵模式",
            "date_published": "2019-06-25T00:09:53.000Z",
            "content_html": "<h1 id=\"redis哨兵sentinel模式\"><a class=\"markdownIt-Anchor\" href=\"#redis哨兵sentinel模式\">#</a> Redis 哨兵（Sentinel）模式</h1>\n<h2 id=\"一-主从复制高可用\"><a class=\"markdownIt-Anchor\" href=\"#一-主从复制高可用\">#</a> 一、主从复制高可用</h2>\n<h3 id=\"当我们使用主从复制出现的问题\"><a class=\"markdownIt-Anchor\" href=\"#当我们使用主从复制出现的问题\">#</a> 当我们使用主从复制出现的问题</h3>\n<ul>\n<li>手动故障转移</li>\n<li>写能力和存储能力受限</li>\n<li>主从复制 -master 宕机故障处理 <img data-src=\"https://img-blog.csdnimg.cn/20201017111328608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p>\n<hr>\n<h3 id=\"~哨兵模式概述\"><a class=\"markdownIt-Anchor\" href=\"#~哨兵模式概述\">#</a> ～哨兵模式概述</h3>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</p>\n<p>哨兵主要有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<blockquote>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n</blockquote>\n<blockquote>\n<p>故障切换（failover）的过程。假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p>\n</blockquote>\n<h2 id=\"二-架构说明\"><a class=\"markdownIt-Anchor\" href=\"#二-架构说明\">#</a> 二、架构说明</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201017111608378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>多个 sentinel 发现并确认 master 有问题。</li>\n<li>选举出一个 sentinel 作为领导</li>\n<li>选出一个 slave 作为 master</li>\n<li>通知其余的 slave 成为新的 master 的 slave</li>\n<li>通知客户端主从变化</li>\n<li>等待老的 master 复活成新的 master 的 slave</li>\n</ol>\n<hr>\n<h2 id=\"三-安装配置\"><a class=\"markdownIt-Anchor\" href=\"#三-安装配置\">#</a> 三、安装配置</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201018091923731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>配置主从节点</li>\n</ol>\n<ul>\n<li>主节点</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动命令：redis-server redis-<span class=\"number\">7000.</span>conf</span><br></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7000</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7000.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7000.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Redis 从节点</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis-<span class=\"number\">7001.</span>conf</span><br><span class=\"line\">redis-server redis-<span class=\"number\">7002.</span>conf</span><br></pre></td></tr></table></figure>\n<p>slave-1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7002</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7002.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7002.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">slaveof <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n<p>slave-2:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7001</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7001.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7001.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">slaveof <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置开启 sentinel 监控主节点</li>\n</ol>\n<ul>\n<li>sentine 主要配置 编辑 sentinel.conf</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port $&#123;port&#125;</span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;$&#123;port&#125;.log&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</span></span><br><span class=\"line\">sentinel monitor mymaster <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span> <span class=\"number\">2</span>   </span><br><span class=\"line\">sentinel down-after-millseseconds mymaster <span class=\"number\">30000</span> <span class=\"comment\">//判断主节点时间</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster <span class=\"number\">1</span>    </span><br><span class=\"line\">sentinel failover-timeout mymaster <span class=\"number\">180000</span></span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>\n<p>可以使用 ps -ef|grep redis-sentinel 命令查看进程、 <img data-src=\"https://img-blog.csdnimg.cn/20201018094305376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"四-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#四-实现原理\">#</a> 四、实现原理</h2>\n<ul>\n<li>故障转移 — java 实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Redis哨兵模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSentinels</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSentinel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">        jedisPoolConfig.setMaxTotal(<span class=\"number\">10</span>);</span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(<span class=\"number\">5</span>);</span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 哨兵信息</span></span><br><span class=\"line\">        Set&lt;String&gt; sentinels = <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;127.0.0.1:26379&quot;</span>,<span class=\"string\">&quot;1127.0.0.1:26379&quot;</span>,<span class=\"string\">&quot;127.0.0.1:26379&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">        JedisSentinelPool pool = <span class=\"keyword\">new</span> JedisSentinelPool(<span class=\"string\">&quot;mymaster&quot;</span>, sentinels,jedisPoolConfig,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取客户端</span></span><br><span class=\"line\">        Jedis jedis = pool.getResource();</span><br><span class=\"line\">        <span class=\"comment\">// 执行两个命令</span></span><br><span class=\"line\">        jedis.set(<span class=\"string\">&quot;mykey&quot;</span>, <span class=\"string\">&quot;myvalue&quot;</span>);</span><br><span class=\"line\">        String value = jedis.get(<span class=\"string\">&quot;mykey&quot;</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们把主服务器停掉，在经过一段时间的报错后，redis 集群会恢复 <img data-src=\"https://img-blog.csdnimg.cn/20201018100544809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>主观下线和客观下线\n<ul>\n<li>主观下线：当前 sentintel 节点认为某个 redis 节点不可用。</li>\n<li>客观下线：所有 sentinel 节点认为某个 redis 节点不可用。</li>\n</ul>\n</li>\n<li>三个定时任务</li>\n</ul>\n<ol>\n<li>\n<p>每 10 秒每个 sentinel 对 master 和 slave 执行 info</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 发现slave节点</span><br><span class=\"line\">- 确认主从关系</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>每 2 秒每个 sentinel 通过 master 节点对 channel 交换信息（发布订阅）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 通过_sentinel_:hello频道交互</span><br><span class=\"line\">- 交互对节点的“看法”和自身信息</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>每 1 秒每个 sentinel 对其他 sentinel 和 redis 执行 ping</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>领导者选举</p>\n<ul>\n<li>\n<p>只需要一个 sentinel 节点完成故障转移</p>\n</li>\n<li>\n<p>通过 sentinel is - master -down -by-addr 命令都希望成为领导者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1. 每个主观下线都Sentitle 节点向其他Sentinel节点发送命令，要求将它设置为领导者</span><br><span class=\"line\">    </span><br><span class=\"line\">-2. 收到命令对Sentinel节点如果没有同一通过其他Sentinel节点发送的命令，那么就将同一该请求，否则拒绝</span><br><span class=\"line\">    </span><br><span class=\"line\">-3. 如果该Sentinel节点发现直接的票数已经超过Sentinel集合半数且超过quorum，那么它将成为领导者</span><br><span class=\"line\">    </span><br><span class=\"line\">-4. 如果此过程由多个Sentinel节点成为领导者，那么将来等待一段时间重新进行选举</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201018102554444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>故障转移（Sentinel 领导者节点完成）\n<ul>\n<li>1. 从 slave 节点中选出一个 “合适点” 节点作为 master 节点</li>\n<li>2. 对上面对 slave 节点执行 slaveof no one 命令让其成为 master 节点。</li>\n<li>3. 向剩余的 slave 节点发送命令，让它们成为新的 maater 节点的 slave 节点，复制规避和 parallel-syncs 参数有关</li>\n<li>4. 更新对原来 master 节点配置为 slave，并保持着对其 “关注”，当其恢复后命令他去复制新对 master 节点</li>\n</ul>\n</li>\n<li>选择 “合适的” slave 节点\n<ul>\n<li>1. 选择 slave-priority（slave 节点优先级）最高对 slave 节点，如果存在返回，不存在继续</li>\n<li>2. 选择复制偏移量最大的 slave 节点，复制最完整，存在返回，不存在继续</li>\n<li>3. 选择 runId 最小的 slave 节点</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"五-需要说明的问题\"><a class=\"markdownIt-Anchor\" href=\"#五-需要说明的问题\">#</a> 五、需要说明的问题</h2>\n<ul>\n<li>尽可能在不同物理机上和同一个网络部署 Redis sentinel 的所有节点</li>\n<li>Redis sentinel 中的 sentinel 节点个数应该大于等于 3 且最好是奇数。（节点数多可以保证高可用）</li>\n<li>Redis sentinel 中的数据节点和普通数据节点没有区别。每个 sentinel 节点在本质上还是一个 Redis 实例，只不过和 Redis 数据节点不同的是，其主要作用是监控 Redis 数据节点</li>\n<li>客户端初始化时连接的是 sentinel 节点集合，不再是具体的 Redis 节点，但 sentinel 只是配置中心不是代理。</li>\n</ul>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/",
            "title": "项目总结",
            "date_published": "2019-03-31T07:03:42.000Z",
            "content_html": "<h1 id=\"项目总结\"><a class=\"markdownIt-Anchor\" href=\"#项目总结\">#</a> 项目总结</h1>\n<h3 id=\"1-前端ant-desgin的使用\"><a class=\"markdownIt-Anchor\" href=\"#1-前端ant-desgin的使用\">#</a> 1、前端 ant desgin 的使用：</h3>\n<h4 id=\"1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可\"><a class=\"markdownIt-Anchor\" href=\"#1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可\">#</a> 1、前端 ant 组件为我们配置好了多种样式，复制粘贴修改参数即可，</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;ant.design&#x2F;components&#x2F;button-cn&#x2F;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-docker的基础命令和操作\"><a class=\"markdownIt-Anchor\" href=\"#2-docker的基础命令和操作\">#</a> 2、docker 的基础命令和操作：</h3>\n<h4 id=\"1-查看所有镜像\"><a class=\"markdownIt-Anchor\" href=\"#1-查看所有镜像\">#</a> 1、查看所有镜像：</h4>\n<p>​\t\t\t\tdocker images</p>\n<h4 id=\"2-删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#2-删除镜像\">#</a> 2、删除镜像：</h4>\n<p>​\t\t\t\tdocker</p>\n<h4 id=\"3-暂停镜像不然无法删除\"><a class=\"markdownIt-Anchor\" href=\"#3-暂停镜像不然无法删除\">#</a> 3、暂停镜像（不然无法删除）：</h4>\n<p>​\t\t\t\tdocker stop $(docker ps -a -q)</p>\n<h4 id=\"4-如果想要删除所有container的话再加一个指令\"><a class=\"markdownIt-Anchor\" href=\"#4-如果想要删除所有container的话再加一个指令\">#</a> 4、如果想要删除所有 container 的话再加一个指令：</h4>\n<p>​\t\t\t\tdocker rm $(docker ps -a -q)</p>\n<h4 id=\"5-查看当前有些什么images\"><a class=\"markdownIt-Anchor\" href=\"#5-查看当前有些什么images\">#</a> 5、查看当前有些什么 images</h4>\n<p>​\t\t\t\tdocker images</p>\n<h4 id=\"6-删除images通过image的id来指定删除谁\"><a class=\"markdownIt-Anchor\" href=\"#6-删除images通过image的id来指定删除谁\">#</a> 6、删除 images，通过 image 的 id 来指定删除谁</h4>\n<p>​\t\t\t\tdocker rmi <image id></p>\n<h4 id=\"7-想要删除untagged-images也就是那些id为none的image的话可以用\"><a class=\"markdownIt-Anchor\" href=\"#7-想要删除untagged-images也就是那些id为none的image的话可以用\">#</a> 7、想要删除 untagged images，也就是那些 id 为<None>的 image 的话可以用</h4>\n<p>​\t\t\t\tdocker rmi $(docker images | grep “^<none>” | awk “{print $3}”)</p>\n<h4 id=\"8-要删除全部image的话\"><a class=\"markdownIt-Anchor\" href=\"#8-要删除全部image的话\">#</a> 8、要删除全部 image 的话</h4>\n<p>​\t\t\t\tdocker rmi $(docker images -q)</p>\n<h4 id=\"9-启动容器\"><a class=\"markdownIt-Anchor\" href=\"#9-启动容器\">#</a> 9、启动容器</h4>\n<p>​\t\t\t\tdocker run -p 6380:6379 redis</p>\n<h4 id=\"10-查看所有容器\"><a class=\"markdownIt-Anchor\" href=\"#10-查看所有容器\">#</a> 10、查看所有容器</h4>\n<p>​\t\t\t\tdocker ps</p>\n<h2 id=\"3-redis的时间使用\"><a class=\"markdownIt-Anchor\" href=\"#3-redis的时间使用\">#</a> 3、redis 的时间使用</h2>\n<h4 id=\"1-给变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#1-给变量赋值\">#</a> 1、给变量赋值</h4>\n<p>​\t\t\t\tset 变量 值</p>\n<h4 id=\"2-查看变量的值\"><a class=\"markdownIt-Anchor\" href=\"#2-查看变量的值\">#</a> 2、查看变量的值</h4>\n<p>​\t\t\t\tget 变量</p>\n<h4 id=\"3-给变量附上过期时间\"><a class=\"markdownIt-Anchor\" href=\"#3-给变量附上过期时间\">#</a> 3、给变量附上过期时间</h4>\n<p>​\t\t\t\texpire 变量 秒速</p>\n<p>​</p>\n<h2 id=\"4-数据库连接池\"><a class=\"markdownIt-Anchor\" href=\"#4-数据库连接池\">#</a> 4、数据库连接池</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数据库链接池</span></span><br><span class=\"line\"><span class=\"comment\">#链接池对象</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从链接池获取链接</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\"></span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>,<span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-异步写文件\"><a class=\"markdownIt-Anchor\" href=\"#5-异步写文件\">#</a> 5、异步写文件</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiofiles.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fp.write(<span class=\"string\">&#x27;Have a good time. Have a good time\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;数据写入成功&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    tasks=[asyncio.create_task(test_demo()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9999</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(*tasks)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    start = time.time()  <span class=\"comment\"># 开始时间</span></span><br><span class=\"line\">    asyncio.run(main())  <span class=\"comment\"># 执行操作</span></span><br><span class=\"line\">    end = time.time()    <span class=\"comment\"># 结束时间</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;异步执行了:<span class=\"subst\">&#123;end - start&#125;</span>秒&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-悦哥翻墙软件\"><a class=\"markdownIt-Anchor\" href=\"#6-悦哥翻墙软件\">#</a> 6、悦哥翻墙软件</h2>\n<p>​\t\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbXkubmV0d29yay9wcm9kdWN0L2luZGV4\">https://cmy.network/product/index</span></p>\n<h2 id=\"7-队列\"><a class=\"markdownIt-Anchor\" href=\"#7-队列\">#</a> 7、队列</h2>\n<h4 id=\"1-队列的概念\"><a class=\"markdownIt-Anchor\" href=\"#1-队列的概念\">#</a> 1、队列的概念</h4>\n<p>​\t\t\t\t队列是一种特殊的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTYlODAlQTclRTglQTElQTgvMzIyODA4MQ==\">线性表</span>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后\t\t\t\t端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队\t\t\t\t尾，进行删除操作的端称为队头。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,keyname:<span class=\"built_in\">str</span>,**redis_kwargs</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">      self.__db = redis.Redis(**redis_kwargs)</span><br><span class=\"line\">      self.key = keyname</span><br><span class=\"line\"></span><br><span class=\"line\">      self.s = []</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#添加数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,x:<span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#self.s.append(x)</span></span><br><span class=\"line\">      <span class=\"comment\">#添加队列数据</span></span><br><span class=\"line\">      self.__db.rpush(self.key,x)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#删除数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.s.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#获取数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#return self.s[0]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__db.lpop(self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#判断是否执行完毕</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> <span class=\"built_in\">bool</span>(self.s)</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-中间件\"><a class=\"markdownIt-Anchor\" href=\"#8-中间件\">#</a> 8、中间件</h2>\n<h4 id=\"1-概念\"><a class=\"markdownIt-Anchor\" href=\"#1-概念\">#</a> 1、概念</h4>\n<p>​\t\t\t\t\t中间件是一个 Python 程序员用来处理 Django 的请求和响应的框架级别的钩子，它是一个轻量，低级\t\t\t\t\t别的插件系统，用于全局范围内改变 Django 的输入，输出。中间件可以在系统输入之前进行输入，\t\t\t\t\t在系统输出之前进行输出</p>\n<p>​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"><span class=\"keyword\">from</span> z_Userapp.models <span class=\"keyword\">import</span> JurisdictionModel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中间件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Middle</span>(<span class=\"params\">MiddlewareMixin</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span>(<span class=\"params\">self,request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取uid</span></span><br><span class=\"line\">        uid=request.GET.get(<span class=\"string\">&#x27;uid&#x27;</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 如果存在，则查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> uid:<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\"># user=JurisdictionModel.objects.filter(user_id=uid)</span></span><br><span class=\"line\">            request.level=<span class=\"built_in\">int</span>(uid) &amp; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>你需要在 settings.py 中的 MIDDLEWARE 中进行注册才可以使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;应用名.middleware.你的中间件类名&#x27;</span>,</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-七牛云\"><a class=\"markdownIt-Anchor\" href=\"#9-七牛云\">#</a> 9、七牛云</h2>\n<p>​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> qiniu <span class=\"keyword\">import</span> Auth</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qiniu_token</span>():</span></span><br><span class=\"line\">    qn = Auth(<span class=\"string\">&#x27;vkoJGPbnvO-zwjVX3DcVJnXtpt9gclvnH5N_A4he&#x27;</span>, <span class=\"string\">&#x27;Mab055XtHiEYRRoyLEn02JBsY2kRnDAsmonQdhiT&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 指定上传空间, 返回token值</span></span><br><span class=\"line\">    token = qn.upload_token(<span class=\"string\">&#x27;shixun-p8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpTokenView</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        七牛云token接口</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">&#x27;token&#x27;</span>: qiniu_token()&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-又拍云\"><a class=\"markdownIt-Anchor\" href=\"#10-又拍云\">#</a> 10、又拍云</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> upyun</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义文件上传类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFile</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        file = request.FILES.get(<span class=\"string\">&#x27;file&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(file)</span><br><span class=\"line\">        up = upyun.UpYun(<span class=\"string\">&#x27;shixun-p8&#x27;</span>, username=<span class=\"string\">&#x27;coisnini&#x27;</span>, password=<span class=\"string\">&#x27;5LQiEB6YUY4aTIHQDNLMPpVf2QpnNeft&#x27;</span>)</span><br><span class=\"line\">        headers = &#123;<span class=\"string\">&#x27;x-gmkerl-rotate&#x27;</span>: <span class=\"string\">&#x27;180&#x27;</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> file.chunks():</span><br><span class=\"line\">            res = up.put(<span class=\"string\">&#x27;/touxiang1.jpg&#x27;</span>, chunk, checksum=<span class=\"literal\">True</span>, headers=headers)</span><br><span class=\"line\">        <span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(json.dumps(&#123;<span class=\"string\">&#x27;filename&#x27;</span>: file.name&#125;), content_type=<span class=\"string\">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-mongodb\"><a class=\"markdownIt-Anchor\" href=\"#11-mongodb\">#</a> 11、MongoDB</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> z_Userapp.MyMongoDB <span class=\"keyword\">import</span> MyMonge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接MongoDB</span></span><br><span class=\"line\">client = MyMonge(<span class=\"string\">&#x27;z_Cate&#x27;</span>, <span class=\"string\">&#x27;CateTemplate&#x27;</span>, **&#123;<span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">27017</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取MongoDB数据</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetMongo</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 进入数据库</span></span><br><span class=\"line\">        <span class=\"comment\"># db = client.z_Cate</span></span><br><span class=\"line\">        <span class=\"comment\"># 集合</span></span><br><span class=\"line\">        <span class=\"comment\"># zst = db.CateTemplate</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = request.GET.get(<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        wid = WorkOrderModel.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> wid.pid == <span class=\"number\">0</span>:</span><br><span class=\"line\">            data = client.find(&#123;<span class=\"string\">&#x27;wid&#x27;</span>: <span class=\"built_in\">str</span>(wid.<span class=\"built_in\">id</span>)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            data = client.find(&#123;<span class=\"string\">&#x27;wid&#x27;</span>: <span class=\"built_in\">str</span>(wid.pid)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"built_in\">eval</span>(data[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-工单递归死循环\"><a class=\"markdownIt-Anchor\" href=\"#12-工单递归死循环\">#</a> 12、工单递归死循环</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xTree</span>(<span class=\"params\">datas</span>):</span></span><br><span class=\"line\">    lists = []</span><br><span class=\"line\">    tree = &#123;&#125;</span><br><span class=\"line\">    parent_id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">        item = i</span><br><span class=\"line\">        tree[item[<span class=\"string\">&#x27;id&#x27;</span>]] = item</span><br><span class=\"line\">    root = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">        obj = i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj[<span class=\"string\">&#x27;pid&#x27;</span>]:</span><br><span class=\"line\">            root = tree[obj[<span class=\"string\">&#x27;id&#x27;</span>]]</span><br><span class=\"line\">            lists.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parent_id = obj[<span class=\"string\">&#x27;pid&#x27;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;childlist&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tree[parent_id]:</span><br><span class=\"line\">                tree[parent_id][<span class=\"string\">&#x27;childlist&#x27;</span>] = []</span><br><span class=\"line\">            tree[parent_id][<span class=\"string\">&#x27;childlist&#x27;</span>].append(tree[obj[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-三方登录\"><a class=\"markdownIt-Anchor\" href=\"#13-三方登录\">#</a> 13、三方登录</h2>\n<h4 id=\"导报\"><a class=\"markdownIt-Anchor\" href=\"#导报\">#</a> 导报</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> hmac</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-码云\"><a class=\"markdownIt-Anchor\" href=\"#1-码云\">#</a> 1、码云</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gitee</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(</span><br><span class=\"line\">            <span class=\"string\">&quot;https://gitee.com/oauth/authorize?client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;response_type=code&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiteeBack</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        code = request.GET.get(<span class=\"string\">&quot;code&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        r = requests.post(</span><br><span class=\"line\">            <span class=\"string\">&quot;https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=%s&amp;client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;client_secret=ec39df1740d798ac832ab3df1ac99aedd04459c6b7d552f43099ef24273554cc&quot;</span> % code)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        r = requests.get(<span class=\"string\">&quot;https://gitee.com/api/v5/user?access_token=2b8c4824659611c8a920631bb5684008&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        name = json.loads(r.text)[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">        user = UserModel.objects.<span class=\"built_in\">filter</span>(username=name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://127.0.0.1:8080/myback&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user = UserModel(username=<span class=\"built_in\">str</span>(<span class=\"string\">&quot;gitee_&quot;</span> + name))</span><br><span class=\"line\">            user.save()</span><br><span class=\"line\">            user = UserModel.objects.<span class=\"built_in\">filter</span>(username=name)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://127.0.0.1:8080/myback&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-钉钉\"><a class=\"markdownIt-Anchor\" href=\"#2-钉钉\">#</a> 2、钉钉</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 钉钉三方登录</span><br><span class=\"line\">def ding_back(request):</span><br><span class=\"line\">    appid &#x3D; &#39;dingoar91fvryq6pugb1nx&#39;</span><br><span class=\"line\">    redirect_uri &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;z&#x2F;ding_back&#x2F;&#39;</span><br><span class=\"line\">    # 获取code</span><br><span class=\"line\">    code &#x3D; request.GET.get(&quot;code&quot;)</span><br><span class=\"line\">    t &#x3D; time.time()</span><br><span class=\"line\">    # 时间戳</span><br><span class=\"line\">    timestamp &#x3D; str((int(round(t * 1000))))</span><br><span class=\"line\">    # 密钥</span><br><span class=\"line\">    appSecret &#x3D; &#39;Njh7SJwIE-MOoZa9P7nxgFf18iNOzCS2KvUaBybQ1xjTszXRA96XDvrTgttDHhVf&#39;</span><br><span class=\"line\">    # 构造签名</span><br><span class=\"line\">    signature &#x3D; base64.b64encode(</span><br><span class=\"line\">        hmac.new(appSecret.encode(&#39;utf-8&#39;), timestamp.encode(&#39;utf-8&#39;), digestmod&#x3D;sha256).digest())</span><br><span class=\"line\">    # 请求接口，换取钉钉用户名</span><br><span class=\"line\">    payload &#x3D; &#123;&#39;tmp_auth_code&#39;: code&#125;</span><br><span class=\"line\">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json&#39;&#125;</span><br><span class=\"line\">    # 导requests</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    res &#x3D; requests.post(&#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;sns&#x2F;getuserinfo_bycode?signature&#x3D;&#39; + urllib.parse.quote(</span><br><span class=\"line\">        signature.decode(&quot;utf-8&quot;)) + &quot;&amp;timestamp&#x3D;&quot; + timestamp + &quot;&amp;accessKey&#x3D;dingoar91fvryq6pugb1nx&quot;,</span><br><span class=\"line\">                        data&#x3D;json.dumps(payload), headers&#x3D;headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    re_dict &#x3D; json.loads(res.text)</span><br><span class=\"line\">    print(re_dict)</span><br><span class=\"line\">    # 判断是否为第一次登录</span><br><span class=\"line\">    user &#x3D; UserModel.objects.filter(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class=\"line\"></span><br><span class=\"line\">    sina_id &#x3D; &#39;&#39;</span><br><span class=\"line\">    user_id &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">    if user:</span><br><span class=\"line\">        # 代表曾经用过钉钉登录</span><br><span class=\"line\">        sina_id &#x3D; user.username</span><br><span class=\"line\">        user_id &#x3D; user.id</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # 代表首次登录，入库</span><br><span class=\"line\">        user &#x3D; UserModel(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;]), password&#x3D;&#39;&#39;)</span><br><span class=\"line\">        # 保存入库</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        sina_id &#x3D; str(re_dict.get(&#39;user_info&#39;))</span><br><span class=\"line\">        # 查询用户id</span><br><span class=\"line\">        user &#x3D; UserModel.objects.filter(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class=\"line\">        user_id &#x3D; user.id</span><br><span class=\"line\"></span><br><span class=\"line\">    # 进行跳转</span><br><span class=\"line\">    return redirect(&quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;myback?sina_id&#x3D;&quot; + str(sina_id) + &quot;&amp;uid&#x3D;&quot; + str(user_id))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/Ant%E5%9F%BA%E7%A1%80%E6%8C%89%E9%92%AE/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/Ant%E5%9F%BA%E7%A1%80%E6%8C%89%E9%92%AE/",
            "title": "Ant基础按钮",
            "date_published": "2019-03-31T06:59:19.000Z",
            "content_html": "<h1 id=\"ant的按钮\"><a class=\"markdownIt-Anchor\" href=\"#ant的按钮\">#</a> Ant 的按钮</h1>\n<h2 id=\"1-预习aut-design\"><a class=\"markdownIt-Anchor\" href=\"#1-预习aut-design\">#</a> 1、预习 Aut Design</h2>\n<h4 id=\"1-a-button的使用\"><a class=\"markdownIt-Anchor\" href=\"#1-a-button的使用\">#</a> （1）、a-button 的使用：</h4>\n<pre><code>\tbutton基础的几个按钮：\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot;&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\tdashed    danger    primary   link\n\n\tloading的作用\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot; loading&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\t目的是在网页展示出加载中的样式\n\n\tdisabled的作用\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot; disabled&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\t将按钮设置不可选\n\n\tblock的作用\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot; block&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\t控制按钮的宽度，可以使用style来设置宽高\n\n\tghost的作用\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot; ghost&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\t将按钮设置隐身状态\n\n\tsiez的作用\n\n\t\t&lt;a-button type=&quot;按钮的类型&quot; :size=&quot;size&quot;&gt;按钮的名字&lt;/a-button&gt;\n\n\t\t\t拥有large，default，small三个按钮的大小，如果不需要变换大小就写size=size\n</code></pre>\n<p>​\t\t\t\t\t\t\tAnt Design 官方文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvYnV0dG9uLWNuLw==\">https://ant.design/components/button-cn/</span></p>\n",
            "tags": [
                "Ant Design"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "gitee和gethub的区别",
            "date_published": "2019-03-18T07:15:38.000Z",
            "content_html": "<p><img data-src=\"https://img.php.cn/upload/article/000/000/046/5ebb9c81a1c98622.jpg\" alt=\"img\"></p>\n<p>想要自己做一些东西，或者和别人合作开发，就必须要学会使用 Git。最初了解 Git，同时听到了 Github、Gitee（码云），于是想要弄明白三者之间的区别与联系，经过一番搜寻，大致明白 Git 是一种东西，在本地的，可以下载安装。<br>\nGit 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmdpdC1zY20uY29tJTJG\">https://git-scm.com/</span></p>\n<h4 id=\"github与gitee在国内的对比\"><a class=\"markdownIt-Anchor\" href=\"#github与gitee在国内的对比\">#</a> github 与 gitee 在国内的对比</h4>\n<p>GitHub 是全英文并且用户基数多，知名的库也多，而 Gitee 全是中文，而且大部分用户都是国人，优秀的库相对于 GitHub 也少，在国内访问 Github 偶尔会有不稳定情况，而 Gitee 不会出现不稳定情况。</p>\n<h4 id=\"github的特点\"><a class=\"markdownIt-Anchor\" href=\"#github的特点\">#</a> GitHub 的特点</h4>\n<p>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p>GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过 350 万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p>\n<h4 id=\"gitee的特点\"><a class=\"markdownIt-Anchor\" href=\"#gitee的特点\">#</a> Gitee 的特点</h4>\n<p>Gitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/17559159-5fa12b9795227f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp\" alt=\"img\"></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2/",
            "title": "docker容器式部署",
            "date_published": "2019-02-13T07:19:26.000Z",
            "content_html": "<h1 id=\"docker容器\"><a class=\"markdownIt-Anchor\" href=\"#docker容器\">#</a> docker 容器</h1>\n<p>容器是镜像的一个运行实例。所不同的是，镜像是静态的只读文件，而容器带有运行时需要的可写文件层。如果认为虚拟机是模拟运行的一整套操作系统（包括内核、应用运行态环境和其他系统环境）和跑在上面的应用，那么 Docker 容器就是独立运行的一个（或一组）应用，以及它们必需的运行环境。</p>\n<h3 id=\"下载容器\"><a class=\"markdownIt-Anchor\" href=\"#下载容器\">#</a> 下载容器</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动容器\"><a class=\"markdownIt-Anchor\" href=\"#启动容器\">#</a> 启动容器</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看docker状态-绿色启动-灰色停止\"><a class=\"markdownIt-Anchor\" href=\"#查看docker状态-绿色启动-灰色停止\">#</a> 查看 docker 状态 绿色启动 灰色停止</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"docker镜像\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像\">#</a> docker 镜像</h1>\n<h3 id=\"下载镜像\"><a class=\"markdownIt-Anchor\" href=\"#下载镜像\">#</a> 下载镜像</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看镜像\"><a class=\"markdownIt-Anchor\" href=\"#查看镜像\">#</a> 查看镜像</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h1 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> Dockerfile</h1>\n<h3 id=\"什么是dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#什么是dockerfile\">#</a> 什么是 dockerfile?</h3>\n<p>Dockerfile 是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker 通过读取 Dockerfile 中的指令自动生成映像。<br>\ndocker build 命令用于从 Dockerfile 构建映像。可以在 docker build 命令中使用 - f 标志指向文件系统中任何位置的 Dockerfile。</p>\n<h3 id=\"dockerfile的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的基本结构\">#</a> Dockerfile 的基本结构</h3>\n<p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p>\n<h3 id=\"dockerfile文件说明\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile文件说明\">#</a> Dockerfile 文件说明</h3>\n<p>Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用 RUN，CMD，FROM，EXPOSE，ENV 等指令。</p>\n<h3 id=\"from指定基础镜像必须为第一个命令\"><a class=\"markdownIt-Anchor\" href=\"#from指定基础镜像必须为第一个命令\">#</a> FROM：指定基础镜像，必须为第一个命令</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">　　FROM &lt;image&gt;</span><br><span class=\"line\">　　FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class=\"line\">　　FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">　　FROM mysql:5.6</span><br><span class=\"line\">注：</span><br><span class=\"line\">　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure>\n<h3 id=\"maintainer-维护者信息\"><a class=\"markdownIt-Anchor\" href=\"#maintainer-维护者信息\">#</a> MAINTAINER: 维护者信息</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    MAINTAINER &lt;name&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    MAINTAINER Jasper Xu</span><br><span class=\"line\">    MAINTAINER sorex@163.com</span><br><span class=\"line\">    MAINTAINER Jasper Xu &lt;sorex@163.com&gt;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/",
            "title": "简单介绍三方支付",
            "date_published": "2019-02-13T07:17:24.000Z",
            "content_html": "<h2 id=\"1安装-pip-install-python-alipay-sdk\"><a class=\"markdownIt-Anchor\" href=\"#1安装-pip-install-python-alipay-sdk\">#</a> 1. 安装 pip install python-alipay-sdk</h2>\n<h2 id=\"2-支付宝沙箱地址\"><a class=\"markdownIt-Anchor\" href=\"#2-支付宝沙箱地址\">#</a> 2. 支付宝沙箱地址</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuaG9tZS5hbGlwYXkuY29tL3BsYXRmb3JtL2FwcERhaWx5Lmh0bT90YWI9aW5mbw==\">https://openhome.alipay.com/platform/appDaily.htm?tab=info</span></p>\n<p><img data-src=\"https://i.loli.net/2021/01/29/2ebCSJ4Zwj7HfWB.jpg\" alt=\"img\"></p>\n<p>下一步</p>\n<p><img data-src=\"https://i.loli.net/2021/01/29/qnoZ9uShQBHyevX.jpg\" alt=\"img\"></p>\n<p><img data-src=\"https://i.loli.net/2021/01/29/cAoBjXWNpL9xSn1.jpg\" alt=\"img\"></p>\n<p><img data-src=\"https://i.loli.net/2021/01/29/MQdEYWpemur7T4R.jpg\" alt=\"img\"></p>\n<h2 id=\"下载支付宝开放平台开发助手地址\"><a class=\"markdownIt-Anchor\" href=\"#下载支付宝开放平台开发助手地址\">#</a> 下载支付宝开放平台开发助手地址:</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3AudGIuY24vcm1zcG9ydGFsXzY2ODBfc2VjcmV0X2tleV90b29sc19SU0Ffd2luLnppcA==\">http://p.tb.cn/rmsportal_6680_secret_key_tools_RSA_win.zip</span></p>\n<p>private.txt 放置私钥</p>\n<p>public.txt 放置应用公钥</p>\n<p>在 python 中配置好你的公钥 私钥</p>\n<p>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app_private_key_string &#x3D; open(os.path.join(key_dir, &quot;app_private_key.pem&quot;)).read()</span><br><span class=\"line\">alipay_public_key_string &#x3D; open(os.path.join(key_dir, &quot;alipay_public_key.pem&quot;)).read()</span><br><span class=\"line\"></span><br><span class=\"line\">alipay &#x3D; AliPay(</span><br><span class=\"line\">    appid&#x3D;2016093000630420,</span><br><span class=\"line\">    app_notify_url&#x3D;None,  # 默认回调url</span><br><span class=\"line\">    # 我的私钥</span><br><span class=\"line\">    app_private_key_string&#x3D;app_private_key_string,  # 支付宝公钥</span><br><span class=\"line\">    alipay_public_key_string&#x3D;alipay_public_key_string,</span><br><span class=\"line\">    sign_type&#x3D;&quot;RSA2&quot;,</span><br><span class=\"line\">    debug&#x3D;True,  # 打开调试模式</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">电脑支付</span><br><span class=\"line\">class AliPayView(APIView):</span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        order_string &#x3D; alipay.api_alipay_trade_page_pay(</span><br><span class=\"line\">            subject&#x3D;&quot;&quot;,  # 支付的对象</span><br><span class=\"line\">            out_trade_no&#x3D; 0, # 订单，</span><br><span class=\"line\">            total_amount&#x3D;0 , # 支付的钱数 订单总金额</span><br><span class=\"line\">            return_url&#x3D;&quot;&quot;,  # 支付回调的页面</span><br><span class=\"line\">            notify_url&#x3D;&quot;&quot;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        BASE_URL &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do?&quot;</span><br><span class=\"line\">        # 构建支付链接</span><br><span class=\"line\">        return Response(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#39;alipay_url&#39;: BASE_URL + order_string,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>",
            "tags": [
                "三方支付"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/11/13/celery%E5%BC%82%E6%AD%A5/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/11/13/celery%E5%BC%82%E6%AD%A5/",
            "title": "celery异步",
            "date_published": "2018-11-13T07:18:58.000Z",
            "content_html": "<h2 id=\"这是使用celery异步发送短信的方法\"><a class=\"markdownIt-Anchor\" href=\"#这是使用celery异步发送短信的方法\">#</a> 这是使用 celery 异步发送短信的方法</h2>\n<h2 id=\"安装celery以及redis\"><a class=\"markdownIt-Anchor\" href=\"#安装celery以及redis\">#</a> 安装 celery 以及 redis</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install celery&#x3D;&#x3D;3.1.2</span><br><span class=\"line\">pip install redis&#x3D;&#x3D;2.1.6</span><br></pre></td></tr></table></figure>\n<h2 id=\"在setting中配置celery\"><a class=\"markdownIt-Anchor\" href=\"#在setting中配置celery\">#</a> 在 setting 中配置 celery</h2>\n<p><img data-src=\"https://i.loli.net/2021/01/30/aVxySodZzXDBLsb.jpg\" alt=\"img\"></p>\n<h2 id=\"配置broker消息队列的地址我是在setting中配置的\"><a class=\"markdownIt-Anchor\" href=\"#配置broker消息队列的地址我是在setting中配置的\">#</a> 配置 broker 消息队列的地址 (我是在 setting 中配置的)</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import djcelery</span><br><span class=\"line\">djcelery.setup_loader()</span><br><span class=\"line\">BROKER_URL &#x3D; &#39;redis:&#x2F;&#x2F;123.57.61.168:6379&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个taskspy的文件-写异步代码\"><a class=\"markdownIt-Anchor\" href=\"#创建一个taskspy的文件-写异步代码\">#</a> 创建一个 tasks.py 的文件 写异步代码</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery.task import task</span><br><span class=\"line\">from ronglian_sms_sdk import SmsSDK</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># 这是发送短信的服务部分</span><br><span class=\"line\">ACCOUNT_SID &#x3D; &#39;&#39;</span><br><span class=\"line\">AUTH_TOKEN &#x3D; &#39;&#39;</span><br><span class=\"line\">APP_ID &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">def sdk(ACCOUNT_SID, AUTH_TOKEN, APP_ID):</span><br><span class=\"line\">    return SmsSDK(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@task  # 升级为异步的标志</span><br><span class=\"line\">def send(sms, tid&#x3D;1, mobile&#x3D;[], datas&#x3D;[]):</span><br><span class=\"line\">    # time.sleep(5)</span><br><span class=\"line\">    tid &#x3D; tid  # 登录验证模版 默认ID为1</span><br><span class=\"line\">    mobile &#x3D; &#39;,&#39;.join(mobile) if len(mobile) &gt; 1 else mobile[0]  # 接收的手机号列表</span><br><span class=\"line\">    datas &#x3D; datas</span><br><span class=\"line\">    sms.sendMessage(tid, mobile, datas)</span><br></pre></td></tr></table></figure>\n<h2 id=\"接下来就可以在view中发送短信了\"><a class=\"markdownIt-Anchor\" href=\"#接下来就可以在view中发送短信了\">#</a> 接下来就可以在 view 中发送短信了</h2>\n<p>send.delay 发送短信</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sms &#x3D; sdk(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span><br><span class=\"line\">a &#x3D; random.sample([str(i) for i in range(10)], 6)</span><br><span class=\"line\">code &#x3D; &#39;&#39;.join(a)</span><br><span class=\"line\">r.set(phone, code, 60)</span><br><span class=\"line\">datas &#x3D; [code, &#39;60s&#39;]</span><br><span class=\"line\">send.delay(sms, mobile&#x3D;[phone], datas&#x3D;datas)</span><br><span class=\"line\"># 直接加入消息队列，由celery去管理</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要运行两个终端-一个程序-一个异步的终端\"><a class=\"markdownIt-Anchor\" href=\"#需要运行两个终端-一个程序-一个异步的终端\">#</a> 需要运行两个终端 一个程序 一个异步的终端</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py manage.py celery worker</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Celery"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "title": "gitee企业级别的命令",
            "date_published": "2018-10-26T05:50:03.000Z",
            "content_html": "<h1 id=\"git操作文档\"><a class=\"markdownIt-Anchor\" href=\"#git操作文档\">#</a> git 操作文档</h1>\n<h2 id=\"1生成ssh公钥\"><a class=\"markdownIt-Anchor\" href=\"#1生成ssh公钥\">#</a> 1. 生成 ssh 公钥</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置用户名 xxx代表用户名（自定义）</span></span><br><span class=\"line\">git config --global user.name = <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//设置邮箱</span></span><br><span class=\"line\">git config --global user.email = <span class=\"string\">&quot;xxx@xxxx.xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//生成私钥</span></span><br><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">或者</span><br><span class=\"line\">ssh-keygen -t rsa -C “邮箱”</span><br></pre></td></tr></table></figure>\n<p>出现如下图案，表示公钥生成成功</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200607110046372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>找到本地 user / 本机用户名 /.ssh 文件 打开 id_rsa.pub 将私钥复制到用到地方（github ，码云，gitlub）</p>\n<h2 id=\"2-克隆代码\"><a class=\"markdownIt-Anchor\" href=\"#2-克隆代码\">#</a> 2. 克隆代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用git clone 命令拉取代码</span><br><span class=\"line\"></span><br><span class=\"line\">git  clone  xxxx  默认是 master 分支</span><br><span class=\"line\">拉取别的分支代码，使用</span><br><span class=\"line\">git  clone  -b  dev  xxx </span><br></pre></td></tr></table></figure>\n<h2 id=\"3-更新代码\"><a class=\"markdownIt-Anchor\" href=\"#3-更新代码\">#</a> 3. 更新代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 命令</span><br><span class=\"line\">或者 --rebase 的这里不多做介绍，大家结合实际开始使用</span><br><span class=\"line\">git pull --rebase 命令</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-提交代码\"><a class=\"markdownIt-Anchor\" href=\"#4-提交代码\">#</a> 4. 提交代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将全部改动的文件添加到暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\">//将单个文件改动的文件添加到暂存区</span></span><br><span class=\"line\">git add 文件名</span><br><span class=\"line\"><span class=\"comment\">//提交本次代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//提交暂存区到文件  需要编辑commit信息 建议使用如下命令</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\">或者</span><br><span class=\"line\">git commit -m “提交信息”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推送到远程仓库</span></span><br><span class=\"line\">git push </span><br><span class=\"line\"><span class=\"comment\">//推送 xxx 代表 分支名称</span></span><br><span class=\"line\">git push origin xxx </span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">----------------------出现不想提交到内容--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤销本地改动的文件 如改动a.txt  可以使用如下命令撤销改动（注：没有进行add操作）</span></span><br><span class=\"line\">git checkout -- 文件</span><br><span class=\"line\"></span><br><span class=\"line\">如果进行过add 操作 使用以下命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤销add 后的提交使用以下命令</span></span><br><span class=\"line\">git reset HEAD 文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"5回退版本\"><a class=\"markdownIt-Anchor\" href=\"#5回退版本\">#</a> 5. 回退版本</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看git 提交记录</span><br><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\">可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span><br><span class=\"line\">git reflog </span><br></pre></td></tr></table></figure>\n<p>下图是 git log <img data-src=\"https://img-blog.csdnimg.cn/20200607111300773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"> 下面介绍下我们开发中最经常使用到代码回退</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软回退，不会删掉自己本地修改的内容</span></span><br><span class=\"line\">git reset --soft commitID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//硬回退，会删掉自己本地修改的内容</span></span><br><span class=\"line\">git reset --hard commitID</span><br></pre></td></tr></table></figure>\n<h2 id=\"6分支\"><a class=\"markdownIt-Anchor\" href=\"#6分支\">#</a> 6. 分支</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看所有分支</span></span><br><span class=\"line\">  git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前使用分支(结果列表中前面标*号的表示当前使用分支)</span></span><br><span class=\"line\">&gt; git branch</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p><strong>切换分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\">//创建分支 newFunctionA</span></span><br><span class=\"line\">git branch newFunctionA</span><br><span class=\"line\"><span class=\"comment\">//切换到 newFunctionA</span></span><br><span class=\"line\">git checkout newFunctionA</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-冲突解决\"><a class=\"markdownIt-Anchor\" href=\"#7-冲突解决\">#</a> 7. 冲突解决</h2>\n<p>情景，aa/a.txt 中的，bb=1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改本地的aa/a.txt中的，bb=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">在服务器也修改了aa/a.txt,bb=<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">提交本地的代码到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在服务器执行git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">此时，发生代码冲突</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> 如果希望保存本地改动并拉下最新服务器代码，手动merge</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span>)要保留服务器上的修改</span><br><span class=\"line\"></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list将当前的Git栈信息打印出来</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>)暂存了本地修改之后，pull内容</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">3</span>)还原暂存的内容</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop stash@&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>)解决文件中冲突的的部分</span><br><span class=\"line\"></span><br><span class=\"line\">打开冲突的文件 手动解决冲突</span><br></pre></td></tr></table></figure>\n<h2 id=\"终\"><a class=\"markdownIt-Anchor\" href=\"#终\">#</a> 终：</h2>\n<p>给大家介绍一个 好的可视化 git 版本工具</p>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210426135128286.png\" alt=\"image-20210426135128286\"></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/",
            "title": "python基础2（数据类型）",
            "date_published": "2018-10-15T12:39:55.000Z",
            "content_html": "<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<p>​</p>\n<h2 id=\"python中常见的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#python中常见的数据类型\">#</a> Python 中常见的数据类型</h2>\n<h3 id=\"int整型\"><a class=\"markdownIt-Anchor\" href=\"#int整型\">#</a> int 整型：</h3>\n<p>​\t可变不可变：</p>\n<p>​\t\t\t\t值不可变类型，改变变量值实则是改变了变量的指向</p>\n<p>​\t常用方法：</p>\n<p>​\t\t\t\tbit_length（） 返回 int 变量所占二进制位数</p>\n<p>​\t\t\t\tint ()   强转字符串为 int 类型（但是字符串里只能是数字）</p>\n<h3 id=\"set数据具有唯一性\"><a class=\"markdownIt-Anchor\" href=\"#set数据具有唯一性\">#</a> set：数据具有唯一性</h3>\n<p>​\t\t可变不可变：</p>\n<p>​\t\t\t\tset 是可变类型</p>\n<p>​\t\t有序无序：</p>\n<p>​\t\t\t\t无序，不可取值</p>\n<p>​\t\t常用法法：</p>\n<p>​\t\t\t新增：</p>\n<p>​\t\t\t\t\t   s1.add (元素)</p>\n<p>​\t\t\t\t\t   s1.update(s2)</p>\n<p>​\t\t\t删除：clear () 清空 set</p>\n<p>​\t\t\t\t\t   pop () 随机删除并返回值</p>\n<p>​     \t\t\t\t  remove (元素) 删除指定元素</p>\n<p>s1.isdisjoint (s1) 判断是否没有交集，没有返回 True 有返回 Flase</p>\n<p>s1.issubset (s2) 判断是都是 s2 的子集</p>\n<p>s1.issuperset (s2) 判断是否是 s2 的父集</p>\n<h3 id=\"dict\"><a class=\"markdownIt-Anchor\" href=\"#dict\">#</a> dict</h3>\n<p>​\t\t\tdict 字典的结构就是‘键 - 值对’，每一个键对应一个值，可以通过键来查询值，dict 字典是无序的</p>\n<p>​\t\t\t定义的键必须是不可变的，所以可以是数字，字符亦或者是布尔值。</p>\n<p>​\t\t\t但是值得定义可以使任何数据类型</p>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> list</h3>\n<h4 id=\"1-append\"><a class=\"markdownIt-Anchor\" href=\"#1-append\">#</a> 1、append</h4>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#append用于在列表末尾追加新的对象</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.append(4)                          #the result ： [1, 2, 3, 4]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-count\"><a class=\"markdownIt-Anchor\" href=\"#2-count\">#</a> 2、count</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#count方法统计某个元素在列表中出现的次数</span><br><span class=\"line\">a &#x3D; [&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;,&#39;aa&#39;,&#39;aa&#39;]</span><br><span class=\"line\">print(a.count(&#39;aa&#39;))                 #the result ： 3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-extend\"><a class=\"markdownIt-Anchor\" href=\"#3-extend\">#</a> 3、extend</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#extend方法可以在列表的末尾一次性追加另一个序列中的多个值</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">b &#x3D; [4,5,6]</span><br><span class=\"line\">a.extend(b)                          #the result ：[1, 2, 3, 4, 5, 6]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-index\"><a class=\"markdownIt-Anchor\" href=\"#4-index\">#</a> 4、index</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#index函数用于从列表中找出某个值第一个匹配项的索引位置</span><br><span class=\"line\">a &#x3D; [1,2,3,1]</span><br><span class=\"line\">print(a.index(1))                   #the result ： 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-pop\"><a class=\"markdownIt-Anchor\" href=\"#5-pop\">#</a> 5、pop</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.pop()                             #the result ： [1, 2]</span><br><span class=\"line\">a.pop(0)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-insert\"><a class=\"markdownIt-Anchor\" href=\"#6-insert\">#</a> 6、insert</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#insert方法用于将对象插入到列表中</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.insert(0,&#39;aa&#39;)            #the result : [&#39;aa&#39;, 1, 2, 3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"7-remove\"><a class=\"markdownIt-Anchor\" href=\"#7-remove\">#</a> 7、remove</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#remove方法用于移除列表中某个值的第一个匹配项</span><br><span class=\"line\">a &#x3D; [&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;,&#39;aa&#39;]</span><br><span class=\"line\">a.remove(&#39;aa&#39;)                      #the result ： [&#39;bb&#39;, &#39;cc&#39;, &#39;aa&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"8-reverse\"><a class=\"markdownIt-Anchor\" href=\"#8-reverse\">#</a> 8、reverse</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#reverse方法将列表中的元素反向存放</span><br><span class=\"line\">a &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br><span class=\"line\">a.reverse()                         #the result ： [&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"9-sort\"><a class=\"markdownIt-Anchor\" href=\"#9-sort\">#</a> 9、sort</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列</span><br><span class=\"line\">a &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,1,2,3]</span><br><span class=\"line\">a.sort()                           #the result ：[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"10-enumerate\"><a class=\"markdownIt-Anchor\" href=\"#10-enumerate\">#</a> 10、enumerate</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li &#x3D; [11,22,33,44,55,66]</span><br><span class=\"line\">for k,v in enumerate(li, 1):  # 1.代表 k 从哪个数字开始</span><br><span class=\"line\">    print(k,v)</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">1 11</span><br><span class=\"line\">2 22</span><br><span class=\"line\">3 33</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"11-ange和xrange\"><a class=\"markdownIt-Anchor\" href=\"#11-ange和xrange\">#</a> 11、ange 和 xrange</h4>\n<ul>\n<li>指定范围，生成指定的数字</li>\n<li>注：python3 中的 range 类似 python2 中的 xrange，比如 a = range (1,4) : a 返回的不是列表对象而是一个可迭代对象（&lt;class ‘range’&gt;）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1、range根据start与stop指定的范围以及step设定的步长，生成一个序列：range([start,] stop[, step])</span><br><span class=\"line\">#2、xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器</span><br><span class=\"line\">for i in range(1,10,2):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"12-列表去空\"><a class=\"markdownIt-Anchor\" href=\"#12-列表去空\">#</a> 12、列表去空</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 法1：</span><br><span class=\"line\">filter(None, your_list)</span><br><span class=\"line\"></span><br><span class=\"line\"># 法2：</span><br><span class=\"line\">while &#39;&#39; in your_list:</span><br><span class=\"line\">    your_list.remove(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 法3：</span><br><span class=\"line\">your_list &#x3D; [x for x in your_list if x !&#x3D; &#39;&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"tuple元祖\"><a class=\"markdownIt-Anchor\" href=\"#tuple元祖\">#</a> tuple 元祖</h3>\n<ul>\n<li>\n<p>** 元组定义：** 元组和列表一样，也是一种序列，唯一的不同是元组不能修改</p>\n<p>​\t可变不可变：</p>\n<p>​\t\t\t不可变，如果元素为可变类型，元素内部值是可修改的</p>\n<p>​\t常用方法：</p>\n<p>​\t\t\tcount (x), 返回 x 在元组中出现的次数</p>\n<p>​\t\t\tindex (x,start,end) 返回 x 在元组指定范围的索引值，可指定起终点索引</p>\n</li>\n</ul>\n<h4 id=\"1-创建元组\"><a class=\"markdownIt-Anchor\" href=\"#1-创建元组\">#</a> 1 创建元组</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1. 创建元组</span></span><br><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">#2. 将列表转换成元组</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])   </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-元祖常用方式\"><a class=\"markdownIt-Anchor\" href=\"#2-元祖常用方式\">#</a> 2、元祖常用方式</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t&#x3D;(1,2,3,1)</span><br><span class=\"line\">print( t.count(1) )   # 2 : 元祖中出现 1 的次数为2次</span><br><span class=\"line\">print( t.index( 3 ) )  # 2 : 元祖中出现三的索引位置为 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-列表和元组常用函数\"><a class=\"markdownIt-Anchor\" href=\"#3-列表和元组常用函数\">#</a> 3、列表和元组常用函数</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>com(x,y)</td>\n<td>比较两个值</td>\n</tr>\n<tr>\n<td>len(seq)</td>\n<td>返回序列的长度</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>把序列转换成列表</td>\n</tr>\n<tr>\n<td>max(args)</td>\n<td>返回序列或者参数集合中得最大值</td>\n</tr>\n<tr>\n<td>min(args)</td>\n<td>返回序列或者参数集合中的最小值</td>\n</tr>\n<tr>\n<td>reversed(seq)</td>\n<td>对序列进行反向迭代</td>\n</tr>\n<tr>\n<td>sorted(seq)</td>\n<td>返回已经排列的包含 seq 所有元素的列表</td>\n</tr>\n<tr>\n<td>tuple(seq)</td>\n<td>把序列转换成元组</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"列表和元祖区别\"><a class=\"markdownIt-Anchor\" href=\"#列表和元祖区别\">#</a> 列表和元祖区别</h4>\n<h5 id=\"1-列表和元祖区别\"><a class=\"markdownIt-Anchor\" href=\"#1-列表和元祖区别\">#</a> 1 列表和元祖区别</h5>\n<ul>\n<li>\n<p><code>可变不可变：</code> 列表可变，元组不可变，除非整体替换</p>\n</li>\n<li>\n<p>存储差异：对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节</p>\n<ul>\n<li>列表为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些</li>\n</ul>\n</li>\n<li>\n<p>元组比列表的访问和处理速度快。</p>\n</li>\n<li>\n<p>列表不能作为字典的键，而元组可以</p>\n</li>\n<li>\n<p>元祖内存长度大小固定，所以无法进行切片</p>\n</li>\n<li>\n<p>放置一样的元素，元祖的内存空间，比列表少 16 个字节</p>\n<h4 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\">#</a> 举例</h4>\n<p>​\t式化字符串，格式化字符串后面的（）本质上就是一个元祖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;%s 年龄是 %d 身高是 %。2f&quot; %(&quot;小明&quot;,18,1.75))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"str记录可描述性事物状态\"><a class=\"markdownIt-Anchor\" href=\"#str记录可描述性事物状态\">#</a> str：记录可描述性事物状态</h2>\n<p>可变不可变：值不可变类型，改变变量值实则是改变了变量的指向</p>\n<p>str (): 功能：1、工厂函数，i = “egon” &lt;==&gt; i = str (“egon”)</p>\n<p>​                  2、强制类型转换， i = str (555) ==&gt;i = “555”</p>\n<p>常用操作：i = “abcdef”</p>\n<p>索引取值：i [1] = “b”</p>\n<p>切片：i [1:5:2] ==&gt; “bd”</p>\n<p>常用方法：strip (指定去除字符) #去除首尾字符，默认为空格</p>\n<p>replace (old，new，num) #用子字符串替换字符串中的某些字符，可指定替换个数</p>\n<p>split (指定分隔字符，num) # 按指定字符分隔字符串，可指定分隔次数，默认从左到右分隔，从右到左分隔可用 rsplit ()</p>\n<p>str.join (iterable) #将可迭代对象元素按用 str 连接成字符串，注意可迭代对象元素必须是字符串类型，否则报错</p>\n<p>endswith (指定字符，start，end) #判断是否以指定字符开头，可指定索引起终止位置</p>\n<p>startswith ()# 判断是否以指定字符结尾，可指定索引起终止位置</p>\n<p>upper () #字符串字母大写</p>\n<p>lower ()# 字符串字母小写</p>\n<p>isdigit () #判断字符串是否由纯数字组成</p>\n<p>find (指定字符，start，end) # 返回字符在字符串中的起始索引  可指定起始位置索引，找不到返回 - 1</p>\n<p>index (指定字符，start，end)# 返回字符在字符串中起始位置索引，可指定起始位置索引，找不到报错</p>\n<p>…</p>\n<p>总结：所有对字符串的操作都是返回了新的值，原字符串不改变</p>\n<h2 id=\"py2和py3的区别\"><a class=\"markdownIt-Anchor\" href=\"#py2和py3的区别\">#</a> py2 和 py3 的区别</h2>\n<h3 id=\"class类\"><a class=\"markdownIt-Anchor\" href=\"#class类\">#</a> class 类</h3>\n<p>​\t\tpython2 的 class 类需要手动继承 object 父类</p>\n<p>​\t\tpython3 的 class 类默认自动继承 object 父类</p>\n<h3 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\">#</a> map 函数</h3>\n<p>​\t\tPython 2 中，map 函数返回 list，</p>\n<p>​\t\tPython 3 中，map 函数返回 iterator。</p>\n<p>Python 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x+<span class=\"number\">1</span>, <span class=\"built_in\">range</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">//输出</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<p>Python 3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x+<span class=\"number\">1</span>, <span class=\"built_in\">range</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">//输出</span><br><span class=\"line\">&lt;<span class=\"built_in\">map</span> <span class=\"built_in\">object</span> at <span class=\"number\">0x7ff5b103d2b0</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不支持has_key\"><a class=\"markdownIt-Anchor\" href=\"#不支持has_key\">#</a> 不支持 has_key</h2>\n<p>Python 3 中的字典不再支持 has_key 方法</p>\n<p>Python 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">30</span>, <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Xiao Wang&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, person.has_key(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, <span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> person</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person has key &quot;age&quot;:  True</span><br><span class=\"line\">person has key &quot;age&quot;:  True</span><br></pre></td></tr></table></figure>\n<p>Python 3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">30</span>, <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Xiao Wang&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, <span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> person)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person has key &quot;age&quot;:  True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, person.has_key(<span class=\"string\">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">AttributeError: &#x27;dict&#x27; object has no attribute &#x27;has_key&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xrange\"><a class=\"markdownIt-Anchor\" href=\"#xrange\">#</a> xrange</h3>\n<p>Python 2 中有 range 和 xrange 两个方法。其区别在于，range 返回一个 list，在被调用的时候即返回整个序列；xrange 返回一个 iterator，在每次循环中生成序列的下一个数字。Python 3 中不再支持 xrange 方法，Python 3 中的 range 方法就相当于 Python 2 中的 xrange 方法。</p>\n<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<p>Python 2 中捕获异常一般用下面的语法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span>/<span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError, e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"built_in\">str</span>(e)</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span>/<span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"built_in\">str</span>(e)</span><br></pre></td></tr></table></figure>\n<p>Python 3 中不再支持前一种语法，必须使用 as 关键字。</p>\n<h2 id=\"dict字典有序\"><a class=\"markdownIt-Anchor\" href=\"#dict字典有序\">#</a> dict 字典有序</h2>\n<p>在 python2 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = <span class=\"built_in\">dict</span>(b=<span class=\"number\">12</span>, a=<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> d.keys()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">[‘a’, ‘b’]</span><br></pre></td></tr></table></figure>\n<p>在 python3 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = <span class=\"built_in\">dict</span>(b=<span class=\"number\">12</span>, a=<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.keys())</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">dict_keys([‘b’, ‘a’])</span><br></pre></td></tr></table></figure>\n<p>python2, python3 的字典 keys 的结果是不一样的。因此，避免使用字典的 keys 的顺序作为有序数组。虽然，如果你一直使用 python2，代码似乎运行正确，但如果移植到 python3，将造成结果错误</p>\n<p>如果必须使用字典，可以使用 collections 模块中的 OrderDict。这能保证在 python2, python3 中一致性。</p>\n<h2 id=\"python的可变类型和不可变类型\"><a class=\"markdownIt-Anchor\" href=\"#python的可变类型和不可变类型\">#</a> python 的可变类型和不可变类型</h2>\n<h3 id=\"在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型\"><a class=\"markdownIt-Anchor\" href=\"#在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型\">#</a> 在 Python 中主要有两种数据类型，一种是可变数据类型，另一种是不可变数据类型</h3>\n<blockquote>\n<p><strong>可变类型</strong>（mutable）：列表，字典（key 是不可变）<br>\n<strong>不可变类型</strong>（unmutable）：数字，字符串，元组</p>\n</blockquote>\n<p>可变不可变，从对象内存地址方向来说，是指内存中的值（value）是否可以被改变。<br>\npython 所声明的变量都以对象的形式存在，存在于机器的固定内存之中。</p>\n<h2 id=\"深拷贝浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝浅拷贝\">#</a> 深拷贝浅拷贝</h2>\n<h3 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h3>\n<p>​\t在 python 中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python 并没有拷贝这个对象，而只是拷贝了这个对象的引用叫做浅拷贝</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095328930-1590606034.png\" alt=\"img\"></p>\n<h4 id=\"浅拷贝的三种情况\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝的三种情况\">#</a> 浅拷贝的三种情况</h4>\n<p>​\t在 Python 中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数</p>\n<p>​\t切片操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">b = a[:]</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"工厂函数\"><a class=\"markdownIt-Anchor\" href=\"#工厂函数\">#</a> 工厂函数</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># (1,2,3,[7,5])</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"copycopy\"><a class=\"markdownIt-Anchor\" href=\"#copycopy\">#</a> copy.copy()</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># (1,2,3,[7,5])</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\">//在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝</span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h3>\n<p>包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095505004-75839266.png\" alt=\"img\"></p>\n<h2 id=\"形参和实参的区别\"><a class=\"markdownIt-Anchor\" href=\"#形参和实参的区别\">#</a> <strong>形参和实参的区别</strong></h2>\n<h3 id=\"形参\"><a class=\"markdownIt-Anchor\" href=\"#形参\">#</a> 形参：</h3>\n<p>​\t\t就是形式上的参数，可以理解为数学的 X，没有实际的值，通过别人赋值后才有意义。相当于变量。</p>\n<h3 id=\"实参\"><a class=\"markdownIt-Anchor\" href=\"#实参\">#</a> 实参：</h3>\n<p>​\t\t就是实际意义上的参数，是一个实际存在的参数，可以是字符串或是数字等。</p>\n<h2 id=\"不定长参数\"><a class=\"markdownIt-Anchor\" href=\"#不定长参数\">#</a> 不定长参数</h2>\n<p>​\t\t在传入额外的参数时可以不用指明参数名，直接传入参数值即可，第二种因为返回的是字典，所以传入时需要指定参数名。</p>\n<p>下面是两个简单的栗子：</p>\n<h3 id=\"args\"><a class=\"markdownIt-Anchor\" href=\"#args\">#</a> *args</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">funA</span>(<span class=\"params\">a, b, *args</span>):</span></span><br><span class=\"line\"><span class=\"number\">2</span>     <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"number\">4</span>     <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\"><span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> funA(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">输出如下：</span><br><span class=\"line\"><span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n<p>这就只输出了 args 这个元祖中的第一个值。</p>\n<p>*<em>‘ *<em>kwargs ’形式：</em></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">funB</span>(<span class=\"params\">a, b, **vardict</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(vardict)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(vardict[<span class=\"string\">&#x27;l&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">funB(<span class=\"number\">1</span>, <span class=\"number\">2</span>, l=<span class=\"number\">3</span>, m=<span class=\"number\">4</span>)</span><br><span class=\"line\">输出结果如下：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;l&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;m&#x27;</span>: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"值传递引用变量\"><a class=\"markdownIt-Anchor\" href=\"#值传递引用变量\">#</a> 值传递引用变量</h2>\n<p>Python 作为一门动态语言，变量本身的类型是不固定的，因此更加灵活。那 Python 到底是值传递还是引用传递呢？</p>\n<h5 id=\"不可变类型传递的是值\"><a class=\"markdownIt-Anchor\" href=\"#不可变类型传递的是值\">#</a> 不可变类型传递的是值</h5>\n<h5 id=\"可变类型传递的是引用地址\"><a class=\"markdownIt-Anchor\" href=\"#可变类型传递的是引用地址\">#</a> 可变类型传递的是引用地址</h5>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/09/13/MongoDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/09/13/MongoDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "title": "MongoDB的基础命令",
            "date_published": "2018-09-13T09:06:37.000Z",
            "content_html": "<h2 id=\"1-什么是mongodb数据库\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是mongodb数据库\">#</a> 1. 什么是 MongoDB 数据库</h2>\n<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。<br>\n它支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。<br>\nMongo 最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，<br>\n几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>\n<h2 id=\"2-mongodb基础命令\"><a class=\"markdownIt-Anchor\" href=\"#2-mongodb基础命令\">#</a> 2. MongoDB 基础命令</h2>\n<h3 id=\"1-显示当前所有数据库\"><a class=\"markdownIt-Anchor\" href=\"#1-显示当前所有数据库\">#</a> 1 显示当前所有数据库</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs 或 show databases</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#2-创建数据库\">#</a> 2 创建数据库</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use 数据库名</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查看当前所处数据库\"><a class=\"markdownIt-Anchor\" href=\"#3-查看当前所处数据库\">#</a> 3 查看当前所处数据库</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-显示数据库中所有集合\"><a class=\"markdownIt-Anchor\" href=\"#4-显示数据库中所有集合\">#</a> 4 显示数据库中所有集合</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-插入数据\"><a class=\"markdownIt-Anchor\" href=\"#5-插入数据\">#</a> 5. 插入数据</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.insert(&#123;‘name’:’123’&#125;)</span><br><span class=\"line\">db.表名.insert(&#123;‘name’:’123’&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-查看所有数据\"><a class=\"markdownIt-Anchor\" href=\"#6-查看所有数据\">#</a> 6. 查看所有数据</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.表名.find()</span><br><span class=\"line\">db.表名.find().preety() # 树状型展示</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-读取指定数据\"><a class=\"markdownIt-Anchor\" href=\"#7-读取指定数据\">#</a> 7. 读取指定数据</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.表名.find_one(&#123;条件&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-查看数据库名\"><a class=\"markdownIt-Anchor\" href=\"#8-查看数据库名\">#</a> 8、查看数据库名</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getName()</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-删除集合\"><a class=\"markdownIt-Anchor\" href=\"#9-删除集合\">#</a> 9. 删除集合</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合.drop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"10删除指定数据\"><a class=\"markdownIt-Anchor\" href=\"#10删除指定数据\">#</a> 10. 删除指定数据</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合.update(&#123;&#39;name&#39;:&#39;张三&#39;&#125;,&#123;$unset:&#123;&#39;name&#39;:&#39;张三&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-python连接mongodb数据库\"><a class=\"markdownIt-Anchor\" href=\"#3-python连接mongodb数据库\">#</a> 3. python 连接 MongoDB 数据库</h2>\n<h3 id=\"1-下载mongodb包\"><a class=\"markdownIt-Anchor\" href=\"#1-下载mongodb包\">#</a> 1. 下载 mongodb 包</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pymongo</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-导包\"><a class=\"markdownIt-Anchor\" href=\"#2-导包\">#</a> 2. 导包</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br><span class=\"line\">client &#x3D; MongoClient(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;27017)  # 连接本地mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-进入指定数据库\"><a class=\"markdownIt-Anchor\" href=\"#3-进入指定数据库\">#</a> 3. 进入指定数据库</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &#x3D; client.数据库名  # 进入到数据库(没有则自动创建)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-进入指定集合\"><a class=\"markdownIt-Anchor\" href=\"#4-进入指定集合\">#</a> 4. 进入指定集合</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_set &#x3D; db集合名  # 进入集合(没有则自动创建)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-使用命令即可\"><a class=\"markdownIt-Anchor\" href=\"#5-使用命令即可\">#</a> 5. 使用命令即可</h3>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/",
            "title": "python中with上下文管理",
            "date_published": "2018-07-13T07:21:41.000Z",
            "content_html": "<h2 id=\"上下文管理\"><a class=\"markdownIt-Anchor\" href=\"#上下文管理\">#</a> 上下文管理</h2>\n<h4 id=\"with语句是什么\"><a class=\"markdownIt-Anchor\" href=\"#with语句是什么\">#</a> with 语句是什么</h4>\n<ul>\n<li>with 是一种上下文管理协议，目的在于从流程图中把 try,except 和 finally 关键字和资源分配释放相关代码统统去掉，简化 try….except….finlally 的处理流程</li>\n<li>所以使用 with 处理的对象必须有 enter () 和 exit () 这两个方法\n<ul>\n<li>with 通过 enter 方法初始化（enter 方法在语句体执行之前进入运行）</li>\n<li>然后在 exit 中做善后以及处理异常（exit () 方法在语句体执行完毕退出后运行）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"with语句使用场景\"><a class=\"markdownIt-Anchor\" href=\"#with语句使用场景\">#</a> with 语句使用场景</h4>\n<ul>\n<li>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的 “清理” 操作，释放资源</li>\n<li>比如文件使用后自动关闭、线程中锁的自动获取和释放等</li>\n</ul>\n<h4 id=\"with处理文件操作的实例\"><a class=\"markdownIt-Anchor\" href=\"#with处理文件操作的实例\">#</a> with 处理文件操作的实例</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">with open(&#39;&#x2F;etc&#x2F;passwd&#39;) as f:</span><br><span class=\"line\">  for line in f:</span><br><span class=\"line\">    print(line)</span><br><span class=\"line\"></span><br><span class=\"line\"># 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；</span><br><span class=\"line\"># 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。</span><br><span class=\"line\">PYTHON</span><br><span class=\"line\">with open(&#39;a2.py&#39;,encoding&#x3D;&#39;utf8&#39;) as f:</span><br><span class=\"line\">    print( f.readlines())</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    f &#x3D; open(&#39;a.py&#39;,encoding&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">    f.read()</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(print(e))</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/",
            "title": "python基础1（内存管理）",
            "date_published": "2018-05-26T12:33:17.000Z",
            "content_html": "<h1 id=\"1-python基础\"><a class=\"markdownIt-Anchor\" href=\"#1-python基础\">#</a> 1、Python 基础</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存管理&gt;引用计数&gt;垃圾回收&gt;分代回收&gt;对象存储&gt;对象缓存&gt;多次赋值（num&#x3D;1,num&#x3D;2)&gt;内存地址&gt;print(id(num1),id(num2))&gt;内存占用&gt;sys.getsizeof(num1)</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#1-内存管理\">#</a> 1、内存管理</h1>\n<h3 id=\"1-引用计数\"><a class=\"markdownIt-Anchor\" href=\"#1-引用计数\">#</a> 1、引用计数</h3>\n<p>​\t\tpython 是通过引用计数来保存内存的变量追踪，记录这个对象以及其他使用对象的引用次数 python 内部有一个名叫‘引用计数器’，变量被引用时就会增加一次引用计数。</p>\n<h3 id=\"2-垃圾回收\"><a class=\"markdownIt-Anchor\" href=\"#2-垃圾回收\">#</a> 2、垃圾回收</h3>\n<p>​\t\t概念：</p>\n<p>​\t\t\t当 Python 中的对象越来越多时，占据的空间越来越大，启动垃圾回收（garbage colletion）把没用的对象清除。</p>\n<p>​\t\t原理：</p>\n<p>​\t\t\t当 Python 的某一个对象引用计数变为 0 时，说明没有任何引用指向对象，比如 x = a, 那么 x 的引用计数就变成了 1，当 x 被删除时，a 的引用计数也就变成了 0，那么 a 就会被回收。</p>\n<h3 id=\"3-分代回收\"><a class=\"markdownIt-Anchor\" href=\"#3-分代回收\">#</a> 3、分代回收</h3>\n<p>​\t\tPython 将所有的对象分为 0 ， 1 ， 2 三代；</p>\n<p>​\t\t所有新创建的对象都是 0 代对象，</p>\n<p>​\t\t当 0 代对象经过垃圾回收，依然存在时，就会被归为下一代对象。</p>\n<p>​</p>\n<h3 id=\"4-对象存储\"><a class=\"markdownIt-Anchor\" href=\"#4-对象存储\">#</a> 4、对象存储</h3>\n<p>​\t\tPython 中所有的变量和函数在存储时都会被当成一个对象</p>\n<p>​\t\t当对象运行时，对象存储在内存里，随时可以调用</p>\n<h3 id=\"5-多次赋值\"><a class=\"markdownIt-Anchor\" href=\"#5-多次赋值\">#</a> 5、多次赋值</h3>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1,num2 &#x3D; 1,1</span><br><span class=\"line\"></span><br><span class=\"line\">print(id(num1),id(num2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;输出</span><br><span class=\"line\">140737224735808 140737224735808</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-内存地址sysgetsizeof\"><a class=\"markdownIt-Anchor\" href=\"#6-内存地址sysgetsizeof\">#</a> 6、内存地址 sys.getsizeof ()</h3>\n<p>​\t\t查看某个变量的引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\">print(sys.getsizeof(a))</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-内存占用getrefcount\"><a class=\"markdownIt-Anchor\" href=\"#7-内存占用getrefcount\">#</a> 7、内存占用 getrefcount ()</h3>\n<p>查看某个变量出现的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\">print(sys.getrefcount(a))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "title": "gitee的基础命令",
            "date_published": "2018-04-13T08:28:32.000Z",
            "content_html": "<p>git 的基础命令，当你上传仓库时会有一个本地仓库，你需要将你的代码先上传到本地仓库，之后再上传到云端</p>\n<p>这个本地仓库是必须要有的，你可以在云端 https://gitee.com/ 创建一个仓库然后克隆或者根据这个来一步步来</p>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210413163208235.png\" alt=\"image-20210413163208235\"></p>\n<h3 id=\"git的基础命令\"><a class=\"markdownIt-Anchor\" href=\"#git的基础命令\">#</a> git 的基础命令：</h3>\n<p>​\t\tgit log 查看 git 合入的记录</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/883f86986e5d3b8d941f67af3a89d8d0-0.png\" alt=\"img\"></p>\n<p>git add . 将本地代码全部提交</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/689edba3a19b0cd11c633afc566937e0-3.png\" alt=\"img\"></p>\n<p>git commit -m “合入新的 PUCCH 和小区功率代码” 为本次提交添加注释</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png\" alt=\"img\"></p>\n<p>git push origin master 将提交的代码推送到主分支</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png\" alt=\"img\"></p>\n<p>输入 git branch -a 命令查看 git 库里的所有分支，可以看到，该命令将所有分支都列出来了</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-9.png\" alt=\"img\"></p>\n<p>输入 git checkout -t 分支名称，可以切换到该分支</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-10.png\" alt=\"img\"></p>\n<h5 id=\"注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码\"><a class=\"markdownIt-Anchor\" href=\"#注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码\">#</a> 注意：切换分支后一定记得要 git pull 一下，确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码</h5>\n<p>输入 git merge 要合并的分支 将分支合并</p>\n<h5 id=\"注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master\"><a class=\"markdownIt-Anchor\" href=\"#注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master\">#</a> 注意：比如你在 dev 分支写入的代码，你需要合并到 master 主分支里，你就需要切换到 master 分支，输入 git merge dev 就可以合并 dev 分支了，合并之后一定要记得上传三步，git add .   git commit -m ‘注释’   git push origin master</h5>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2017/04/15/hello-world/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2017/04/15/hello-world/",
            "title": "Hello World",
            "date_published": "2017-04-15T13:19:03.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Python"
            ]
        }
    ]
}