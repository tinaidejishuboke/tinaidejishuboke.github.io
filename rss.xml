<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>路宇航的博客</title>
        <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Thu, 06 May 2021 09:03:52 +0800</pubDate>
        <lastBuildDate>Thu, 06 May 2021 09:03:52 +0800</lastBuildDate>
        <category>数据库</category>
        <category>Ant Design</category>
        <category>Python</category>
        <category>Celery</category>
        <category>Docker</category>
        <category>Git</category>
        <category>Redis</category>
        <category>Vue</category>
        <category>python</category>
        <category>三方支付</category>
        <category>算法</category>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%805%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%89/</guid>
            <title>python基础5（算法）</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%805%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%89/</link>
            <category>Python</category>
            <pubDate>Thu, 06 May 2021 09:03:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;算法&lt;/p&gt;
&lt;p&gt;冒泡排序&lt;br&gt;
重复走访要排序的数列，每次比较两个元素，&lt;br&gt;
如果顺序错误那么就将他们交换，没有需要&lt;br&gt;
交换的元素时，就说明数列排序完成了&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/</guid>
            <title>python基础4（语法糖）</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/</link>
            <category>Python</category>
            <pubDate>Thu, 06 May 2021 08:16:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;python语法糖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python语法糖&#34;&gt;#&lt;/a&gt; python 语法糖&lt;/h1&gt;
&lt;h4 id=&#34;语法糖说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法糖说明&#34;&gt;#&lt;/a&gt; 语法糖说明&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;计算机语言中特殊的某种语法
这种语法对语言的功能并没有影响
对于程序员有更好的易用性
能够增加程序的可读性
通过这类方式编写出来的代码，即好看又好用,好似糖一般的语法
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;一个简单的例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个简单的例子&#34;&gt;#&lt;/a&gt; 一个简单的例子&lt;/h5&gt;
&lt;p&gt;假设：有 2 个数字，现需要从中得到最大的那个数字。应该如何实现？&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;b = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; b &amp;gt; c:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实还有更多的其它实现方式：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = c &amp;gt; b &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; c &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = c &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; c &amp;gt; b &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = [b, c][c &amp;gt; b]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些都是可以实现我们需求的方法，殊途同归。但是它们在易用性、简洁性、可读性、性能等方面的表现都不一样。那么问题来了！&lt;/p&gt;
&lt;p&gt;哪个才是我们所说的语法糖呢？&lt;/p&gt;
&lt;p&gt;一些常见的语法糖&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; b = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; c = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b, c = c, b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; c &amp;lt; b &amp;lt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] + [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到这些语法，在其它语言里通常不会出现的。但是在 Python 中却神奇的被支持了，所以这些都是当之无愧的 Python 语法糖。&lt;/p&gt;
&lt;p&gt;切片操作&lt;br&gt;
像列表这类可以支持&lt;strong&gt;切片&lt;/strong&gt;操作的对象，则是我最初喜欢 Python 的一个非常重要的原因。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[::&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[9, 8, 7, 6, 5, 4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 3, 5, 7, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;with 语法糖&lt;br&gt;
 with 语法糖实现的是一个上下文管理器，它主要的特点就是帮助我们自动管理上下文的衔接。即在需要的时候传给我们，不需要的时候自动关闭上下文对象。 需要注意的是：使用 with 语法糖是有条件的。即其后跟的对象必须要实现__enter__和__exit__这 2 个魔法属性。具体使用的例子如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;example_2.txt&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(line, end=&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;else 语法糖&lt;br&gt;
 Python 中提供一类 else 的语法，它可以在原有语法基础之上，支持更多一种情况的选择。 主要有 for-else，while-else，try-else。需要注意的是，for-else 和 while-else 需要和 break 语句配合时使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;for end&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; i:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;while end&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; Exception &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;except occured&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;it is fine&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;i am finally&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数相关语法糖&lt;br&gt;
 Python 中函数我们都非常的熟悉，而在函数的使用上却有着与其它语言不同的选择。&lt;/p&gt;
&lt;p&gt;动态参数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_dynamic_args&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;*args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;动态参数&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(kwargs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数的参数与函数相比，其参数会有些不同之处。因为它们在接收参数时使用了不同方式。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;example_dynamic_args(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;xiaowu&amp;#x27;&lt;/span&gt;, age=&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;xiaoming&amp;#x27;&lt;/span&gt;, age: &lt;span class=&#34;string&#34;&gt;&amp;#x27;16&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;example_dynamic_args(*l, **d)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;匿名函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#匿名函数&#34;&gt;#&lt;/a&gt; 匿名函数&lt;/h3&gt;
&lt;p&gt;​		匿名函数在很多的语言中都存在，通常在临时需要一个函数的场景下使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​		Python 中使用 lambda 表达式来实现匿名函数，观察上面的 lambda 表达式。&lt;/p&gt;
&lt;h5 id=&#34;其特点如下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其特点如下&#34;&gt;#&lt;/a&gt; 其特点如下：&lt;/h5&gt;
&lt;p&gt;​	可以接受函数&lt;/p&gt;
&lt;p&gt;​	函数体只有一个表达式&lt;/p&gt;
&lt;p&gt;​	无需显式的 return 语句&lt;/p&gt;
&lt;p&gt;​	整个表达式在一个语法行内实现&lt;/p&gt;
&lt;p&gt;​	lambda 表达式除了一些语法上的限制之外；其它函数该有的特性它都有。比如：支持动态参数。下面是一个使用 lambda 表示的场景：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_dict = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;in_dict:&amp;#x27;&lt;/span&gt;, in_dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out_dict = &lt;span class=&#34;built_in&#34;&gt;sorted&lt;/span&gt;(in_dict.items(), key=&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;out_dict&amp;#x27;&lt;/span&gt;, out_dict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;推导表达式&lt;br&gt;
推导表达式是 Python 中常见的语法糖，在很多的数据处理场景中，我们可能会使用的到。 最常见的就是列表推导表达式，可以用来过滤、处理列表中的子项并输出一个新的列表。除此之外还有几个推导式也是非常好用的。&lt;/p&gt;
&lt;p&gt;列表推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = [i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;comment&#34;&gt;# 列表推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成器推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = (i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# 生成器推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;集合推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = &amp;#123;i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;# 集合推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;print(‘array after:’, array)&lt;br&gt;
 字典推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = &amp;#123;i: i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;# 字典推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同推导式在语法使用上基本一致，只是在返回对象的类型上有所差别。&lt;/p&gt;
&lt;p&gt;yield 表达式&lt;br&gt;
 yield 语法也是 Python 中比较有特点的语法糖，可以说是特有的。虽然其它语言有实现类似机制的功能。 yield 是 Python 中实现 ** 协程 (coroutine)** 的一个重要基础。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_generator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;in_list&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;生成器&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;装饰器&lt;br&gt;
重要的往往在最后面，装饰器是学习 Python 绕不过去的坎。就像学习 Java 要理解面向对象和设计模式一样。 学习 Python，你就应该要掌握好闭包、生成器、装饰器等相关知识。而对于编写高并发程序时则要掌握协程相关知识。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_decorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;func&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;装饰器&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inner&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
            <title>python设计模式之观察者模式</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
            <category>Python</category>
            <pubDate>Wed, 28 Apr 2021 16:04:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;观察者模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#观察者模式&#34;&gt;#&lt;/a&gt; 观察者模式&lt;/h1&gt;
&lt;p&gt;观察者模式也叫发布订阅模式，** 定义了对象之间一对多依赖，当一个对象改变状态时，这个对象的所有依赖者都会收到通知并按照自己的方式进行更新。** 举个现实生活的例子，&lt;strong&gt;职员们趁老板不在，都在玩着自己的东西，同时观察着前台小姐姐，前台小姐姐在老板回来的时候，发布通知让各同事回到工作状态。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;话不多说上代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#话不多说上代码&#34;&gt;#&lt;/a&gt; 话不多说，上代码&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 看股票的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;StockClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;close_stock_software&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 关闭了股票软件，并开始办公&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 睡着的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SleepingClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;open_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 打开了word，并开始办公&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 玩游戏的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Play_gamesClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;open_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 打开了ppt，并开始做作业&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Receptionist&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    actions = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @classmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;attach&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cls, action&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cls.actions.append(action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @classmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;notify&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cls&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;老板回来了，各同事行动...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; actioin &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; cls.actions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            actioin()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实例化职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c1 = StockClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;张丁介&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c2 = SleepingClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;刘万兴&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c3 = Play_gamesClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;张思彤&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 告诉前台小姐姐如何通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c1.close_stock_software)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c2.open_word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c3.open_word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 前台小姐姐发布通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.notify()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#老板回来了，各同事行动...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张丁介 关闭了股票软件，并开始办公&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#刘万兴 打开了word，并开始办公&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张思彤 打开了ppt，并开始做作业&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;四观察者模式的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四观察者模式的优缺点&#34;&gt;#&lt;/a&gt; 四。观察者模式的优缺点&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它使彼此交互的对象保持松耦合&lt;/li&gt;
&lt;li&gt;当需要添加其他对象时，无需对主题和观察者做任何修改&lt;/li&gt;
&lt;li&gt;可以随时添加和删除观察者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现不当可能会增加复杂性，导致性能降低&lt;/li&gt;
&lt;li&gt;通知有时是不可靠的，并导致竞争条件或不一致性&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/26/python%E5%9F%BA%E7%A1%803%EF%BC%88%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/</guid>
            <title>python基础3（多任务）</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/26/python%E5%9F%BA%E7%A1%803%EF%BC%88%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/</link>
            <pubDate>Mon, 26 Apr 2021 20:40:43 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/</guid>
            <title>日活人数和高并发</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
            <category>python</category>
            <pubDate>Thu, 22 Apr 2021 20:45:14 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;日活人数和高并发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日活人数和高并发&#34;&gt;#&lt;/a&gt; 日活人数和高并发&lt;/h1&gt;
&lt;h1 id=&#34;redis主从复制与优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis主从复制与优化&#34;&gt;#&lt;/a&gt; Redis 主从复制与优化&lt;/h1&gt;
&lt;h2 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h2&gt;
&lt;p&gt;我们关注主从复制之前，首先要考虑单机有什么问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器故障&lt;/li&gt;
&lt;li&gt;容量瓶颈&lt;/li&gt;
&lt;li&gt;QPS 瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是单节点所遇到的问题，所以这个时候出现了主从复制（一主一从，一主多从）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2020101321485247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用主从复制可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据副本&lt;/li&gt;
&lt;li&gt;扩展读性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 master 可以有多个 slave&lt;/li&gt;
&lt;li&gt;一个 slave 只有一个 master&lt;/li&gt;
&lt;li&gt;数据流向是单向的，master 到 slave&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;主从复制的配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制的配置&#34;&gt;#&lt;/a&gt; 主从复制的配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;两种实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slaveof 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两台机器：主节点：47.11.11.11 从节点 47.22.22.22&lt;/p&gt;
&lt;p&gt;在从节点执行 slaveof 命令&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;47.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt; &amp;gt; slacefof &lt;span class=&#34;number&#34;&gt;47.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.11&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;取消复制：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;47.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt; &amp;gt; slacefof no one&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;修改配置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;slaveof ip  port    &lt;span class=&#34;comment&#34;&gt;//从节点ip + 端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;slave-read-only yes &lt;span class=&#34;comment&#34;&gt;//开启只做读的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;两种方式比较&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201013220336165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看主从&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt;&amp;gt; info replication&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Replication&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role:master   &lt;span class=&#34;comment&#34;&gt;//主节点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;connected_slaves:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_replid:1d43401335a5343b27b1638fc9843e3a593fc1a7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_replid2:&lt;span class=&#34;number&#34;&gt;0000000000000000000000000000000000000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_repl_offset:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;second_repl_offset:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_active:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_size:&lt;span class=&#34;number&#34;&gt;1048576&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_first_byte_offset:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_histlen:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;知识点 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主节点 runID：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 redis 节点启动后都会动态分配一个 40 位的十六进制字符串为运行 ID。运行 ID 的主要作用是来唯一识别 redis 节点，比如从节点保存主节点的运行 ID 识别自已正在复制是哪个主节点。如果只使用 ip+port 的方式识别主节点，那么主节点重启变更了整体数据集（如替换 RDB/AOF 文件），从节点再基于偏移量复制数据将是不安全的，因此当运行 ID 变化后从节点将做全量复制。可以在 info server 命令查看当前节点的运行 ID。&lt;/p&gt;
&lt;p&gt;需要注意的是 redis 关闭再启动，运行的 id 会随之变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;全量复制和部分复制等&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全量复制和部分复制等&#34;&gt;#&lt;/a&gt; 全量复制和部分复制等&lt;/h2&gt;
&lt;h3 id=&#34;全量复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全量复制&#34;&gt;#&lt;/a&gt; 全量复制&lt;/h3&gt;
&lt;p&gt;用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。&lt;/p&gt;
&lt;p&gt;redis2.8+ 全量复制流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2020101322385755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;开销：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bgsave 时间&lt;/li&gt;
&lt;li&gt;RDB 文件网络传输&lt;/li&gt;
&lt;li&gt;从节点清空数据时间&lt;/li&gt;
&lt;li&gt;从节点加载 RDB 时间&lt;/li&gt;
&lt;li&gt;可能的 AOF 重写时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;部分复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#部分复制&#34;&gt;#&lt;/a&gt; 部分复制&lt;/h3&gt;
&lt;p&gt;用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。&lt;/p&gt;
&lt;p&gt;流程： &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201013224506931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复制偏移量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制偏移量&#34;&gt;#&lt;/a&gt; 复制偏移量：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在 info replication 中的 master_repl_offset 指标中。&lt;/li&gt;
&lt;li&gt;从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量 slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0&lt;/li&gt;
&lt;li&gt;从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在 info replication 中的 slave_repl_offset 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制积压缓冲区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制积压缓冲区&#34;&gt;#&lt;/a&gt; 复制积压缓冲区：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为 1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。 在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量 (offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生产中常见问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产中常见问题&#34;&gt;#&lt;/a&gt; 生产中常见问题&lt;/h2&gt;
&lt;h5 id=&#34;读写分离&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写分离&#34;&gt;#&lt;/a&gt; 读写分离&lt;/h5&gt;
&lt;p&gt;分流到从节点。主节点写数据，从节点读数据，可能遇到读问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制数据延迟&lt;/li&gt;
&lt;li&gt;读到过期数据&lt;/li&gt;
&lt;li&gt;从节点故障&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;主从配置不一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从配置不一致&#34;&gt;#&lt;/a&gt; 主从配置不一致&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;例如 maxmemory 不一致 会导致 丢失数据&lt;/li&gt;
&lt;li&gt;例如数据结构优化参数（例如 hash-max-ziplist-entries）: 内存不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;规避全量复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规避全量复制&#34;&gt;#&lt;/a&gt; 规避全量复制&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;第一次全量复制的时候  - 第一次不可避免，尽量小节点 ，低峰处理&lt;/li&gt;
&lt;li&gt;节点 运行 ID 不匹配  - 故障转移，例如哨兵或者集群&lt;/li&gt;
&lt;li&gt;复制积压缓存区不足  - 增大复制缓存区配置 rel_backlog_size , 网络增强&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;规避复制风暴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规避复制风暴&#34;&gt;#&lt;/a&gt; 规避复制风暴&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;单机器复制风暴（redis&amp;lt;4.0 当 master 宕机重启，会导致该机器下所有 slave 同时产生复制。避免单机部署一套 redis 主从）====》主节点分散多台机&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;最后的注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后的注意事项&#34;&gt;#&lt;/a&gt; 最后的注意事项：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在上述的过程的实现是从库不开启 AOF 持久化情况下，如果从库开启的 AOF 持久化，重启时候依然使用全量复制。&lt;/li&gt;
&lt;li&gt;之前从 master 复制过来的数据并不会丢失，只是不再同步之前 master（如上图的 6379 节点）后续写入的数据&lt;/li&gt;
&lt;li&gt;slaveof 可以用来改变其所属的 master 节点，即重新成为另一台 master 的 slave，但是新的 master 首先就会把从节点的数据全部清除掉&lt;/li&gt;
&lt;li&gt;关于读写分离延时：读写分离 ，master 会一步将数据复制到 slave，如果 slave 发生阻塞，则会延迟 master 数据的写命令，造成数据不一致的问题。------- 一般不考虑这个问题&lt;/li&gt;
&lt;li&gt;读到过期数据：redis 在删除 key 时有两种策略，一种是懒惰型策略，即只有当 redis 操作这个 key 时才会将 key 删除，第二种是定期采样 key 删除 -------- 当 key 数据非常多时，采样速度比不上 key 生成速度会造成很多过期数据没有删除，因为 redis 一般都是在 master 节点（增加删除数据），slave 查询到过期数据也不能删除。会导致 slave 读到过期数据（在 redis3.2 中已经解决）&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/13/python%E7%9A%84pymongo%E5%B0%81%E8%A3%85%E7%B1%BB/</guid>
            <title>python的pymongo封装类</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/13/python%E7%9A%84pymongo%E5%B0%81%E8%A3%85%E7%B1%BB/</link>
            <category>数据库</category>
            <pubDate>Tue, 13 Apr 2021 17:08:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-创建一个mypymongopy文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建一个mypymongopy文件&#34;&gt;#&lt;/a&gt; 1. 创建一个 MyPyMongo.py 文件&lt;/h2&gt;
&lt;h2 id=&#34;2-导包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-导包&#34;&gt;#&lt;/a&gt; 2. 导包&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from pymongo import MongoClient&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-创建类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-创建类&#34;&gt;#&lt;/a&gt; 3. 创建类&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class MyMongo:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, database, collection, **mongo_kwargs):  # database 数据库名  collection 集合名(表) **mongo_kwargs 端口号 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.data &amp;#x3D; MongoClient(**mongo_kwargs)  # 连接MongoDB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.db &amp;#x3D; self.data[database]  # 进入数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.collection &amp;#x3D; self.db[collection]  # 进入集合(表)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def find_one(self, key: dict) -&amp;gt; dict:  # 按条件指定查询&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return self.collection.find_one(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def find(self) -&amp;gt; object:  # 查询集合所有数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return self.db.find()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def insert(self, info: dict) -&amp;gt; None:  # 插入数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.db.insert(info)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;4-调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-调用&#34;&gt;#&lt;/a&gt; 4. 调用&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;m &amp;#x3D; MyMongo(&amp;#39;conn&amp;#39;, &amp;#39;cate_test_set&amp;#39;, **&amp;#123;&amp;#39;host&amp;#39;: &amp;#39;127.0.0.1&amp;#39;, &amp;#39;port&amp;#39;: 27017&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(m.find_one(&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;Asia&amp;#39;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;m.find()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;m.insert(&amp;#123;&amp;#39;name1&amp;#39;:&amp;#39;li&amp;#39;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
            <title>Tree的概念</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
            <category>Python</category>
            <pubDate>Wed, 31 Mar 2021 21:26:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二叉树的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树的概念&#34;&gt;#&lt;/a&gt; 二叉树的概念&lt;/h1&gt;
&lt;h4 id=&#34;概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点&#34;&gt;#&lt;/a&gt; 概念：二叉树是树形结构的一个重要类型，二叉树特点是每个结点最多只能有两棵子树，且有左右之分，就是递归调用自己，定一个根节点，二叉树递归的最后一层，就被称为叶节点。&lt;/h4&gt;
&lt;h2 id=&#34;2-二叉树先序遍历就是先访问自己然后左子树然后右子树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-二叉树先序遍历就是先访问自己然后左子树然后右子树&#34;&gt;#&lt;/a&gt; 2、二叉树先序遍历就是先访问自己，然后左子树，然后右子树。&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215615026.png&#34; alt=&#34;image-20210331215615026&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;0137849256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#0137849256&#34;&gt;#&lt;/a&gt; 0,1,3,7,8,4,9,2,5,6&lt;/h4&gt;
&lt;h2 id=&#34;3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树&#34;&gt;#&lt;/a&gt; 3、二叉树的中序遍历是先访问左子树，然后访问自己，最后右子树。&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215700942.png&#34; alt=&#34;image-20210331215700942&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;7381940526&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7381940526&#34;&gt;#&lt;/a&gt; 7,3,8,1,9,4,0,5,2,6&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215811657.png&#34; alt=&#34;image-20210331215811657&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
            <title>vue拦截器的概念</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
            <category>Vue</category>
            <pubDate>Thu, 13 Aug 2020 15:18:19 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-拦截器的基本介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-拦截器的基本介绍&#34;&gt;#&lt;/a&gt; 一、拦截器的基本介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是拦截器:
&lt;ul&gt;
&lt;li&gt;想拦截住我们的请求过程&lt;br&gt;
比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求&lt;br&gt;
或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拦截器的作用:
&lt;ul&gt;
&lt;li&gt;一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token 验证，验证用户&lt;br&gt;
是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-拦截器的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-拦截器的分类&#34;&gt;#&lt;/a&gt; 二、拦截器的分类&lt;/h2&gt;
&lt;p&gt;请求拦截器和响应拦截器 / 路由拦截器&lt;br&gt;
 &lt;code&gt;PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理&lt;/code&gt; &lt;br&gt;
① axios 提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加 token 头信息。&lt;br&gt;
② axios 提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理 401 身份认证错误。&lt;/p&gt;
&lt;h2 id=&#34;三-代码演示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-代码演示&#34;&gt;#&lt;/a&gt; 三、代码演示&lt;/h2&gt;
&lt;h4 id=&#34;路由拦截器-通过路由进行判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路由拦截器-通过路由进行判断&#34;&gt;#&lt;/a&gt; 路由拦截器：通过路由进行判断&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 配置全局的vue路由拦截器  导航守卫(路由守卫)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(to)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F; 判断 是否是跳转到 admin页 如果是则必须登录才能跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (to.path in [&amp;quot;&amp;#x2F;路由地址&amp;quot;,&amp;quot;&amp;#x2F;...&amp;quot;,&amp;quot;&amp;#x2F;...&amp;quot;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F;判断 是否登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const token &amp;#x3D; sessionStorage.getItem(&amp;quot;token&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (!token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            alert(&amp;quot;没有登录，不能操作&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#x2F;&amp;#x2F;跳转到登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next(&amp;quot;&amp;#x2F;login?back&amp;#x3D;&amp;quot; + to.fullPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;request请求拦截器-在请求发送前进行一些操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#request请求拦截器-在请求发送前进行一些操作&#34;&gt;#&lt;/a&gt; request 请求拦截器：在请求发送前进行一些操作&lt;/h4&gt;
&lt;p&gt;在 main.js 中&lt;br&gt;
 import axios from ‘axios’ // 引入 axios&lt;br&gt;
Vue.prototype.$http = axios // 配置&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 添加请求拦截器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.interceptors.request.use(config &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  let token &amp;#x3D; localStorage.getItem(&amp;#39;token&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     config.headers.token &amp;#x3D; token &amp;#x2F;&amp;#x2F;把token放在请求头中（headers是对象类型）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#x2F;&amp;#x2F; 如果后端使用了rest framework jwt，如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#x2F;&amp;#x2F;config.headers.common[&amp;#39;Authorization&amp;#39;] &amp;#x3D; &amp;#39;jwt &amp;#39; + token &amp;#x2F;&amp;#x2F; 头部设置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return config;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(error) &amp;#x2F;&amp;#x2F;打印错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;response响应拦截器-在接收到响应后进行一些操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#response响应拦截器-在接收到响应后进行一些操作&#34;&gt;#&lt;/a&gt; response 响应拦截器：在接收到响应后进行一些操作&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 响应拦截器（在响应时自动会做的操作）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.interceptors.response.use(response &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　return response &amp;#x2F;&amp;#x2F; 成功直接返回&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(error.request) &amp;#x2F;&amp;#x2F; 打印错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;处理错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (error.request.status &amp;#x3D;&amp;#x3D;&amp;#x3D; 400)&amp;#123;  &amp;#x2F;&amp;#x2F; 400错误的状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    window.location.href &amp;#x3D; &amp;quot;&amp;#x2F;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return error &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;返回错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/05/26/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E3%80%90snowflake%E3%80%91/</guid>
            <title>雪花算法【snowflake】</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/05/26/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E3%80%90snowflake%E3%80%91/</link>
            <category>算法</category>
            <pubDate>Tue, 26 May 2020 13:54:43 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;雪花算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#雪花算法&#34;&gt;#&lt;/a&gt; 雪花算法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200921211050182.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt; 为什么需要分布式全局唯一 ID 以及分布式 ID 的业务需求？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在复杂分布式系统中，往往需要对大量对数据和消息进行标识&lt;/li&gt;
&lt;li&gt;如在美团、支付、餐饮 中 系统的数据日渐增长，对数据分库分表需要有一个唯一来标识一条数据或消息&lt;/li&gt;
&lt;li&gt;此时一个能够生成全局唯一 ID 的系统是非常有必要的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;id生成规则部分硬性要求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#id生成规则部分硬性要求&#34;&gt;#&lt;/a&gt; ID 生成规则部分硬性要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全局唯一 ：不能出现重复的 ID，要 唯一标识&lt;/li&gt;
&lt;li&gt;趋势递增 ：在 Mysql 的 InnoDB 引擎使用的是聚集索引，由于多数 RDBMS 使用的是 Btree 数据结构来存储数据，在主键的选择上面我们应该尽量使用有序的主键保证数据写入&lt;/li&gt;
&lt;li&gt;单调递增 ：保证下一个 ID 一定大于上一个 ID，例如事物版本号，增量消息&lt;/li&gt;
&lt;li&gt;信息安全 ：如果 ID 是连续的，恶意用户的扒取数据就非常容易来，直接按照顺序下载指定的 URL，如果是订单号就更危险来，竞争对手可以知道我们一天的单量，所以在一些应用场景下，需要 ID 不规则&lt;/li&gt;
&lt;li&gt;含时间戳 ：这样就能够在开发中快速了解这个分布式 id 的生成时间&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;id生成系统的可用性要求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#id生成系统的可用性要求&#34;&gt;#&lt;/a&gt; ID 生成系统的可用性要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;高可用 ：发一个获取分布式 ID 的请求，服务器就要保证 99.99% 的情况下给我创建一个唯一分布式 ID&lt;/li&gt;
&lt;li&gt;低延迟 ：发一个获取分布式 ID 的请求，服务器就是要快，极速&lt;/li&gt;
&lt;li&gt;高 QPS ：假如并发一口气 10 万个创建分布式 ID 请求同时杀过来，服务器要顶的住一下子成功创建 10w 个分布式 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;我们平时的方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我们平时的方案&#34;&gt;#&lt;/a&gt; 我们平时的方案&lt;/h4&gt;
&lt;p&gt;UUID 、 数据库自增主键 、基于 Redis 生成全局 ID 策略&lt;/p&gt;
&lt;p&gt;弊端&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UUID 不能生成顺序，递增的数据，并且长，不是很推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库自增，集群多的情况下，扩容简直就是噩梦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 使用 Redis INCR 和 INCRBY 实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;snowflake雪花算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#snowflake雪花算法&#34;&gt;#&lt;/a&gt; snowflake（雪花算法）&lt;/h4&gt;
&lt;p&gt;Twitter 的分布式自增 ID 算法：snowflake（雪花算法）&lt;/p&gt;
&lt;h5 id=&#34;概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;最初 Twitter 把存储系统从 Mysql 迁移到 Cassandra (由 Facebook 开发一套开源分布式 Nosql 系统) 因为 Cassandra 没有顺序 ID 生成机制，所以开发成了这样一套全局唯一 ID 生成服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Twitter 的分布式雪花算法 SnowFlake ， 经测试 snowflake 每秒能产出 26 万个自增可排序的 ID&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;twitter 的 SnowFlake 生成 ID 能够按照时间有序生成&lt;/li&gt;
&lt;li&gt;SnowFlake 算法生成 id 的结果是一个 64 bit 大小的整数，为一个 Long 型（转换成字符后长度 19 位）&lt;/li&gt;
&lt;li&gt;分布式系统不会产生 ID 碰撞（由 datacenter 和 workerld 区分）并且效率较高&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200921220349644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;号段解析：&lt;/p&gt;
&lt;p&gt;1bit ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不用，因为二进制中最高位是符号位，毫秒级，生成的 id 一般用整数，所以最高位 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;41bit - 时间戳，用来记录时间戳，毫秒级，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;41 位可以表示 2 ^ {41}-1 个数字&lt;/li&gt;
&lt;li&gt;如果只用来表示正整数 (计算机中正整数包含 0)。可以表示数值范围：0 至 2^{41}-1 , 减 1 是因为表示的数值是从 0 开始算的 ，而不是 1.&lt;/li&gt;
&lt;li&gt;也就是说 41 位可以表示 2 ^ &lt;ruby&gt;41}-1 个毫秒的值，装换成单位年则 （2&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;{41&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;-1）/ （1000 * 60 * 60 * 24 * 365）=69 年&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10bit- 工作机器 ID，用来记录工作机器 ID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以部署在 2^{10} = 1024 个节点，包括 5 位 datacenterId 和 5 位的 workeId&lt;/li&gt;
&lt;li&gt;5 位（bit）可以表示的最大正整数是 2 ^ {5}-1 =31 , 即可以用 0、1、2、3…31 这 32 个数字，来表示不同的 datacenterId 或者 workId&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12 bit - 序列号，序列号，用来记录同毫秒内产生的不同的 id。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;12 位可以表示的最大正整数是 2^{12}-1 = 4095 即可以用 0、1、2、34094 这 4095 个数字来表示同一机器同一时间（毫秒）产生的 4095 个 ID 序号&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;SnowFlake 可以保证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有生成的 id 按时间趋势递增&lt;/li&gt;
&lt;li&gt;整个分布式系统内不会产生重复的 id&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源码&#34;&gt;#&lt;/a&gt; 源码&lt;/h5&gt;
&lt;p&gt;twitter 的雪花算法：&lt;a href=&#34;https://github.com/twitter-archive/snowflake&#34;&gt;https://github.com/twitter-archive/snowflake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub 上 java 版的雪花算法： &lt;a href=&#34;https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java&#34;&gt;https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java&lt;/a&gt; &lt;a href=&#34;https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java&#34;&gt;https://github.com/souyunku/SnowFlake/blob/master/SnowFlake.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;java 版❄️雪花算法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SnowflakeIdWorker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// ==============================Fields==================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 开始时间截 (2019-08-06) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; twepoch = &lt;span class=&#34;number&#34;&gt;1565020800000L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 机器id所占的位数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerIdBits = &lt;span class=&#34;number&#34;&gt;5L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 数据标识id所占的位数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterIdBits = &lt;span class=&#34;number&#34;&gt;5L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; maxWorkerId = -&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; ^ (-&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; workerIdBits);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 支持的最大数据标识id，结果是31 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; maxDatacenterId = -&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; ^ (-&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; datacenterIdBits);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 序列在id中占的位数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; sequenceBits = &lt;span class=&#34;number&#34;&gt;12L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 机器ID向左移12位 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerIdShift = sequenceBits;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 数据标识id向左移17位(12+5) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterIdShift = sequenceBits + workerIdBits;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 时间截向左移22位(5+5+12) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; sequenceMask = -&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; ^ (-&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; sequenceBits);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 工作机器ID(0~31) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 数据中心ID(0~31) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 毫秒内序列(0~4095) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; sequence = &lt;span class=&#34;number&#34;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 上次生成ID的时间截 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; lastTimestamp = -&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//==============================Constructors====================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; workerId 工作ID (0~31)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; datacenterId 数据中心ID (0~31)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SnowflakeIdWorker&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerId, &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (workerId &amp;gt; maxWorkerId || workerId &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IllegalArgumentException(String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;worker Id can&amp;#x27;t be greater than %d or less than 0&amp;quot;&lt;/span&gt;, maxWorkerId));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (datacenterId &amp;gt; maxDatacenterId || datacenterId &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IllegalArgumentException(String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;datacenter Id can&amp;#x27;t be greater than %d or less than 0&amp;quot;&lt;/span&gt;, maxDatacenterId));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.workerId = workerId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.datacenterId = datacenterId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ==============================Methods=================================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 获得下一个ID (该方法是线程安全的)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; SnowflakeId&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nextId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; timestamp = timeGen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timestamp &amp;lt; lastTimestamp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RuntimeException(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&amp;quot;&lt;/span&gt;, lastTimestamp - timestamp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//如果是同一时间生成的，则进行毫秒内序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastTimestamp == timestamp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sequence = (sequence + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; sequenceMask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//毫秒内序列溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sequence == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//阻塞到下一个毫秒,获得新的时间戳&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                timestamp = tilNextMillis(lastTimestamp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//时间戳改变，毫秒内序列重置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sequence = &lt;span class=&#34;number&#34;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//上次生成ID的时间截&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lastTimestamp = timestamp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//移位并通过或运算拼到一起组成64位的ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ((timestamp - twepoch) &amp;lt;&amp;lt; timestampLeftShift) &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                | (datacenterId &amp;lt;&amp;lt; datacenterIdShift) &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                | (workerId &amp;lt;&amp;lt; workerIdShift) &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                | sequence;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 阻塞到下一个毫秒，直到获得新的时间戳&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; lastTimestamp 上次生成ID的时间截&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 当前时间戳&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;tilNextMillis&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; lastTimestamp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; timestamp = timeGen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (timestamp &amp;lt;= lastTimestamp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            timestamp = timeGen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; timestamp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 返回以毫秒为单位的当前时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 当前时间(毫秒)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;timeGen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//==============================Test=============================================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** 测试 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SnowflakeIdWorker idWorker = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SnowflakeIdWorker(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; id = idWorker.nextId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(Long.toBinaryString(id));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;springboot整合雪花算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot整合雪花算法&#34;&gt;#&lt;/a&gt; springboot 整合雪花算法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;新建项目 snowflake&lt;/li&gt;
&lt;li&gt;pom&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;!--hutool 引入糊涂工具包，测试雪花算法--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;hutool-captcha&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;version&amp;gt;5.3.8&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;yml&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  port: &lt;span class=&#34;number&#34;&gt;7777&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;新建 utils 包 IdGeneratorSnowflake 类&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IdGeneratorSnowflake&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerId = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//第几号机房&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterId = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//第几号机器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@PostConstruct&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;//构造后开始执行，加载初始化工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//获取本机的ip地址编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;当前机器的workerId: &amp;quot;&lt;/span&gt; + workerId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.warn(&lt;span class=&#34;string&#34;&gt;&amp;quot;当前机器的workerId获取失败 ----&amp;gt; &amp;quot;&lt;/span&gt; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            workerId = NetUtil.getLocalhostStr().hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;snowflakeId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; snowflake.nextId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;snowflakeId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; workerId, &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; datacenterId)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; snowflake.nextId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IdGeneratorSnowflake().snowflakeId());   &lt;span class=&#34;comment&#34;&gt;//1277896081711169536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;新建 service 包 OrderService 接口 与 service.impl 包 OrderServiceImpl 实现 OrderService 的接口&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OrderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;String &lt;span class=&#34;title&#34;&gt;getIDBySnowFlake&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OrderServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OrderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IdGeneratorSnowflake idGenerator;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getIDBySnowFlake&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//新建线程池（5个线程）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ExecutorService threadPool = Executors.newFixedThreadPool(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            threadPool.submit(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(idGenerator.snowflakeId());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threadPool.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello snowflake&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;新建 controller 包 OrderController&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OrderController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; OrderService orderService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/snowflake&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; orderService.getIDBySnowFlake();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;主启动类&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MainApp&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SpringApplication.run(MainApp.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动项目 浏览器输入 http://localhost:7777/snowflake&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200921223551325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200921223628111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决时钟回拨问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百度开源的分布式唯一 ID 生成器 UidGenerator&lt;/li&gt;
&lt;li&gt;美团开源的分布式 ID 生成系统 Leaf&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>vue中websocket和http的区别</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category>Vue</category>
            <pubDate>Mon, 13 Apr 2020 15:20:24 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;什么是websocket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是websocket&#34;&gt;#&lt;/a&gt; 什么是 Websocket&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Websocket 是一种网络通信协议，是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;websocket有什么特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket有什么特点&#34;&gt;#&lt;/a&gt; Websocket 有什么特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;建立在 TCP 协议之上&lt;/li&gt;
&lt;li&gt;性能开销小通信高效&lt;/li&gt;
&lt;li&gt;协议标识符 ws wss（加密之后）&lt;/li&gt;
&lt;li&gt;持久化网络通信协议&lt;/li&gt;
&lt;li&gt;客户端可以与任意服务器通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;websocket是什么样的协议具体有什么优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket是什么样的协议具体有什么优点&#34;&gt;#&lt;/a&gt; Websocket 是什么样的协议，具体有什么优点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先，Websocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说&lt;br&gt;
 HTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了。&lt;br&gt;
在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response ， 在 HTTP 中永远是这样，也就是说一个 request 只能有一个 response。而且这个 response 也是被动的，不能主动发起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;websocket的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket的作用&#34;&gt;#&lt;/a&gt; Websocket 的作用&lt;/h2&gt;
&lt;h3 id=&#34;1ajax轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1ajax轮询&#34;&gt;#&lt;/a&gt; 1）ajax 轮询&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2long-poll长轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2long-poll长轮询&#34;&gt;#&lt;/a&gt; 2）long poll 长轮询&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3websocket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3websocket&#34;&gt;#&lt;/a&gt; 3）WebSocket&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&amp;gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接&amp;#x2F;状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;目前唯一的问题是：不兼容低版本的IE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;websocket使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket使用场景&#34;&gt;#&lt;/a&gt; Websocket 使用场景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;社交聊天、弹幕、多玩家游戏、视频会议 / 聊天、在线教育、智能家居等需要高实时的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;websocket-四个事件两个方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket-四个事件两个方法&#34;&gt;#&lt;/a&gt; Websocket 四个事件，两个方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;4个事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4个事件&#34;&gt;#&lt;/a&gt; 4 个事件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;open Socket.onopen 连接建立时触发&lt;/li&gt;
&lt;li&gt;message Socket.onmessage 客户端接收服务端数据时触发&lt;/li&gt;
&lt;li&gt;error Socket.onerror 通信发生错误时触发&lt;/li&gt;
&lt;li&gt;close Socket.onclose 连接关闭时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;2个方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2个方法&#34;&gt;#&lt;/a&gt; 2 个方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Socket.send () 使用连接发送数据&lt;/li&gt;
&lt;li&gt;Socket.close () 关闭连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是http协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是http协议&#34;&gt;#&lt;/a&gt; 什么是 HTTP 协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超文本传输协议，本质上是一种通信协议。用来将 html 从服务端传送到客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单快速&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户向服务器请求服务时，只需传送请求方法和路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无连接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;websocket与http的关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket与http的关系&#34;&gt;#&lt;/a&gt; Websocket 与 http 的关系&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;相同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#相同点&#34;&gt;#&lt;/a&gt; 相同点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;都是一样基于 TCP 的，都是可靠性传输协议。&lt;/li&gt;
&lt;li&gt;都是应用层协议。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;不同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同点&#34;&gt;#&lt;/a&gt; 不同点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息。HTTP 是单向的。&lt;/li&gt;
&lt;li&gt;WebSocket 是需要浏览器和服务器握手进行建立连接的。而 http 是浏览器发起向服务器的连接，服务器预先并不知道这个连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;websocket实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket实例&#34;&gt;#&lt;/a&gt; Websocket 实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pip install -i &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZQ==&#34;&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span&gt; dwebsocket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;定义视图文件的逻辑viewspy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义视图文件的逻辑viewspy&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS12aWV3cy14czFobDRiNnoxYm55amM0eTR3NmJna3ljN3pwOGZjLnB5&#34;&gt;定义视图文件的逻辑 views.py&lt;/span&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#导入websocket装饰器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from dwebsocket.decorators import accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#接收前端信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def test_socket(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if request.is_websocket():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for message in request.websocket:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c&amp;#x3D;str(message,encoding&amp;#x3D;&amp;#39;utf-8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            print(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.websocket.send(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#主动推送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def test_websocket(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if request.is_websocket():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            time.sleep(1) ## 向前端发送时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dit &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#39;time&amp;#39;:time.strftime(&amp;#39;%Y.%m.%d %H:%M:%S&amp;#39;,time.localtime(time.time()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.websocket.send(json.dumps(dit))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;路由配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路由配置&#34;&gt;#&lt;/a&gt; 路由配置&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;path(&amp;#39;test_socket&amp;#39;,test_socket),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;path(&amp;#39;test_websocket&amp;#39;,test_websocket),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;定义前端发送消息的页面-socketvue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义前端发送消息的页面-socketvue&#34;&gt;#&lt;/a&gt; 定义前端发送消息的页面 – socket.vue&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CODE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;input id&amp;#x3D;&amp;quot;chat-message-input&amp;quot; type&amp;#x3D;&amp;quot;text&amp;quot; size&amp;#x3D;&amp;quot;100&amp;quot;&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;input id&amp;#x3D;&amp;quot;chat-message-submit&amp;quot; type&amp;#x3D;&amp;quot;button&amp;quot; value&amp;#x3D;&amp;quot;Send&amp;quot; @click&amp;#x3D;&amp;#39;sendmessage()&amp;#39;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &amp;quot;socket&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  methods: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sendmessage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.s.send(document.getElementById(&amp;quot;chat-message-input&amp;quot;).value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;生成socket对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var socket &amp;#x3D; new WebSocket(&amp;quot;ws:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;test_socket&amp;#x2F;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onopen &amp;#x3D; function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;WebSocket open&amp;#39;);&amp;#x2F;&amp;#x2F;成功连接上Websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onmessage &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;message: &amp;#39; + e.data);&amp;#x2F;&amp;#x2F;打印服务端返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onclose &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.close(); &amp;#x2F;&amp;#x2F;关闭TCP连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (socket.readyState &amp;#x3D;&amp;#x3D; WebSocket.OPEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.onopen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    window.s &amp;#x3D; socket;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style scoped&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;然后再定义一个页面测试后台的主动推送-socket_pushvue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#然后再定义一个页面测试后台的主动推送-socket_pushvue&#34;&gt;#&lt;/a&gt; 然后再定义一个页面，测试后台的主动推送 – socket_push.vue&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &amp;quot;socket_push&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;生成socket对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var socket &amp;#x3D; new WebSocket(&amp;quot;ws:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;test_websocket&amp;#x2F;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onopen &amp;#x3D; function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;WebSocket open&amp;#39;);&amp;#x2F;&amp;#x2F;成功连接上Websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onmessage &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;message: &amp;#39; + e.data);&amp;#x2F;&amp;#x2F;打印服务端返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onclose &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.close(); &amp;#x2F;&amp;#x2F;关闭TCP连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (socket.readyState &amp;#x3D;&amp;#x3D; WebSocket.OPEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.onopen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style scoped&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</guid>
            <title>vue钩子函数</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</link>
            <category>Vue</category>
            <pubDate>Fri, 13 Sep 2019 15:16:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-路由钩子函数相关概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-路由钩子函数相关概念&#34;&gt;#&lt;/a&gt; 一、路由钩子函数相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么情况下要使用路由的钩子函数？
&lt;ul&gt;
&lt;li&gt;在路由跳转的时候，我们需要一些权限判断或者其他操作，这个时候就需要使用路由的钩子函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由钩子函数的定义:
&lt;ul&gt;
&lt;li&gt;路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-路由钩子的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-路由钩子的分类&#34;&gt;#&lt;/a&gt; 二、路由钩子的分类&lt;/h2&gt;
&lt;h4 id=&#34;1-全局路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-全局路由钩子&#34;&gt;#&lt;/a&gt; 1、全局路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在初始化 VueRouter 以后，直接使用 router 实例进行注册&lt;br&gt;
包括两个钩子：beforeEach、afterEach（每个路由切换前或者切换后调用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-单个路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-单个路由钩子&#34;&gt;#&lt;/a&gt; 2、单个路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;写在路由配置中，只有访问到这个路径，才能触发钩子函数&lt;br&gt;
包括两个钩子：beforeEnter、beforeLeave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3-组件内路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-组件内路由钩子&#34;&gt;#&lt;/a&gt; 3、组件内路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;这个钩子要在组件内定义&lt;br&gt;
包括三个钩子：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;（1） 路由对象是在使用 vue-route 启动应用时，每个匹配的组件实例都会被注入 router 的对象，称之为路由对象。&lt;br&gt;
在组件内部可以通过 this.$route 的方式调用&lt;br&gt;
（2）路由对象有： $route.path , $route.params, $route.query, $route.router 等属性&lt;/p&gt;
&lt;h2 id=&#34;三-代码演示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-代码演示&#34;&gt;#&lt;/a&gt; 三、代码演示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;全局路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局路由钩子&#34;&gt;#&lt;/a&gt; 全局路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;routerbeforeeachtofromnext-全局前置守卫&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#routerbeforeeachtofromnext-全局前置守卫&#34;&gt;#&lt;/a&gt; router.beforeEach（（to,from,next）=&amp;gt;{ }）：全局前置守卫&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach(function (to,from,next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(to);  &amp;#x2F;&amp;#x2F;到达的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(next);&amp;#x2F;&amp;#x2F;跳转到其他路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(from);&amp;#x2F;&amp;#x2F;离开的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;routeraftereachtofrom-全局后置钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#routeraftereachtofrom-全局后置钩子&#34;&gt;#&lt;/a&gt; router.afterEach（（to,from）=&amp;gt;{ }）：全局后置钩子&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.afterEach(function (to,from) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(to);  &amp;#x2F;&amp;#x2F;到达的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(from);&amp;#x2F;&amp;#x2F;离开的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;单个路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单个路由钩子&#34;&gt;#&lt;/a&gt; 单个路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforeenter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforeenter&#34;&gt;#&lt;/a&gt; beforeEnter&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default new Router (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    routes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path: &amp;#39;&amp;#x2F;index&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            component: Index,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeEnter: (to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforeleave&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforeleave&#34;&gt;#&lt;/a&gt; beforeLeave&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default new Router (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    routes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path: &amp;#39;&amp;#x2F;index&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            component: Index,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeLeave: (to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;组件内路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件内路由钩子&#34;&gt;#&lt;/a&gt; 组件内路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforerouteenter-进入这个组件路由之前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteenter-进入这个组件路由之前&#34;&gt;#&lt;/a&gt; beforeRouteEnter: 进入这个组件路由之前&lt;/h4&gt;
&lt;h4 id=&#34;beforerouteleave离开这个组件路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteleave离开这个组件路由&#34;&gt;#&lt;/a&gt; beforeRouteLeave：离开这个组件路由&lt;/h4&gt;
&lt;h4 id=&#34;beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate&#34;&gt;#&lt;/a&gt; beforeRouteUpdate：在本路由的下级路由切换才会触发 beforeRouteUpdate&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        测验：&amp;#123;&amp;#123;zst&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                zst:&amp;#39;廾匸改变之前&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeCreate()&amp;#123; &amp;#x2F;&amp;#x2F;组件生命周期函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;创建之前&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F;进入组件之前，执行 beforRouteEnter &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteEnter(to,from,next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;123&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(this) &amp;#x2F;&amp;#x2F; 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来，得先执行beforRouteEnter，再执行beforeCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next((gx)&amp;#x3D;&amp;gt;&amp;#123; &amp;#x2F;&amp;#x2F;参数gx就是当前组件的实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                gx.zst &amp;#x3D; &amp;#39;被改变了&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteUpdate(to,from,next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;abc&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteLeave(to,from,next)&amp;#123;&amp;#x2F;&amp;#x2F;离开组件的时候触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#x2F;&amp;#x2F;什么都不写的时候，走下一步&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</guid>
            <title>redis哨兵模式</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</link>
            <category>Redis</category>
            <pubDate>Tue, 25 Jun 2019 08:09:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;redis哨兵sentinel模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis哨兵sentinel模式&#34;&gt;#&lt;/a&gt; Redis 哨兵（Sentinel）模式&lt;/h1&gt;
&lt;h2 id=&#34;一-主从复制高可用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-主从复制高可用&#34;&gt;#&lt;/a&gt; 一、主从复制高可用&lt;/h2&gt;
&lt;h3 id=&#34;当我们使用主从复制出现的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#当我们使用主从复制出现的问题&#34;&gt;#&lt;/a&gt; 当我们使用主从复制出现的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;手动故障转移&lt;/li&gt;
&lt;li&gt;写能力和存储能力受限&lt;/li&gt;
&lt;li&gt;主从复制 -master 宕机故障处理 &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201017111328608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;~哨兵模式概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#~哨兵模式概述&#34;&gt;#&lt;/a&gt; ～哨兵模式概述&lt;/h3&gt;
&lt;p&gt;哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。&lt;/p&gt;
&lt;p&gt;哨兵主要有两个作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。&lt;/li&gt;
&lt;li&gt;当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;故障切换（failover）的过程。假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二-架构说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-架构说明&#34;&gt;#&lt;/a&gt; 二、架构说明&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201017111608378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多个 sentinel 发现并确认 master 有问题。&lt;/li&gt;
&lt;li&gt;选举出一个 sentinel 作为领导&lt;/li&gt;
&lt;li&gt;选出一个 slave 作为 master&lt;/li&gt;
&lt;li&gt;通知其余的 slave 成为新的 master 的 slave&lt;/li&gt;
&lt;li&gt;通知客户端主从变化&lt;/li&gt;
&lt;li&gt;等待老的 master 复活成新的 master 的 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三-安装配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-安装配置&#34;&gt;#&lt;/a&gt; 三、安装配置&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201018091923731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置主从节点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;主节点&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;启动命令：redis-server redis-&lt;span class=&#34;number&#34;&gt;7000.&lt;/span&gt;conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;port &lt;span class=&#34;number&#34;&gt;7000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;daemonize yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pidfile /&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt;/run/redis-&lt;span class=&#34;number&#34;&gt;7000.&lt;/span&gt;pid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logfile &lt;span class=&#34;string&#34;&gt;&amp;quot;7000.log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dir &lt;span class=&#34;string&#34;&gt;&amp;quot;/opt/soft/redis/data/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Redis 从节点&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-server redis-&lt;span class=&#34;number&#34;&gt;7001.&lt;/span&gt;conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;redis-server redis-&lt;span class=&#34;number&#34;&gt;7002.&lt;/span&gt;conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;slave-1:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;port &lt;span class=&#34;number&#34;&gt;7002&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;daemonize yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pidfile /&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt;/run/redis-&lt;span class=&#34;number&#34;&gt;7002.&lt;/span&gt;pid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logfile &lt;span class=&#34;string&#34;&gt;&amp;quot;7002.log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dir &lt;span class=&#34;string&#34;&gt;&amp;quot;/opt/soft/redis/data/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;slaveof &lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;slave-2:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;port &lt;span class=&#34;number&#34;&gt;7001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;daemonize yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pidfile /&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt;/run/redis-&lt;span class=&#34;number&#34;&gt;7001.&lt;/span&gt;pid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logfile &lt;span class=&#34;string&#34;&gt;&amp;quot;7001.log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dir &lt;span class=&#34;string&#34;&gt;&amp;quot;/opt/soft/redis/data/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;slaveof &lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;配置开启 sentinel 监控主节点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;sentine 主要配置 编辑 sentinel.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;port $&amp;#123;port&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dir &lt;span class=&#34;string&#34;&gt;&amp;quot;/opt/soft/redis/data/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logfile &lt;span class=&#34;string&#34;&gt;&amp;quot;$&amp;#123;port&amp;#125;.log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel monitor mymaster &lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7000&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel down-after-millseseconds mymaster &lt;span class=&#34;number&#34;&gt;30000&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//判断主节点时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel parallel-syncs mymaster &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel failover-timeout mymaster &lt;span class=&#34;number&#34;&gt;180000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-sentinel sentinel.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以使用 ps -ef|grep redis-sentinel 命令查看进程、 &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201018094305376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四-实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-实现原理&#34;&gt;#&lt;/a&gt; 四、实现原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;故障转移 — java 实现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 测试Redis哨兵模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; liu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestSentinels&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@SuppressWarnings(&amp;quot;resource&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;testSentinel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        JedisPoolConfig jedisPoolConfig = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; JedisPoolConfig();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jedisPoolConfig.setMaxTotal(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jedisPoolConfig.setMaxIdle(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jedisPoolConfig.setMinIdle(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 哨兵信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Set&amp;lt;String&amp;gt; sentinels = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;(Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1:26379&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;1127.0.0.1:26379&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1:26379&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建连接池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        JedisSentinelPool pool = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; JedisSentinelPool(&lt;span class=&#34;string&#34;&gt;&amp;quot;mymaster&amp;quot;&lt;/span&gt;, sentinels,jedisPoolConfig,&lt;span class=&#34;string&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Jedis jedis = pool.getResource();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 执行两个命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jedis.set(&lt;span class=&#34;string&#34;&gt;&amp;quot;mykey&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;myvalue&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String value = jedis.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;mykey&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们把主服务器停掉，在经过一段时间的报错后，redis 集群会恢复 &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201018100544809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主观下线和客观下线
&lt;ul&gt;
&lt;li&gt;主观下线：当前 sentintel 节点认为某个 redis 节点不可用。&lt;/li&gt;
&lt;li&gt;客观下线：所有 sentinel 节点认为某个 redis 节点不可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三个定时任务&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;每 10 秒每个 sentinel 对 master 和 slave 执行 info&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 发现slave节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 确认主从关系&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每 2 秒每个 sentinel 通过 master 节点对 channel 交换信息（发布订阅）&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 通过_sentinel_:hello频道交互&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 交互对节点的“看法”和自身信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每 1 秒每个 sentinel 对其他 sentinel 和 redis 执行 ping&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;领导者选举&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只需要一个 sentinel 节点完成故障转移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 sentinel is - master -down -by-addr 命令都希望成为领导者&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-1. 每个主观下线都Sentitle 节点向其他Sentinel节点发送命令，要求将它设置为领导者&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-2. 收到命令对Sentinel节点如果没有同一通过其他Sentinel节点发送的命令，那么就将同一该请求，否则拒绝&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-3. 如果该Sentinel节点发现直接的票数已经超过Sentinel集合半数且超过quorum，那么它将成为领导者&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-4. 如果此过程由多个Sentinel节点成为领导者，那么将来等待一段时间重新进行选举&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201018102554444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障转移（Sentinel 领导者节点完成）
&lt;ul&gt;
&lt;li&gt;1. 从 slave 节点中选出一个 “合适点” 节点作为 master 节点&lt;/li&gt;
&lt;li&gt;2. 对上面对 slave 节点执行 slaveof no one 命令让其成为 master 节点。&lt;/li&gt;
&lt;li&gt;3. 向剩余的 slave 节点发送命令，让它们成为新的 maater 节点的 slave 节点，复制规避和 parallel-syncs 参数有关&lt;/li&gt;
&lt;li&gt;4. 更新对原来 master 节点配置为 slave，并保持着对其 “关注”，当其恢复后命令他去复制新对 master 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择 “合适的” slave 节点
&lt;ul&gt;
&lt;li&gt;1. 选择 slave-priority（slave 节点优先级）最高对 slave 节点，如果存在返回，不存在继续&lt;/li&gt;
&lt;li&gt;2. 选择复制偏移量最大的 slave 节点，复制最完整，存在返回，不存在继续&lt;/li&gt;
&lt;li&gt;3. 选择 runId 最小的 slave 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;五-需要说明的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-需要说明的问题&#34;&gt;#&lt;/a&gt; 五、需要说明的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽可能在不同物理机上和同一个网络部署 Redis sentinel 的所有节点&lt;/li&gt;
&lt;li&gt;Redis sentinel 中的 sentinel 节点个数应该大于等于 3 且最好是奇数。（节点数多可以保证高可用）&lt;/li&gt;
&lt;li&gt;Redis sentinel 中的数据节点和普通数据节点没有区别。每个 sentinel 节点在本质上还是一个 Redis 实例，只不过和 Redis 数据节点不同的是，其主要作用是监控 Redis 数据节点&lt;/li&gt;
&lt;li&gt;客户端初始化时连接的是 sentinel 节点集合，不再是具体的 Redis 节点，但 sentinel 只是配置中心不是代理。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</guid>
            <title>项目总结</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</link>
            <category>Python</category>
            <pubDate>Sun, 31 Mar 2019 15:03:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;项目总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目总结&#34;&gt;#&lt;/a&gt; 项目总结&lt;/h1&gt;
&lt;h3 id=&#34;1-前端ant-desgin的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-前端ant-desgin的使用&#34;&gt;#&lt;/a&gt; 1、前端 ant desgin 的使用：&lt;/h3&gt;
&lt;h4 id=&#34;1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可&#34;&gt;#&lt;/a&gt; 1、前端 ant 组件为我们配置好了多种样式，复制粘贴修改参数即可，&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;https:&amp;#x2F;&amp;#x2F;ant.design&amp;#x2F;components&amp;#x2F;button-cn&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-docker的基础命令和操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-docker的基础命令和操作&#34;&gt;#&lt;/a&gt; 2、docker 的基础命令和操作：&lt;/h3&gt;
&lt;h4 id=&#34;1-查看所有镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-查看所有镜像&#34;&gt;#&lt;/a&gt; 1、查看所有镜像：&lt;/h4&gt;
&lt;p&gt;​				docker images&lt;/p&gt;
&lt;h4 id=&#34;2-删除镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-删除镜像&#34;&gt;#&lt;/a&gt; 2、删除镜像：&lt;/h4&gt;
&lt;p&gt;​				docker&lt;/p&gt;
&lt;h4 id=&#34;3-暂停镜像不然无法删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-暂停镜像不然无法删除&#34;&gt;#&lt;/a&gt; 3、暂停镜像（不然无法删除）：&lt;/h4&gt;
&lt;p&gt;​				docker stop $(docker ps -a -q)&lt;/p&gt;
&lt;h4 id=&#34;4-如果想要删除所有container的话再加一个指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-如果想要删除所有container的话再加一个指令&#34;&gt;#&lt;/a&gt; 4、如果想要删除所有 container 的话再加一个指令：&lt;/h4&gt;
&lt;p&gt;​				docker rm $(docker ps -a -q)&lt;/p&gt;
&lt;h4 id=&#34;5-查看当前有些什么images&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-查看当前有些什么images&#34;&gt;#&lt;/a&gt; 5、查看当前有些什么 images&lt;/h4&gt;
&lt;p&gt;​				docker images&lt;/p&gt;
&lt;h4 id=&#34;6-删除images通过image的id来指定删除谁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-删除images通过image的id来指定删除谁&#34;&gt;#&lt;/a&gt; 6、删除 images，通过 image 的 id 来指定删除谁&lt;/h4&gt;
&lt;p&gt;​				docker rmi &lt;image id&gt;&lt;/p&gt;
&lt;h4 id=&#34;7-想要删除untagged-images也就是那些id为none的image的话可以用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-想要删除untagged-images也就是那些id为none的image的话可以用&#34;&gt;#&lt;/a&gt; 7、想要删除 untagged images，也就是那些 id 为&lt;None&gt;的 image 的话可以用&lt;/h4&gt;
&lt;p&gt;​				docker rmi $(docker images | grep “^&lt;none&gt;” | awk “{print $3}”)&lt;/p&gt;
&lt;h4 id=&#34;8-要删除全部image的话&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-要删除全部image的话&#34;&gt;#&lt;/a&gt; 8、要删除全部 image 的话&lt;/h4&gt;
&lt;p&gt;​				docker rmi $(docker images -q)&lt;/p&gt;
&lt;h4 id=&#34;9-启动容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-启动容器&#34;&gt;#&lt;/a&gt; 9、启动容器&lt;/h4&gt;
&lt;p&gt;​				docker run -p 6380:6379 redis&lt;/p&gt;
&lt;h4 id=&#34;10-查看所有容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-查看所有容器&#34;&gt;#&lt;/a&gt; 10、查看所有容器&lt;/h4&gt;
&lt;p&gt;​				docker ps&lt;/p&gt;
&lt;h2 id=&#34;3-redis的时间使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-redis的时间使用&#34;&gt;#&lt;/a&gt; 3、redis 的时间使用&lt;/h2&gt;
&lt;h4 id=&#34;1-给变量赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-给变量赋值&#34;&gt;#&lt;/a&gt; 1、给变量赋值&lt;/h4&gt;
&lt;p&gt;​				set 变量 值&lt;/p&gt;
&lt;h4 id=&#34;2-查看变量的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-查看变量的值&#34;&gt;#&lt;/a&gt; 2、查看变量的值&lt;/h4&gt;
&lt;p&gt;​				get 变量&lt;/p&gt;
&lt;h4 id=&#34;3-给变量附上过期时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-给变量附上过期时间&#34;&gt;#&lt;/a&gt; 3、给变量附上过期时间&lt;/h4&gt;
&lt;p&gt;​				expire 变量 秒速&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;4-数据库连接池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-数据库连接池&#34;&gt;#&lt;/a&gt; 4、数据库连接池&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#数据库链接池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#链接池对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pool = redis.ConnectionPool()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#从链接池获取链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conn = redis.Redis(connection_pool=pool)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conn.&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(conn.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5-异步写文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-异步写文件&#34;&gt;#&lt;/a&gt; 5、异步写文件&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test_demo&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; aiofiles.&lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test.txt&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; fp.write(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Have a good time. Have a good time\n&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据写入成功&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tasks=[asyncio.create_task(test_demo()) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; asyncio.gather(*tasks)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    start = time.time()  &lt;span class=&#34;comment&#34;&gt;# 开始时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asyncio.run(main())  &lt;span class=&#34;comment&#34;&gt;# 执行操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end = time.time()    &lt;span class=&#34;comment&#34;&gt;# 结束时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;#x27;异步执行了:&lt;span class=&#34;subst&#34;&gt;&amp;#123;end - start&amp;#125;&lt;/span&gt;秒&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6-悦哥翻墙软件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-悦哥翻墙软件&#34;&gt;#&lt;/a&gt; 6、悦哥翻墙软件&lt;/h2&gt;
&lt;p&gt;​		&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbXkubmV0d29yay9wcm9kdWN0L2luZGV4&#34;&gt;https://cmy.network/product/index&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-队列&#34;&gt;#&lt;/a&gt; 7、队列&lt;/h2&gt;
&lt;h4 id=&#34;1-队列的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-队列的概念&#34;&gt;#&lt;/a&gt; 1、队列的概念&lt;/h4&gt;
&lt;p&gt;​				队列是一种特殊的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTYlODAlQTclRTglQTElQTgvMzIyODA4MQ==&#34;&gt;线性表&lt;/span&gt;，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后				端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队				尾，进行删除操作的端称为队头。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyQueue&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,keyname:&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;,**redis_kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.__db = redis.Redis(**redis_kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.key = keyname&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.s = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#添加数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,x:&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#self.s.append(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#添加队列数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.__db.rpush(self.key,x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#删除数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pop&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.s.pop(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;peek&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#return self.s[0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.__db.lpop(self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#判断是否执行完毕&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;empty&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;(self.s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;8-中间件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-中间件&#34;&gt;#&lt;/a&gt; 8、中间件&lt;/h2&gt;
&lt;h4 id=&#34;1-概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-概念&#34;&gt;#&lt;/a&gt; 1、概念&lt;/h4&gt;
&lt;p&gt;​					中间件是一个 Python 程序员用来处理 Django 的请求和响应的框架级别的钩子，它是一个轻量，低级					别的插件系统，用于全局范围内改变 Django 的输入，输出。中间件可以在系统输入之前进行输入，					在系统输出之前进行输出&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; django.utils.deprecation &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; MiddlewareMixin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; z_Userapp.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; JurisdictionModel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 中间件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Middle&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;MiddlewareMixin&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;process_request&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 获取uid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uid=request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;uid&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 如果存在，则查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; uid:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# user=JurisdictionModel.objects.filter(user_id=uid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.level=&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(uid) &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你需要在 settings.py 中的 MIDDLEWARE 中进行注册才可以使用&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;应用名.middleware.你的中间件类名&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;9-七牛云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-七牛云&#34;&gt;#&lt;/a&gt; 9、七牛云&lt;/h2&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; qiniu &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Auth&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;qiniu_token&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    qn = Auth(&lt;span class=&#34;string&#34;&gt;&amp;#x27;vkoJGPbnvO-zwjVX3DcVJnXtpt9gclvnH5N_A4he&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Mab055XtHiEYRRoyLEn02JBsY2kRnDAsmonQdhiT&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 指定上传空间, 返回token值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token = qn.upload_token(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shixun-p8&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpTokenView&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        七牛云token接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; JsonResponse(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;token&amp;#x27;&lt;/span&gt;: qiniu_token()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;10-又拍云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-又拍云&#34;&gt;#&lt;/a&gt; 10、又拍云&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; upyun&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义文件上传类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UploadFile&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        file = request.FILES.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        up = upyun.UpYun(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shixun-p8&amp;#x27;&lt;/span&gt;, username=&lt;span class=&#34;string&#34;&gt;&amp;#x27;coisnini&amp;#x27;&lt;/span&gt;, password=&lt;span class=&#34;string&#34;&gt;&amp;#x27;5LQiEB6YUY4aTIHQDNLMPpVf2QpnNeft&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;x-gmkerl-rotate&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;180&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; chunk &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; file.chunks():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = up.put(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/touxiang1.jpg&amp;#x27;&lt;/span&gt;, chunk, checksum=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 返回结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; HttpResponse(json.dumps(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;filename&amp;#x27;&lt;/span&gt;: file.name&amp;#125;), content_type=&lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;11-mongodb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-mongodb&#34;&gt;#&lt;/a&gt; 11、MongoDB&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; z_Userapp.MyMongoDB &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; MyMonge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 连接MongoDB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client = MyMonge(&lt;span class=&#34;string&#34;&gt;&amp;#x27;z_Cate&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;CateTemplate&amp;#x27;&lt;/span&gt;, **&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;host&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;127.0.0.1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;port&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27017&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取MongoDB数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GetMongo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;APIView&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 进入数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# db = client.z_Cate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# zst = db.CateTemplate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt; = request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wid = WorkOrderModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; wid.pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = client.find(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;wid&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(wid.&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = client.find(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;wid&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(wid.pid)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Response(&lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(data[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;12-工单递归死循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-工单递归死循环&#34;&gt;#&lt;/a&gt; 12、工单递归死循环&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;xTree&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;datas&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lists = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tree = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parent_id = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; datas:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tree[item[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]] = item&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    root = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; datas:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        obj = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;pid&amp;#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root = tree[obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lists.append(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            parent_id = obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;pid&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; tree[parent_id]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tree[parent_id][&lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt;] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tree[parent_id][&lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt;].append(tree[obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lists&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;13-三方登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-三方登录&#34;&gt;#&lt;/a&gt; 13、三方登录&lt;/h2&gt;
&lt;h4 id=&#34;导报&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导报&#34;&gt;#&lt;/a&gt; 导报&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hmac&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; base64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; hashlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sha256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-码云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-码云&#34;&gt;#&lt;/a&gt; 1、码云&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Gitee&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/oauth/authorize?client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;amp;response_type=code&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GiteeBack&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        code = request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.post(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/oauth/token?grant_type=authorization_code&amp;amp;code=%s&amp;amp;client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;amp;client_secret=ec39df1740d798ac832ab3df1ac99aedd04459c6b7d552f43099ef24273554cc&amp;quot;&lt;/span&gt; % code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/api/v5/user?access_token=2b8c4824659611c8a920631bb5684008&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name = json.loads(r.text)[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user = UserModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(username=name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; user:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://127.0.0.1:8080/myback&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user = UserModel(username=&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;gitee_&amp;quot;&lt;/span&gt; + name))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user = UserModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(username=name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://127.0.0.1:8080/myback&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-钉钉&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-钉钉&#34;&gt;#&lt;/a&gt; 2、钉钉&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 钉钉三方登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def ding_back(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    appid &amp;#x3D; &amp;#39;dingoar91fvryq6pugb1nx&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    redirect_uri &amp;#x3D; &amp;#39;http:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;ding_back&amp;#x2F;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 获取code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code &amp;#x3D; request.GET.get(&amp;quot;code&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t &amp;#x3D; time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timestamp &amp;#x3D; str((int(round(t * 1000))))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 密钥&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    appSecret &amp;#x3D; &amp;#39;Njh7SJwIE-MOoZa9P7nxgFf18iNOzCS2KvUaBybQ1xjTszXRA96XDvrTgttDHhVf&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 构造签名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    signature &amp;#x3D; base64.b64encode(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hmac.new(appSecret.encode(&amp;#39;utf-8&amp;#39;), timestamp.encode(&amp;#39;utf-8&amp;#39;), digestmod&amp;#x3D;sha256).digest())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 请求接口，换取钉钉用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payload &amp;#x3D; &amp;#123;&amp;#39;tmp_auth_code&amp;#39;: code&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    headers &amp;#x3D; &amp;#123;&amp;#39;Content-Type&amp;#39;: &amp;#39;application&amp;#x2F;json&amp;#39;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 导requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res &amp;#x3D; requests.post(&amp;#39;https:&amp;#x2F;&amp;#x2F;oapi.dingtalk.com&amp;#x2F;sns&amp;#x2F;getuserinfo_bycode?signature&amp;#x3D;&amp;#39; + urllib.parse.quote(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        signature.decode(&amp;quot;utf-8&amp;quot;)) + &amp;quot;&amp;amp;timestamp&amp;#x3D;&amp;quot; + timestamp + &amp;quot;&amp;amp;accessKey&amp;#x3D;dingoar91fvryq6pugb1nx&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        data&amp;#x3D;json.dumps(payload), headers&amp;#x3D;headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    re_dict &amp;#x3D; json.loads(res.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(re_dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 判断是否为第一次登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user &amp;#x3D; UserModel.objects.filter(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;])).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sina_id &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user_id &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if user:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 代表曾经用过钉钉登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sina_id &amp;#x3D; user.username&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user_id &amp;#x3D; user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 代表首次登录，入库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user &amp;#x3D; UserModel(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;]), password&amp;#x3D;&amp;#39;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 保存入库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sina_id &amp;#x3D; str(re_dict.get(&amp;#39;user_info&amp;#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 查询用户id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user &amp;#x3D; UserModel.objects.filter(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;])).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user_id &amp;#x3D; user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 进行跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return redirect(&amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1:8080&amp;#x2F;myback?sina_id&amp;#x3D;&amp;quot; + str(sina_id) + &amp;quot;&amp;amp;uid&amp;#x3D;&amp;quot; + str(user_id))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/Ant%E5%9F%BA%E7%A1%80%E6%8C%89%E9%92%AE/</guid>
            <title>Ant基础按钮</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/Ant%E5%9F%BA%E7%A1%80%E6%8C%89%E9%92%AE/</link>
            <category>Ant Design</category>
            <pubDate>Sun, 31 Mar 2019 14:59:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ant的按钮&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ant的按钮&#34;&gt;#&lt;/a&gt; Ant 的按钮&lt;/h1&gt;
&lt;h2 id=&#34;1-预习aut-design&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-预习aut-design&#34;&gt;#&lt;/a&gt; 1、预习 Aut Design&lt;/h2&gt;
&lt;h4 id=&#34;1-a-button的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-a-button的使用&#34;&gt;#&lt;/a&gt; （1）、a-button 的使用：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	button基础的几个按钮：

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot;&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			dashed    danger    primary   link

	loading的作用

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot; loading&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			目的是在网页展示出加载中的样式

	disabled的作用

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot; disabled&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			将按钮设置不可选

	block的作用

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot; block&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			控制按钮的宽度，可以使用style来设置宽高

	ghost的作用

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot; ghost&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			将按钮设置隐身状态

	siez的作用

		&amp;lt;a-button type=&amp;quot;按钮的类型&amp;quot; :size=&amp;quot;size&amp;quot;&amp;gt;按钮的名字&amp;lt;/a-button&amp;gt;

			拥有large，default，small三个按钮的大小，如果不需要变换大小就写size=size
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​							Ant Design 官方文档 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvYnV0dG9uLWNuLw==&#34;&gt;https://ant.design/components/button-cn/&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>gitee和gethub的区别</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category>Git</category>
            <pubDate>Mon, 18 Mar 2019 15:15:38 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/046/5ebb9c81a1c98622.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;想要自己做一些东西，或者和别人合作开发，就必须要学会使用 Git。最初了解 Git，同时听到了 Github、Gitee（码云），于是想要弄明白三者之间的区别与联系，经过一番搜寻，大致明白 Git 是一种东西，在本地的，可以下载安装。&lt;br&gt;
Git 官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmdpdC1zY20uY29tJTJG&#34;&gt;https://git-scm.com/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;github与gitee在国内的对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#github与gitee在国内的对比&#34;&gt;#&lt;/a&gt; github 与 gitee 在国内的对比&lt;/h4&gt;
&lt;p&gt;GitHub 是全英文并且用户基数多，知名的库也多，而 Gitee 全是中文，而且大部分用户都是国人，优秀的库相对于 GitHub 也少，在国内访问 Github 偶尔会有不稳定情况，而 Gitee 不会出现不稳定情况。&lt;/p&gt;
&lt;h4 id=&#34;github的特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#github的特点&#34;&gt;#&lt;/a&gt; GitHub 的特点&lt;/h4&gt;
&lt;p&gt;GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。&lt;/p&gt;
&lt;p&gt;GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过 350 万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。&lt;/p&gt;
&lt;h4 id=&#34;gitee的特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gitee的特点&#34;&gt;#&lt;/a&gt; Gitee 的特点&lt;/h4&gt;
&lt;p&gt;Gitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://upload-images.jianshu.io/upload_images/17559159-5fa12b9795227f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2/</guid>
            <title>docker容器式部署</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2/</link>
            <category>Docker</category>
            <pubDate>Wed, 13 Feb 2019 15:19:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;docker容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker容器&#34;&gt;#&lt;/a&gt; docker 容器&lt;/h1&gt;
&lt;p&gt;容器是镜像的一个运行实例。所不同的是，镜像是静态的只读文件，而容器带有运行时需要的可写文件层。如果认为虚拟机是模拟运行的一整套操作系统（包括内核、应用运行态环境和其他系统环境）和跑在上面的应用，那么 Docker 容器就是独立运行的一个（或一组）应用，以及它们必需的运行环境。&lt;/p&gt;
&lt;h3 id=&#34;下载容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载容器&#34;&gt;#&lt;/a&gt; 下载容器&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yum -y install docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;启动容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动容器&#34;&gt;#&lt;/a&gt; 启动容器&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;systemctl start docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查看docker状态-绿色启动-灰色停止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看docker状态-绿色启动-灰色停止&#34;&gt;#&lt;/a&gt; 查看 docker 状态 绿色启动 灰色停止&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;systemctl status docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;docker镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker镜像&#34;&gt;#&lt;/a&gt; docker 镜像&lt;/h1&gt;
&lt;h3 id=&#34;下载镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载镜像&#34;&gt;#&lt;/a&gt; 下载镜像&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull 镜像名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查看镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看镜像&#34;&gt;#&lt;/a&gt; 查看镜像&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;dockerfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerfile&#34;&gt;#&lt;/a&gt; Dockerfile&lt;/h1&gt;
&lt;h3 id=&#34;什么是dockerfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是dockerfile&#34;&gt;#&lt;/a&gt; 什么是 dockerfile?&lt;/h3&gt;
&lt;p&gt;Dockerfile 是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker 通过读取 Dockerfile 中的指令自动生成映像。&lt;br&gt;
docker build 命令用于从 Dockerfile 构建映像。可以在 docker build 命令中使用 - f 标志指向文件系统中任何位置的 Dockerfile。&lt;/p&gt;
&lt;h3 id=&#34;dockerfile的基本结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerfile的基本结构&#34;&gt;#&lt;/a&gt; Dockerfile 的基本结构&lt;/h3&gt;
&lt;p&gt;Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。&lt;/p&gt;
&lt;h3 id=&#34;dockerfile文件说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerfile文件说明&#34;&gt;#&lt;/a&gt; Dockerfile 文件说明&lt;/h3&gt;
&lt;p&gt;Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用 RUN，CMD，FROM，EXPOSE，ENV 等指令。&lt;/p&gt;
&lt;h3 id=&#34;from指定基础镜像必须为第一个命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#from指定基础镜像必须为第一个命令&#34;&gt;#&lt;/a&gt; FROM：指定基础镜像，必须为第一个命令&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;格式：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　FROM &amp;lt;image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;示例：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　FROM mysql:5.6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;maintainer-维护者信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#maintainer-维护者信息&#34;&gt;#&lt;/a&gt; MAINTAINER: 维护者信息&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;格式：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MAINTAINER &amp;lt;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;示例：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MAINTAINER Jasper Xu&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MAINTAINER sorex@163.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MAINTAINER Jasper Xu &amp;lt;sorex@163.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</guid>
            <title>简单介绍三方支付</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/02/13/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</link>
            <category>三方支付</category>
            <pubDate>Wed, 13 Feb 2019 15:17:24 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1安装-pip-install-python-alipay-sdk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1安装-pip-install-python-alipay-sdk&#34;&gt;#&lt;/a&gt; 1. 安装 pip install python-alipay-sdk&lt;/h2&gt;
&lt;h2 id=&#34;2-支付宝沙箱地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-支付宝沙箱地址&#34;&gt;#&lt;/a&gt; 2. 支付宝沙箱地址&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcGVuaG9tZS5hbGlwYXkuY29tL3BsYXRmb3JtL2FwcERhaWx5Lmh0bT90YWI9aW5mbw==&#34;&gt;https://openhome.alipay.com/platform/appDaily.htm?tab=info&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/01/29/2ebCSJ4Zwj7HfWB.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;下一步&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/01/29/qnoZ9uShQBHyevX.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/01/29/cAoBjXWNpL9xSn1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/01/29/MQdEYWpemur7T4R.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载支付宝开放平台开发助手地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载支付宝开放平台开发助手地址&#34;&gt;#&lt;/a&gt; 下载支付宝开放平台开发助手地址:&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3AudGIuY24vcm1zcG9ydGFsXzY2ODBfc2VjcmV0X2tleV90b29sc19SU0Ffd2luLnppcA==&#34;&gt;http://p.tb.cn/rmsportal_6680_secret_key_tools_RSA_win.zip&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;private.txt 放置私钥&lt;/p&gt;
&lt;p&gt;public.txt 放置应用公钥&lt;/p&gt;
&lt;p&gt;在 python 中配置好你的公钥 私钥&lt;/p&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app_private_key_string &amp;#x3D; open(os.path.join(key_dir, &amp;quot;app_private_key.pem&amp;quot;)).read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alipay_public_key_string &amp;#x3D; open(os.path.join(key_dir, &amp;quot;alipay_public_key.pem&amp;quot;)).read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alipay &amp;#x3D; AliPay(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    appid&amp;#x3D;2016093000630420,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app_notify_url&amp;#x3D;None,  # 默认回调url&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 我的私钥&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app_private_key_string&amp;#x3D;app_private_key_string,  # 支付宝公钥&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alipay_public_key_string&amp;#x3D;alipay_public_key_string,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sign_type&amp;#x3D;&amp;quot;RSA2&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    debug&amp;#x3D;True,  # 打开调试模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;电脑支付&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class AliPayView(APIView):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def post(self, request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        order_string &amp;#x3D; alipay.api_alipay_trade_page_pay(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            subject&amp;#x3D;&amp;quot;&amp;quot;,  # 支付的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            out_trade_no&amp;#x3D; 0, # 订单，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            total_amount&amp;#x3D;0 , # 支付的钱数 订单总金额&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return_url&amp;#x3D;&amp;quot;&amp;quot;,  # 支付回调的页面&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            notify_url&amp;#x3D;&amp;quot;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BASE_URL &amp;#x3D; &amp;quot;https:&amp;#x2F;&amp;#x2F;openapi.alipaydev.com&amp;#x2F;gateway.do?&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 构建支付链接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return Response(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#39;alipay_url&amp;#39;: BASE_URL + order_string,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/11/13/celery%E5%BC%82%E6%AD%A5/</guid>
            <title>celery异步</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/11/13/celery%E5%BC%82%E6%AD%A5/</link>
            <category>Celery</category>
            <pubDate>Tue, 13 Nov 2018 15:18:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;这是使用celery异步发送短信的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这是使用celery异步发送短信的方法&#34;&gt;#&lt;/a&gt; 这是使用 celery 异步发送短信的方法&lt;/h2&gt;
&lt;h2 id=&#34;安装celery以及redis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装celery以及redis&#34;&gt;#&lt;/a&gt; 安装 celery 以及 redis&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install celery&amp;#x3D;&amp;#x3D;3.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pip install redis&amp;#x3D;&amp;#x3D;2.1.6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;在setting中配置celery&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在setting中配置celery&#34;&gt;#&lt;/a&gt; 在 setting 中配置 celery&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/01/30/aVxySodZzXDBLsb.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置broker消息队列的地址我是在setting中配置的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置broker消息队列的地址我是在setting中配置的&#34;&gt;#&lt;/a&gt; 配置 broker 消息队列的地址 (我是在 setting 中配置的)&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import djcelery&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;djcelery.setup_loader()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BROKER_URL &amp;#x3D; &amp;#39;redis:&amp;#x2F;&amp;#x2F;123.57.61.168:6379&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;创建一个taskspy的文件-写异步代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建一个taskspy的文件-写异步代码&#34;&gt;#&lt;/a&gt; 创建一个 tasks.py 的文件 写异步代码&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from celery.task import task&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from ronglian_sms_sdk import SmsSDK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 这是发送短信的服务部分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ACCOUNT_SID &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AUTH_TOKEN &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;APP_ID &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def sdk(ACCOUNT_SID, AUTH_TOKEN, APP_ID):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return SmsSDK(ACCOUNT_SID, AUTH_TOKEN, APP_ID)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@task  # 升级为异步的标志&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def send(sms, tid&amp;#x3D;1, mobile&amp;#x3D;[], datas&amp;#x3D;[]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # time.sleep(5)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tid &amp;#x3D; tid  # 登录验证模版 默认ID为1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mobile &amp;#x3D; &amp;#39;,&amp;#39;.join(mobile) if len(mobile) &amp;gt; 1 else mobile[0]  # 接收的手机号列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    datas &amp;#x3D; datas&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sms.sendMessage(tid, mobile, datas)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;接下来就可以在view中发送短信了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接下来就可以在view中发送短信了&#34;&gt;#&lt;/a&gt; 接下来就可以在 view 中发送短信了&lt;/h2&gt;
&lt;p&gt;send.delay 发送短信&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sms &amp;#x3D; sdk(ACCOUNT_SID, AUTH_TOKEN, APP_ID)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; random.sample([str(i) for i in range(10)], 6)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;code &amp;#x3D; &amp;#39;&amp;#39;.join(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r.set(phone, code, 60)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;datas &amp;#x3D; [code, &amp;#39;60s&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;send.delay(sms, mobile&amp;#x3D;[phone], datas&amp;#x3D;datas)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 直接加入消息队列，由celery去管理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;需要运行两个终端-一个程序-一个异步的终端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#需要运行两个终端-一个程序-一个异步的终端&#34;&gt;#&lt;/a&gt; 需要运行两个终端 一个程序 一个异步的终端&lt;/h2&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;py manage.py celery worker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
            <title>gitee企业级别的命令</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
            <category>Git</category>
            <pubDate>Fri, 26 Oct 2018 13:50:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;git操作文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git操作文档&#34;&gt;#&lt;/a&gt; git 操作文档&lt;/h1&gt;
&lt;h2 id=&#34;1生成ssh公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1生成ssh公钥&#34;&gt;#&lt;/a&gt; 1. 生成 ssh 公钥&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置用户名 xxx代表用户名（自定义）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git config --global user.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置邮箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git config --global user.email = &lt;span class=&#34;string&#34;&gt;&amp;quot;xxx@xxxx.xxx&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//生成私钥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssh-keygen -t rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssh-keygen -t rsa -C “邮箱”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;出现如下图案，表示公钥生成成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200607110046372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到本地 user / 本机用户名 /.ssh 文件 打开 id_rsa.pub 将私钥复制到用到地方（github ，码云，gitlub）&lt;/p&gt;
&lt;h2 id=&#34;2-克隆代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-克隆代码&#34;&gt;#&lt;/a&gt; 2. 克隆代码&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;使用git clone 命令拉取代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git  clone  xxxx  默认是 master 分支&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;拉取别的分支代码，使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git  clone  -b  dev  xxx &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-更新代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-更新代码&#34;&gt;#&lt;/a&gt; 3. 更新代码&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git pull 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;或者 --rebase 的这里不多做介绍，大家结合实际开始使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git pull --rebase 命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;4-提交代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-提交代码&#34;&gt;#&lt;/a&gt; 4. 提交代码&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将全部改动的文件添加到暂存区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将单个文件改动的文件添加到暂存区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git add 文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//提交本次代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//提交暂存区到文件  需要编辑commit信息 建议使用如下命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git commit &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git commit -m “提交信息”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//推送到远程仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//推送 xxx 代表 分支名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push origin xxx &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;----------------------出现不想提交到内容--------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//撤销本地改动的文件 如改动a.txt  可以使用如下命令撤销改动（注：没有进行add操作）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git checkout -- 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果进行过add 操作 使用以下命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//撤销add 后的提交使用以下命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git reset HEAD 文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5回退版本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5回退版本&#34;&gt;#&lt;/a&gt; 5. 回退版本&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;查看git 提交记录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git log&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git reflog &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下图是 git log &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200607111300773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; 下面介绍下我们开发中最经常使用到代码回退&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//软回退，不会删掉自己本地修改的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git reset --soft commitID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//硬回退，会删掉自己本地修改的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git reset --hard commitID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6分支&#34;&gt;#&lt;/a&gt; 6. 分支&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//查看所有分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  git branch -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//查看当前使用分支(结果列表中前面标*号的表示当前使用分支)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; git branch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;切换分支&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; git checkout 分支名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//创建分支 newFunctionA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git branch newFunctionA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//切换到 newFunctionA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git checkout newFunctionA&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;7-冲突解决&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-冲突解决&#34;&gt;#&lt;/a&gt; 7. 冲突解决&lt;/h2&gt;
&lt;p&gt;情景，aa/a.txt 中的，bb=1&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;修改本地的aa/a.txt中的，bb=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;在服务器也修改了aa/a.txt,bb=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;提交本地的代码到远程仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;在服务器执行git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;此时，发生代码冲突&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; 如果希望保存本地改动并拉下最新服务器代码，手动merge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)要保留服务器上的修改&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git stash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git stash list将当前的Git栈信息打印出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)暂存了本地修改之后，pull内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)还原暂存的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git stash pop stash@&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)解决文件中冲突的的部分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;打开冲突的文件 手动解决冲突&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;终&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终&#34;&gt;#&lt;/a&gt; 终：&lt;/h2&gt;
&lt;p&gt;给大家介绍一个 好的可视化 git 版本工具&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210426135128286.png&#34; alt=&#34;image-20210426135128286&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/</guid>
            <title>python基础2（数据类型）</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/</link>
            <category>Python</category>
            <pubDate>Mon, 15 Oct 2018 20:39:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h1&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;python中常见的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python中常见的数据类型&#34;&gt;#&lt;/a&gt; Python 中常见的数据类型&lt;/h2&gt;
&lt;h3 id=&#34;int整型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#int整型&#34;&gt;#&lt;/a&gt; int 整型：&lt;/h3&gt;
&lt;p&gt;​	可变不可变：&lt;/p&gt;
&lt;p&gt;​				值不可变类型，改变变量值实则是改变了变量的指向&lt;/p&gt;
&lt;p&gt;​	常用方法：&lt;/p&gt;
&lt;p&gt;​				bit_length（） 返回 int 变量所占二进制位数&lt;/p&gt;
&lt;p&gt;​				int ()   强转字符串为 int 类型（但是字符串里只能是数字）&lt;/p&gt;
&lt;h3 id=&#34;set数据具有唯一性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set数据具有唯一性&#34;&gt;#&lt;/a&gt; set：数据具有唯一性&lt;/h3&gt;
&lt;p&gt;​		可变不可变：&lt;/p&gt;
&lt;p&gt;​				set 是可变类型&lt;/p&gt;
&lt;p&gt;​		有序无序：&lt;/p&gt;
&lt;p&gt;​				无序，不可取值&lt;/p&gt;
&lt;p&gt;​		常用法法：&lt;/p&gt;
&lt;p&gt;​			新增：&lt;/p&gt;
&lt;p&gt;​					   s1.add (元素)&lt;/p&gt;
&lt;p&gt;​					   s1.update(s2)&lt;/p&gt;
&lt;p&gt;​			删除：clear () 清空 set&lt;/p&gt;
&lt;p&gt;​					   pop () 随机删除并返回值&lt;/p&gt;
&lt;p&gt;​     				  remove (元素) 删除指定元素&lt;/p&gt;
&lt;p&gt;s1.isdisjoint (s1) 判断是否没有交集，没有返回 True 有返回 Flase&lt;/p&gt;
&lt;p&gt;s1.issubset (s2) 判断是都是 s2 的子集&lt;/p&gt;
&lt;p&gt;s1.issuperset (s2) 判断是否是 s2 的父集&lt;/p&gt;
&lt;h3 id=&#34;dict&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dict&#34;&gt;#&lt;/a&gt; dict&lt;/h3&gt;
&lt;p&gt;​			dict 字典的结构就是‘键 - 值对’，每一个键对应一个值，可以通过键来查询值，dict 字典是无序的&lt;/p&gt;
&lt;p&gt;​			定义的键必须是不可变的，所以可以是数字，字符亦或者是布尔值。&lt;/p&gt;
&lt;p&gt;​			但是值得定义可以使任何数据类型&lt;/p&gt;
&lt;h3 id=&#34;list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt; list&lt;/h3&gt;
&lt;h4 id=&#34;1-append&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-append&#34;&gt;#&lt;/a&gt; 1、append&lt;/h4&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#append用于在列表末尾追加新的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.append(4)                          #the result ： [1, 2, 3, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-count&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-count&#34;&gt;#&lt;/a&gt; 2、count&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#count方法统计某个元素在列表中出现的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;,&amp;#39;cc&amp;#39;,&amp;#39;aa&amp;#39;,&amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(a.count(&amp;#39;aa&amp;#39;))                 #the result ： 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;3-extend&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-extend&#34;&gt;#&lt;/a&gt; 3、extend&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#extend方法可以在列表的末尾一次性追加另一个序列中的多个值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; [4,5,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.extend(b)                          #the result ：[1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;4-index&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-index&#34;&gt;#&lt;/a&gt; 4、index&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#index函数用于从列表中找出某个值第一个匹配项的索引位置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(a.index(1))                   #the result ： 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;5-pop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-pop&#34;&gt;#&lt;/a&gt; 5、pop&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.pop()                             #the result ： [1, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.pop(0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;6-insert&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-insert&#34;&gt;#&lt;/a&gt; 6、insert&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#insert方法用于将对象插入到列表中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.insert(0,&amp;#39;aa&amp;#39;)            #the result : [&amp;#39;aa&amp;#39;, 1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;7-remove&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-remove&#34;&gt;#&lt;/a&gt; 7、remove&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#remove方法用于移除列表中某个值的第一个匹配项&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;,&amp;#39;cc&amp;#39;,&amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.remove(&amp;#39;aa&amp;#39;)                      #the result ： [&amp;#39;bb&amp;#39;, &amp;#39;cc&amp;#39;, &amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;8-reverse&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-reverse&#34;&gt;#&lt;/a&gt; 8、reverse&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#reverse方法将列表中的元素反向存放&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.reverse()                         #the result ： [&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;9-sort&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-sort&#34;&gt;#&lt;/a&gt; 9、sort&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.sort()                           #the result ：[1, 2, 3, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;10-enumerate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-enumerate&#34;&gt;#&lt;/a&gt; 10、enumerate&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;li &amp;#x3D; [11,22,33,44,55,66]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for k,v in enumerate(li, 1):  # 1.代表 k 从哪个数字开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(k,v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;11-ange和xrange&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-ange和xrange&#34;&gt;#&lt;/a&gt; 11、ange 和 xrange&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;指定范围，生成指定的数字&lt;/li&gt;
&lt;li&gt;注：python3 中的 range 类似 python2 中的 xrange，比如 a = range (1,4) : a 返回的不是列表对象而是一个可迭代对象（&amp;lt;class ‘range’&amp;gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#1、range根据start与stop指定的范围以及step设定的步长，生成一个序列：range([start,] stop[, step])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#2、xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(1,10,2):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;12-列表去空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-列表去空&#34;&gt;#&lt;/a&gt; 12、列表去空&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 法1：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;filter(None, your_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 法2：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while &amp;#39;&amp;#39; in your_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    your_list.remove(&amp;#39;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 法3：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;your_list &amp;#x3D; [x for x in your_list if x !&amp;#x3D; &amp;#39;&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;tuple元祖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tuple元祖&#34;&gt;#&lt;/a&gt; tuple 元祖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;** 元组定义：** 元组和列表一样，也是一种序列，唯一的不同是元组不能修改&lt;/p&gt;
&lt;p&gt;​	可变不可变：&lt;/p&gt;
&lt;p&gt;​			不可变，如果元素为可变类型，元素内部值是可修改的&lt;/p&gt;
&lt;p&gt;​	常用方法：&lt;/p&gt;
&lt;p&gt;​			count (x), 返回 x 在元组中出现的次数&lt;/p&gt;
&lt;p&gt;​			index (x,start,end) 返回 x 在元组指定范围的索引值，可指定起终点索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-创建元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建元组&#34;&gt;#&lt;/a&gt; 1 创建元组&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#1. 创建元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#2. 将列表转换成元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-元祖常用方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-元祖常用方式&#34;&gt;#&lt;/a&gt; 2、元祖常用方式&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t&amp;#x3D;(1,2,3,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print( t.count(1) )   # 2 : 元祖中出现 1 的次数为2次&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print( t.index( 3 ) )  # 2 : 元祖中出现三的索引位置为 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;3-列表和元组常用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-列表和元组常用函数&#34;&gt;#&lt;/a&gt; 3、列表和元组常用函数&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;com(x,y)&lt;/td&gt;
&lt;td&gt;比较两个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;len(seq)&lt;/td&gt;
&lt;td&gt;返回序列的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(seq)&lt;/td&gt;
&lt;td&gt;把序列转换成列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(args)&lt;/td&gt;
&lt;td&gt;返回序列或者参数集合中得最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(args)&lt;/td&gt;
&lt;td&gt;返回序列或者参数集合中的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reversed(seq)&lt;/td&gt;
&lt;td&gt;对序列进行反向迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sorted(seq)&lt;/td&gt;
&lt;td&gt;返回已经排列的包含 seq 所有元素的列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(seq)&lt;/td&gt;
&lt;td&gt;把序列转换成元组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;列表和元祖区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表和元祖区别&#34;&gt;#&lt;/a&gt; 列表和元祖区别&lt;/h4&gt;
&lt;h5 id=&#34;1-列表和元祖区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-列表和元祖区别&#34;&gt;#&lt;/a&gt; 1 列表和元祖区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;可变不可变：&lt;/code&gt; 列表可变，元组不可变，除非整体替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储差异：对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组比列表的访问和处理速度快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表不能作为字典的键，而元组可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元祖内存长度大小固定，所以无法进行切片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;放置一样的元素，元祖的内存空间，比列表少 16 个字节&lt;/p&gt;
&lt;h4 id=&#34;举例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#举例&#34;&gt;#&lt;/a&gt; 举例&lt;/h4&gt;
&lt;p&gt;​	式化字符串，格式化字符串后面的（）本质上就是一个元祖&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;%s 年龄是 %d 身高是 %。2f&amp;quot; %(&amp;quot;小明&amp;quot;,18,1.75))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;str记录可描述性事物状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#str记录可描述性事物状态&#34;&gt;#&lt;/a&gt; str：记录可描述性事物状态&lt;/h2&gt;
&lt;p&gt;可变不可变：值不可变类型，改变变量值实则是改变了变量的指向&lt;/p&gt;
&lt;p&gt;str (): 功能：1、工厂函数，i = “egon” &amp;lt;==&amp;gt; i = str (“egon”)&lt;/p&gt;
&lt;p&gt;​                  2、强制类型转换， i = str (555) ==&amp;gt;i = “555”&lt;/p&gt;
&lt;p&gt;常用操作：i = “abcdef”&lt;/p&gt;
&lt;p&gt;索引取值：i [1] = “b”&lt;/p&gt;
&lt;p&gt;切片：i [1:5:2] ==&amp;gt; “bd”&lt;/p&gt;
&lt;p&gt;常用方法：strip (指定去除字符) #去除首尾字符，默认为空格&lt;/p&gt;
&lt;p&gt;replace (old，new，num) #用子字符串替换字符串中的某些字符，可指定替换个数&lt;/p&gt;
&lt;p&gt;split (指定分隔字符，num) # 按指定字符分隔字符串，可指定分隔次数，默认从左到右分隔，从右到左分隔可用 rsplit ()&lt;/p&gt;
&lt;p&gt;str.join (iterable) #将可迭代对象元素按用 str 连接成字符串，注意可迭代对象元素必须是字符串类型，否则报错&lt;/p&gt;
&lt;p&gt;endswith (指定字符，start，end) #判断是否以指定字符开头，可指定索引起终止位置&lt;/p&gt;
&lt;p&gt;startswith ()# 判断是否以指定字符结尾，可指定索引起终止位置&lt;/p&gt;
&lt;p&gt;upper () #字符串字母大写&lt;/p&gt;
&lt;p&gt;lower ()# 字符串字母小写&lt;/p&gt;
&lt;p&gt;isdigit () #判断字符串是否由纯数字组成&lt;/p&gt;
&lt;p&gt;find (指定字符，start，end) # 返回字符在字符串中的起始索引  可指定起始位置索引，找不到返回 - 1&lt;/p&gt;
&lt;p&gt;index (指定字符，start，end)# 返回字符在字符串中起始位置索引，可指定起始位置索引，找不到报错&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;总结：所有对字符串的操作都是返回了新的值，原字符串不改变&lt;/p&gt;
&lt;h2 id=&#34;py2和py3的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#py2和py3的区别&#34;&gt;#&lt;/a&gt; py2 和 py3 的区别&lt;/h2&gt;
&lt;h3 id=&#34;class类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#class类&#34;&gt;#&lt;/a&gt; class 类&lt;/h3&gt;
&lt;p&gt;​		python2 的 class 类需要手动继承 object 父类&lt;/p&gt;
&lt;p&gt;​		python3 的 class 类默认自动继承 object 父类&lt;/p&gt;
&lt;h3 id=&#34;map函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map函数&#34;&gt;#&lt;/a&gt; map 函数&lt;/h3&gt;
&lt;p&gt;​		Python 2 中，map 函数返回 list，&lt;/p&gt;
&lt;p&gt;​		Python 3 中，map 函数返回 iterator。&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; at &lt;span class=&#34;number&#34;&gt;0x7ff5b103d2b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;不支持has_key&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不支持has_key&#34;&gt;#&lt;/a&gt; 不支持 has_key&lt;/h2&gt;
&lt;p&gt;Python 3 中的字典不再支持 has_key 方法&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, person.has_key(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; person&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; person)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, person.has_key(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AttributeError: &amp;#x27;dict&amp;#x27; object has no attribute &amp;#x27;has_key&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;xrange&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xrange&#34;&gt;#&lt;/a&gt; xrange&lt;/h3&gt;
&lt;p&gt;Python 2 中有 range 和 xrange 两个方法。其区别在于，range 返回一个 list，在被调用的时候即返回整个序列；xrange 返回一个 iterator，在每次循环中生成序列的下一个数字。Python 3 中不再支持 xrange 方法，Python 3 中的 range 方法就相当于 Python 2 中的 xrange 方法。&lt;/p&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h3&gt;
&lt;p&gt;Python 2 中捕获异常一般用下面的语法&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ZeroDivisionError, e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(e)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ZeroDivisionError &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(e)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3 中不再支持前一种语法，必须使用 as 关键字。&lt;/p&gt;
&lt;h2 id=&#34;dict字典有序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dict字典有序&#34;&gt;#&lt;/a&gt; dict 字典有序&lt;/h2&gt;
&lt;p&gt;在 python2 中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d = &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;(b=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, a=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; d.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[‘a’, ‘b’]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 python3 中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d = &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;(b=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, a=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(d.keys())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict_keys([‘b’, ‘a’])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python2, python3 的字典 keys 的结果是不一样的。因此，避免使用字典的 keys 的顺序作为有序数组。虽然，如果你一直使用 python2，代码似乎运行正确，但如果移植到 python3，将造成结果错误&lt;/p&gt;
&lt;p&gt;如果必须使用字典，可以使用 collections 模块中的 OrderDict。这能保证在 python2, python3 中一致性。&lt;/p&gt;
&lt;h2 id=&#34;python的可变类型和不可变类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python的可变类型和不可变类型&#34;&gt;#&lt;/a&gt; python 的可变类型和不可变类型&lt;/h2&gt;
&lt;h3 id=&#34;在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型&#34;&gt;#&lt;/a&gt; 在 Python 中主要有两种数据类型，一种是可变数据类型，另一种是不可变数据类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可变类型&lt;/strong&gt;（mutable）：列表，字典（key 是不可变）&lt;br&gt;
&lt;strong&gt;不可变类型&lt;/strong&gt;（unmutable）：数字，字符串，元组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可变不可变，从对象内存地址方向来说，是指内存中的值（value）是否可以被改变。&lt;br&gt;
python 所声明的变量都以对象的形式存在，存在于机器的固定内存之中。&lt;/p&gt;
&lt;h2 id=&#34;深拷贝浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝浅拷贝&lt;/h2&gt;
&lt;h3 id=&#34;浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝&#34;&gt;#&lt;/a&gt; 浅拷贝&lt;/h3&gt;
&lt;p&gt;​	在 python 中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python 并没有拷贝这个对象，而只是拷贝了这个对象的引用叫做浅拷贝&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095328930-1590606034.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;浅拷贝的三种情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝的三种情况&#34;&gt;#&lt;/a&gt; 浅拷贝的三种情况&lt;/h4&gt;
&lt;p&gt;​	在 Python 中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数&lt;/p&gt;
&lt;p&gt;​	切片操作&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = a[:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;工厂函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工厂函数&#34;&gt;#&lt;/a&gt; 工厂函数&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = &lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# (1,2,3,[7,5])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;copycopy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#copycopy&#34;&gt;#&lt;/a&gt; copy.copy()&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; copy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = copy.copy(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# (1,2,3,[7,5])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;深拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝&#34;&gt;#&lt;/a&gt; 深拷贝&lt;/h3&gt;
&lt;p&gt;包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095505004-75839266.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;形参和实参的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形参和实参的区别&#34;&gt;#&lt;/a&gt; &lt;strong&gt;形参和实参的区别&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;形参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形参&#34;&gt;#&lt;/a&gt; 形参：&lt;/h3&gt;
&lt;p&gt;​		就是形式上的参数，可以理解为数学的 X，没有实际的值，通过别人赋值后才有意义。相当于变量。&lt;/p&gt;
&lt;h3 id=&#34;实参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实参&#34;&gt;#&lt;/a&gt; 实参：&lt;/h3&gt;
&lt;p&gt;​		就是实际意义上的参数，是一个实际存在的参数，可以是字符串或是数字等。&lt;/p&gt;
&lt;h2 id=&#34;不定长参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不定长参数&#34;&gt;#&lt;/a&gt; 不定长参数&lt;/h2&gt;
&lt;p&gt;​		在传入额外的参数时可以不用指明参数名，直接传入参数值即可，第二种因为返回的是字典，所以传入时需要指定参数名。&lt;/p&gt;
&lt;p&gt;下面是两个简单的栗子：&lt;/p&gt;
&lt;h3 id=&#34;args&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#args&#34;&gt;#&lt;/a&gt; *args&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;funA&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b, *args&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; funA(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就只输出了 args 这个元祖中的第一个值。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;‘ *&lt;em&gt;kwargs ’形式：&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;funB&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b, **vardict&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(vardict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(vardict[&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;funB(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, l=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, m=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出结果如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;m&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;值传递引用变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#值传递引用变量&#34;&gt;#&lt;/a&gt; 值传递引用变量&lt;/h2&gt;
&lt;p&gt;Python 作为一门动态语言，变量本身的类型是不固定的，因此更加灵活。那 Python 到底是值传递还是引用传递呢？&lt;/p&gt;
&lt;h5 id=&#34;不可变类型传递的是值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可变类型传递的是值&#34;&gt;#&lt;/a&gt; 不可变类型传递的是值&lt;/h5&gt;
&lt;h5 id=&#34;可变类型传递的是引用地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变类型传递的是引用地址&#34;&gt;#&lt;/a&gt; 可变类型传递的是引用地址&lt;/h5&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/09/13/MongoDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
            <title>MongoDB的基础命令</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/09/13/MongoDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
            <category>数据库</category>
            <pubDate>Thu, 13 Sep 2018 17:06:37 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-什么是mongodb数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是mongodb数据库&#34;&gt;#&lt;/a&gt; 1. 什么是 MongoDB 数据库&lt;/h2&gt;
&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;br&gt;
MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;br&gt;
它支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。&lt;br&gt;
Mongo 最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，&lt;br&gt;
几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。&lt;/p&gt;
&lt;h2 id=&#34;2-mongodb基础命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-mongodb基础命令&#34;&gt;#&lt;/a&gt; 2. MongoDB 基础命令&lt;/h2&gt;
&lt;h3 id=&#34;1-显示当前所有数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-显示当前所有数据库&#34;&gt;#&lt;/a&gt; 1 显示当前所有数据库&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;show dbs 或 show databases&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-创建数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-创建数据库&#34;&gt;#&lt;/a&gt; 2 创建数据库&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;use 数据库名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-查看当前所处数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-查看当前所处数据库&#34;&gt;#&lt;/a&gt; 3 查看当前所处数据库&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-显示数据库中所有集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-显示数据库中所有集合&#34;&gt;#&lt;/a&gt; 4 显示数据库中所有集合&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;show collections&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;5-插入数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-插入数据&#34;&gt;#&lt;/a&gt; 5. 插入数据&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.collection.insert(&amp;#123;‘name’:’123’&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;db.表名.insert(&amp;#123;‘name’:’123’&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-查看所有数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-查看所有数据&#34;&gt;#&lt;/a&gt; 6. 查看所有数据&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.表名.find()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;db.表名.find().preety() # 树状型展示&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;7-读取指定数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-读取指定数据&#34;&gt;#&lt;/a&gt; 7. 读取指定数据&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.表名.find_one(&amp;#123;条件&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;8-查看数据库名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-查看数据库名&#34;&gt;#&lt;/a&gt; 8、查看数据库名&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.getName()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;9-删除集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-删除集合&#34;&gt;#&lt;/a&gt; 9. 删除集合&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.集合.drop()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;10删除指定数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10删除指定数据&#34;&gt;#&lt;/a&gt; 10. 删除指定数据&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db.集合.update(&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;张三&amp;#39;&amp;#125;,&amp;#123;$unset:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;张三&amp;#39;&amp;#125;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-python连接mongodb数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-python连接mongodb数据库&#34;&gt;#&lt;/a&gt; 3. python 连接 MongoDB 数据库&lt;/h2&gt;
&lt;h3 id=&#34;1-下载mongodb包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-下载mongodb包&#34;&gt;#&lt;/a&gt; 1. 下载 mongodb 包&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install pymongo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-导包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-导包&#34;&gt;#&lt;/a&gt; 2. 导包&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from pymongo import MongoClient&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client &amp;#x3D; MongoClient(host&amp;#x3D;&amp;#39;127.0.0.1&amp;#39;, port&amp;#x3D;27017)  # 连接本地mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-进入指定数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-进入指定数据库&#34;&gt;#&lt;/a&gt; 3. 进入指定数据库&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;db &amp;#x3D; client.数据库名  # 进入到数据库(没有则自动创建)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-进入指定集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-进入指定集合&#34;&gt;#&lt;/a&gt; 4. 进入指定集合&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;my_set &amp;#x3D; db集合名  # 进入集合(没有则自动创建)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;5-使用命令即可&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-使用命令即可&#34;&gt;#&lt;/a&gt; 5. 使用命令即可&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</guid>
            <title>python中with上下文管理</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</link>
            <category>Python</category>
            <pubDate>Fri, 13 Jul 2018 15:21:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;上下文管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文管理&#34;&gt;#&lt;/a&gt; 上下文管理&lt;/h2&gt;
&lt;h4 id=&#34;with语句是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with语句是什么&#34;&gt;#&lt;/a&gt; with 语句是什么&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;with 是一种上下文管理协议，目的在于从流程图中把 try,except 和 finally 关键字和资源分配释放相关代码统统去掉，简化 try….except….finlally 的处理流程&lt;/li&gt;
&lt;li&gt;所以使用 with 处理的对象必须有 enter () 和 exit () 这两个方法
&lt;ul&gt;
&lt;li&gt;with 通过 enter 方法初始化（enter 方法在语句体执行之前进入运行）&lt;/li&gt;
&lt;li&gt;然后在 exit 中做善后以及处理异常（exit () 方法在语句体执行完毕退出后运行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;with语句使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with语句使用场景&#34;&gt;#&lt;/a&gt; with 语句使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的 “清理” 操作，释放资源&lt;/li&gt;
&lt;li&gt;比如文件使用后自动关闭、线程中锁的自动获取和释放等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;with处理文件操作的实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with处理文件操作的实例&#34;&gt;#&lt;/a&gt; with 处理文件操作的实例&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#39;&amp;#x2F;etc&amp;#x2F;passwd&amp;#39;) as f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for line in f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#39;a2.py&amp;#39;,encoding&amp;#x3D;&amp;#39;utf8&amp;#39;) as f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print( f.readlines())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f &amp;#x3D; open(&amp;#39;a.py&amp;#39;,encoding&amp;#x3D;&amp;#39;utf8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;except Exception as e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(print(e))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/</guid>
            <title>python基础1（内存管理）</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/</link>
            <category>Python</category>
            <pubDate>Sat, 26 May 2018 20:33:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-python基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-python基础&#34;&gt;#&lt;/a&gt; 1、Python 基础&lt;/h1&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;内存管理&amp;gt;引用计数&amp;gt;垃圾回收&amp;gt;分代回收&amp;gt;对象存储&amp;gt;对象缓存&amp;gt;多次赋值（num&amp;#x3D;1,num&amp;#x3D;2)&amp;gt;内存地址&amp;gt;print(id(num1),id(num2))&amp;gt;内存占用&amp;gt;sys.getsizeof(num1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;1-内存管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-内存管理&#34;&gt;#&lt;/a&gt; 1、内存管理&lt;/h1&gt;
&lt;h3 id=&#34;1-引用计数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-引用计数&#34;&gt;#&lt;/a&gt; 1、引用计数&lt;/h3&gt;
&lt;p&gt;​		python 是通过引用计数来保存内存的变量追踪，记录这个对象以及其他使用对象的引用次数 python 内部有一个名叫‘引用计数器’，变量被引用时就会增加一次引用计数。&lt;/p&gt;
&lt;h3 id=&#34;2-垃圾回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-垃圾回收&#34;&gt;#&lt;/a&gt; 2、垃圾回收&lt;/h3&gt;
&lt;p&gt;​		概念：&lt;/p&gt;
&lt;p&gt;​			当 Python 中的对象越来越多时，占据的空间越来越大，启动垃圾回收（garbage colletion）把没用的对象清除。&lt;/p&gt;
&lt;p&gt;​		原理：&lt;/p&gt;
&lt;p&gt;​			当 Python 的某一个对象引用计数变为 0 时，说明没有任何引用指向对象，比如 x = a, 那么 x 的引用计数就变成了 1，当 x 被删除时，a 的引用计数也就变成了 0，那么 a 就会被回收。&lt;/p&gt;
&lt;h3 id=&#34;3-分代回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-分代回收&#34;&gt;#&lt;/a&gt; 3、分代回收&lt;/h3&gt;
&lt;p&gt;​		Python 将所有的对象分为 0 ， 1 ， 2 三代；&lt;/p&gt;
&lt;p&gt;​		所有新创建的对象都是 0 代对象，&lt;/p&gt;
&lt;p&gt;​		当 0 代对象经过垃圾回收，依然存在时，就会被归为下一代对象。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;4-对象存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-对象存储&#34;&gt;#&lt;/a&gt; 4、对象存储&lt;/h3&gt;
&lt;p&gt;​		Python 中所有的变量和函数在存储时都会被当成一个对象&lt;/p&gt;
&lt;p&gt;​		当对象运行时，对象存储在内存里，随时可以调用&lt;/p&gt;
&lt;h3 id=&#34;5-多次赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-多次赋值&#34;&gt;#&lt;/a&gt; 5、多次赋值&lt;/h3&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;num1,num2 &amp;#x3D; 1,1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(id(num1),id(num2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140737224735808 140737224735808&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-内存地址sysgetsizeof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-内存地址sysgetsizeof&#34;&gt;#&lt;/a&gt; 6、内存地址 sys.getsizeof ()&lt;/h3&gt;
&lt;p&gt;​		查看某个变量的引用计数&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(sys.getsizeof(a))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;7-内存占用getrefcount&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-内存占用getrefcount&#34;&gt;#&lt;/a&gt; 7、内存占用 getrefcount ()&lt;/h3&gt;
&lt;p&gt;查看某个变量出现的次数&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(sys.getrefcount(a))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/15/hello-world/</guid>
            <title>Hello World</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/15/hello-world/</link>
            <category>Python</category>
            <pubDate>Sun, 15 Apr 2018 21:19:03 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
            <title>gitee的基础命令</title>
            <link>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
            <category>Git</category>
            <pubDate>Fri, 13 Apr 2018 16:28:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;git 的基础命令，当你上传仓库时会有一个本地仓库，你需要将你的代码先上传到本地仓库，之后再上传到云端&lt;/p&gt;
&lt;p&gt;这个本地仓库是必须要有的，你可以在云端 https://gitee.com/ 创建一个仓库然后克隆或者根据这个来一步步来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210413163208235.png&#34; alt=&#34;image-20210413163208235&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;git的基础命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git的基础命令&#34;&gt;#&lt;/a&gt; git 的基础命令：&lt;/h3&gt;
&lt;p&gt;​		git log 查看 git 合入的记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/883f86986e5d3b8d941f67af3a89d8d0-0.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;git add . 将本地代码全部提交&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/689edba3a19b0cd11c633afc566937e0-3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;git commit -m “合入新的 PUCCH 和小区功率代码” 为本次提交添加注释&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;git push origin master 将提交的代码推送到主分支&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;输入 git branch -a 命令查看 git 库里的所有分支，可以看到，该命令将所有分支都列出来了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;输入 git checkout -t 分支名称，可以切换到该分支&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码&#34;&gt;#&lt;/a&gt; 注意：切换分支后一定记得要 git pull 一下，确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码&lt;/h5&gt;
&lt;p&gt;输入 git merge 要合并的分支 将分支合并&lt;/p&gt;
&lt;h5 id=&#34;注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master&#34;&gt;#&lt;/a&gt; 注意：比如你在 dev 分支写入的代码，你需要合并到 master 主分支里，你就需要切换到 master 分支，输入 git merge dev 就可以合并 dev 分支了，合并之后一定要记得上传三步，git add .   git commit -m ‘注释’   git push origin master&lt;/h5&gt;
 ]]></description>
        </item>
    </channel>
</rss>
