{
    "version": "https://jsonfeed.org/version/1",
    "title": "路宇航的博客 • All posts by \"git\" tag",
    "description": "",
    "home_page_url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io",
    "items": [
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/18/gitee%E5%92%8Cgethub%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "gitee和gethub的区别",
            "date_published": "2019-03-18T07:15:38.000Z",
            "content_html": "<p><img data-src=\"https://img.php.cn/upload/article/000/000/046/5ebb9c81a1c98622.jpg\" alt=\"img\"></p>\n<p>想要自己做一些东西，或者和别人合作开发，就必须要学会使用 Git。最初了解 Git，同时听到了 Github、Gitee（码云），于是想要弄明白三者之间的区别与联系，经过一番搜寻，大致明白 Git 是一种东西，在本地的，可以下载安装。<br>\nGit 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmdpdC1zY20uY29tJTJG\">https://git-scm.com/</span></p>\n<h4 id=\"github与gitee在国内的对比\"><a class=\"markdownIt-Anchor\" href=\"#github与gitee在国内的对比\">#</a> github 与 gitee 在国内的对比</h4>\n<p>GitHub 是全英文并且用户基数多，知名的库也多，而 Gitee 全是中文，而且大部分用户都是国人，优秀的库相对于 GitHub 也少，在国内访问 Github 偶尔会有不稳定情况，而 Gitee 不会出现不稳定情况。</p>\n<h4 id=\"github的特点\"><a class=\"markdownIt-Anchor\" href=\"#github的特点\">#</a> GitHub 的特点</h4>\n<p>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p>GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过 350 万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p>\n<h4 id=\"gitee的特点\"><a class=\"markdownIt-Anchor\" href=\"#gitee的特点\">#</a> Gitee 的特点</h4>\n<p>Gitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/17559159-5fa12b9795227f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp\" alt=\"img\"></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/26/gitee%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "title": "gitee企业级别的命令",
            "date_published": "2018-10-26T05:50:03.000Z",
            "content_html": "<h1 id=\"git操作文档\"><a class=\"markdownIt-Anchor\" href=\"#git操作文档\">#</a> git 操作文档</h1>\n<h2 id=\"1生成ssh公钥\"><a class=\"markdownIt-Anchor\" href=\"#1生成ssh公钥\">#</a> 1. 生成 ssh 公钥</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置用户名 xxx代表用户名（自定义）</span></span><br><span class=\"line\">git config --global user.name = <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//设置邮箱</span></span><br><span class=\"line\">git config --global user.email = <span class=\"string\">&quot;xxx@xxxx.xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//生成私钥</span></span><br><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">或者</span><br><span class=\"line\">ssh-keygen -t rsa -C “邮箱”</span><br></pre></td></tr></table></figure>\n<p>出现如下图案，表示公钥生成成功</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200607110046372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>找到本地 user / 本机用户名 /.ssh 文件 打开 id_rsa.pub 将私钥复制到用到地方（github ，码云，gitlub）</p>\n<h2 id=\"2-克隆代码\"><a class=\"markdownIt-Anchor\" href=\"#2-克隆代码\">#</a> 2. 克隆代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用git clone 命令拉取代码</span><br><span class=\"line\"></span><br><span class=\"line\">git  clone  xxxx  默认是 master 分支</span><br><span class=\"line\">拉取别的分支代码，使用</span><br><span class=\"line\">git  clone  -b  dev  xxx </span><br></pre></td></tr></table></figure>\n<h2 id=\"3-更新代码\"><a class=\"markdownIt-Anchor\" href=\"#3-更新代码\">#</a> 3. 更新代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 命令</span><br><span class=\"line\">或者 --rebase 的这里不多做介绍，大家结合实际开始使用</span><br><span class=\"line\">git pull --rebase 命令</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-提交代码\"><a class=\"markdownIt-Anchor\" href=\"#4-提交代码\">#</a> 4. 提交代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将全部改动的文件添加到暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\">//将单个文件改动的文件添加到暂存区</span></span><br><span class=\"line\">git add 文件名</span><br><span class=\"line\"><span class=\"comment\">//提交本次代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//提交暂存区到文件  需要编辑commit信息 建议使用如下命令</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\">或者</span><br><span class=\"line\">git commit -m “提交信息”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推送到远程仓库</span></span><br><span class=\"line\">git push </span><br><span class=\"line\"><span class=\"comment\">//推送 xxx 代表 分支名称</span></span><br><span class=\"line\">git push origin xxx </span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">----------------------出现不想提交到内容--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤销本地改动的文件 如改动a.txt  可以使用如下命令撤销改动（注：没有进行add操作）</span></span><br><span class=\"line\">git checkout -- 文件</span><br><span class=\"line\"></span><br><span class=\"line\">如果进行过add 操作 使用以下命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤销add 后的提交使用以下命令</span></span><br><span class=\"line\">git reset HEAD 文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"5回退版本\"><a class=\"markdownIt-Anchor\" href=\"#5回退版本\">#</a> 5. 回退版本</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看git 提交记录</span><br><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\">可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span><br><span class=\"line\">git reflog </span><br></pre></td></tr></table></figure>\n<p>下图是 git log <img data-src=\"https://img-blog.csdnimg.cn/20200607111300773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"> 下面介绍下我们开发中最经常使用到代码回退</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软回退，不会删掉自己本地修改的内容</span></span><br><span class=\"line\">git reset --soft commitID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//硬回退，会删掉自己本地修改的内容</span></span><br><span class=\"line\">git reset --hard commitID</span><br></pre></td></tr></table></figure>\n<h2 id=\"6分支\"><a class=\"markdownIt-Anchor\" href=\"#6分支\">#</a> 6. 分支</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看所有分支</span></span><br><span class=\"line\">  git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前使用分支(结果列表中前面标*号的表示当前使用分支)</span></span><br><span class=\"line\">&gt; git branch</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p><strong>切换分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\">//创建分支 newFunctionA</span></span><br><span class=\"line\">git branch newFunctionA</span><br><span class=\"line\"><span class=\"comment\">//切换到 newFunctionA</span></span><br><span class=\"line\">git checkout newFunctionA</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-冲突解决\"><a class=\"markdownIt-Anchor\" href=\"#7-冲突解决\">#</a> 7. 冲突解决</h2>\n<p>情景，aa/a.txt 中的，bb=1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改本地的aa/a.txt中的，bb=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">在服务器也修改了aa/a.txt,bb=<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">提交本地的代码到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在服务器执行git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">此时，发生代码冲突</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> 如果希望保存本地改动并拉下最新服务器代码，手动merge</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span>)要保留服务器上的修改</span><br><span class=\"line\"></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list将当前的Git栈信息打印出来</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>)暂存了本地修改之后，pull内容</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">3</span>)还原暂存的内容</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop stash@&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>)解决文件中冲突的的部分</span><br><span class=\"line\"></span><br><span class=\"line\">打开冲突的文件 手动解决冲突</span><br></pre></td></tr></table></figure>\n<h2 id=\"终\"><a class=\"markdownIt-Anchor\" href=\"#终\">#</a> 终：</h2>\n<p>给大家介绍一个 好的可视化 git 版本工具</p>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210426135128286.png\" alt=\"image-20210426135128286\"></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/13/gitee%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "title": "gitee的基础命令",
            "date_published": "2018-04-13T08:28:32.000Z",
            "content_html": "<p>git 的基础命令，当你上传仓库时会有一个本地仓库，你需要将你的代码先上传到本地仓库，之后再上传到云端</p>\n<p>这个本地仓库是必须要有的，你可以在云端 https://gitee.com/ 创建一个仓库然后克隆或者根据这个来一步步来</p>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210413163208235.png\" alt=\"image-20210413163208235\"></p>\n<h3 id=\"git的基础命令\"><a class=\"markdownIt-Anchor\" href=\"#git的基础命令\">#</a> git 的基础命令：</h3>\n<p>​\t\tgit log 查看 git 合入的记录</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/883f86986e5d3b8d941f67af3a89d8d0-0.png\" alt=\"img\"></p>\n<p>git add . 将本地代码全部提交</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/689edba3a19b0cd11c633afc566937e0-3.png\" alt=\"img\"></p>\n<p>git commit -m “合入新的 PUCCH 和小区功率代码” 为本次提交添加注释</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png\" alt=\"img\"></p>\n<p>git push origin master 将提交的代码推送到主分支</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/f807aad4329760d9e8452dc5b305e7b1-4.png\" alt=\"img\"></p>\n<p>输入 git branch -a 命令查看 git 库里的所有分支，可以看到，该命令将所有分支都列出来了</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-9.png\" alt=\"img\"></p>\n<p>输入 git checkout -t 分支名称，可以切换到该分支</p>\n<p><img data-src=\"https://img.php.cn/upload/article/000/000/052/4c0f371dbff1495452d7c6b3e4d994ec-10.png\" alt=\"img\"></p>\n<h5 id=\"注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码\"><a class=\"markdownIt-Anchor\" href=\"#注意切换分支后一定记得要-git-pull一下确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码\">#</a> 注意：切换分支后一定记得要 git pull 一下，确保你的本地分支和云端分支的代码是一致的然后写完代码提交到云端不会覆盖之前云端更新的代码</h5>\n<p>输入 git merge 要合并的分支 将分支合并</p>\n<h5 id=\"注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master\"><a class=\"markdownIt-Anchor\" href=\"#注意比如你在dev分支写入的代码你需要合并到master主分支里你就需要切换到master分支输入git-merge-dev-就可以合并dev分支了合并之后一定要记得上传三步git-add-git-commit-m-注释-git-push-origin-master\">#</a> 注意：比如你在 dev 分支写入的代码，你需要合并到 master 主分支里，你就需要切换到 master 分支，输入 git merge dev 就可以合并 dev 分支了，合并之后一定要记得上传三步，git add .   git commit -m ‘注释’   git push origin master</h5>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}