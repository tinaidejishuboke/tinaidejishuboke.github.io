<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io</id>
    <title>路宇航的博客 • Posts by &#34;python&#34; tag</title>
    <link href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io" />
    <updated>2021-05-06T01:03:52.000Z</updated>
    <category term="数据库" />
    <category term="Ant Design" />
    <category term="Python" />
    <category term="Celery" />
    <category term="Docker" />
    <category term="Git" />
    <category term="Redis" />
    <category term="Vue" />
    <category term="python" />
    <category term="三方支付" />
    <category term="算法" />
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%805%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%89/</id>
        <title>python基础5（算法）</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%805%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%89/"/>
        <content type="html">&lt;p&gt;算法&lt;/p&gt;
&lt;p&gt;冒泡排序&lt;br&gt;
重复走访要排序的数列，每次比较两个元素，&lt;br&gt;
如果顺序错误那么就将他们交换，没有需要&lt;br&gt;
交换的元素时，就说明数列排序完成了&lt;/p&gt;
</content>
        <category term="Python" />
        <updated>2021-05-06T01:03:52.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/</id>
        <title>python基础4（语法糖）</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;python语法糖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python语法糖&#34;&gt;#&lt;/a&gt; python 语法糖&lt;/h1&gt;
&lt;h4 id=&#34;语法糖说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法糖说明&#34;&gt;#&lt;/a&gt; 语法糖说明&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;计算机语言中特殊的某种语法
这种语法对语言的功能并没有影响
对于程序员有更好的易用性
能够增加程序的可读性
通过这类方式编写出来的代码，即好看又好用,好似糖一般的语法
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;一个简单的例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个简单的例子&#34;&gt;#&lt;/a&gt; 一个简单的例子&lt;/h5&gt;
&lt;p&gt;假设：有 2 个数字，现需要从中得到最大的那个数字。应该如何实现？&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;b = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; b &amp;gt; c:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实还有更多的其它实现方式：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = c &amp;gt; b &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; c &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = c &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; c &amp;gt; b &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = [b, c][c &amp;gt; b]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些都是可以实现我们需求的方法，殊途同归。但是它们在易用性、简洁性、可读性、性能等方面的表现都不一样。那么问题来了！&lt;/p&gt;
&lt;p&gt;哪个才是我们所说的语法糖呢？&lt;/p&gt;
&lt;p&gt;一些常见的语法糖&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; b = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; c = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b, c = c, b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; c &amp;lt; b &amp;lt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] + [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到这些语法，在其它语言里通常不会出现的。但是在 Python 中却神奇的被支持了，所以这些都是当之无愧的 Python 语法糖。&lt;/p&gt;
&lt;p&gt;切片操作&lt;br&gt;
像列表这类可以支持&lt;strong&gt;切片&lt;/strong&gt;操作的对象，则是我最初喜欢 Python 的一个非常重要的原因。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(l[::&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[9, 8, 7, 6, 5, 4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#[1, 3, 5, 7, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;with 语法糖&lt;br&gt;
 with 语法糖实现的是一个上下文管理器，它主要的特点就是帮助我们自动管理上下文的衔接。即在需要的时候传给我们，不需要的时候自动关闭上下文对象。 需要注意的是：使用 with 语法糖是有条件的。即其后跟的对象必须要实现__enter__和__exit__这 2 个魔法属性。具体使用的例子如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;example_2.txt&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(line, end=&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;else 语法糖&lt;br&gt;
 Python 中提供一类 else 的语法，它可以在原有语法基础之上，支持更多一种情况的选择。 主要有 for-else，while-else，try-else。需要注意的是，for-else 和 while-else 需要和 break 语句配合时使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;for end&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; i:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;while end&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; Exception &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;except occured&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;it is fine&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;i am finally&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数相关语法糖&lt;br&gt;
 Python 中函数我们都非常的熟悉，而在函数的使用上却有着与其它语言不同的选择。&lt;/p&gt;
&lt;p&gt;动态参数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_dynamic_args&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;*args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;动态参数&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(kwargs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数的参数与函数相比，其参数会有些不同之处。因为它们在接收参数时使用了不同方式。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;example_dynamic_args(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;xiaowu&amp;#x27;&lt;/span&gt;, age=&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;xiaoming&amp;#x27;&lt;/span&gt;, age: &lt;span class=&#34;string&#34;&gt;&amp;#x27;16&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;example_dynamic_args(*l, **d)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;匿名函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#匿名函数&#34;&gt;#&lt;/a&gt; 匿名函数&lt;/h3&gt;
&lt;p&gt;​		匿名函数在很多的语言中都存在，通常在临时需要一个函数的场景下使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​		Python 中使用 lambda 表达式来实现匿名函数，观察上面的 lambda 表达式。&lt;/p&gt;
&lt;h5 id=&#34;其特点如下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其特点如下&#34;&gt;#&lt;/a&gt; 其特点如下：&lt;/h5&gt;
&lt;p&gt;​	可以接受函数&lt;/p&gt;
&lt;p&gt;​	函数体只有一个表达式&lt;/p&gt;
&lt;p&gt;​	无需显式的 return 语句&lt;/p&gt;
&lt;p&gt;​	整个表达式在一个语法行内实现&lt;/p&gt;
&lt;p&gt;​	lambda 表达式除了一些语法上的限制之外；其它函数该有的特性它都有。比如：支持动态参数。下面是一个使用 lambda 表示的场景：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_dict = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;in_dict:&amp;#x27;&lt;/span&gt;, in_dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out_dict = &lt;span class=&#34;built_in&#34;&gt;sorted&lt;/span&gt;(in_dict.items(), key=&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;out_dict&amp;#x27;&lt;/span&gt;, out_dict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;推导表达式&lt;br&gt;
推导表达式是 Python 中常见的语法糖，在很多的数据处理场景中，我们可能会使用的到。 最常见的就是列表推导表达式，可以用来过滤、处理列表中的子项并输出一个新的列表。除此之外还有几个推导式也是非常好用的。&lt;/p&gt;
&lt;p&gt;列表推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = [i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;comment&#34;&gt;# 列表推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成器推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = (i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# 生成器推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;集合推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = &amp;#123;i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;# 集合推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;print(‘array after:’, array)&lt;br&gt;
 字典推导表达式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in_list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array before:&amp;#x27;&lt;/span&gt;, in_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array = &amp;#123;i: i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;# 字典推导表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;array after:&amp;#x27;&lt;/span&gt;, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同推导式在语法使用上基本一致，只是在返回对象的类型上有所差别。&lt;/p&gt;
&lt;p&gt;yield 表达式&lt;br&gt;
 yield 语法也是 Python 中比较有特点的语法糖，可以说是特有的。虽然其它语言有实现类似机制的功能。 yield 是 Python 中实现 ** 协程 (coroutine)** 的一个重要基础。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_generator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;in_list&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;生成器&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; in_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;装饰器&lt;br&gt;
重要的往往在最后面，装饰器是学习 Python 绕不过去的坎。就像学习 Java 要理解面向对象和设计模式一样。 学习 Python，你就应该要掌握好闭包、生成器、装饰器等相关知识。而对于编写高并发程序时则要掌握协程相关知识。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;example_decorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;func&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;装饰器&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inner&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Python" />
        <updated>2021-05-06T00:16:50.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
        <title>python设计模式之观察者模式</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
        <content type="html">&lt;h1 id=&#34;观察者模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#观察者模式&#34;&gt;#&lt;/a&gt; 观察者模式&lt;/h1&gt;
&lt;p&gt;观察者模式也叫发布订阅模式，** 定义了对象之间一对多依赖，当一个对象改变状态时，这个对象的所有依赖者都会收到通知并按照自己的方式进行更新。** 举个现实生活的例子，&lt;strong&gt;职员们趁老板不在，都在玩着自己的东西，同时观察着前台小姐姐，前台小姐姐在老板回来的时候，发布通知让各同事回到工作状态。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;话不多说上代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#话不多说上代码&#34;&gt;#&lt;/a&gt; 话不多说，上代码&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 看股票的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;StockClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;close_stock_software&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 关闭了股票软件，并开始办公&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 睡着的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SleepingClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;open_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 打开了word，并开始办公&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 玩游戏的职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Play_gamesClerk&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, name&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;open_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;self.name&amp;#125;&lt;/span&gt; 打开了ppt，并开始做作业&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Receptionist&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    actions = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @classmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;attach&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cls, action&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cls.actions.append(action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @classmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;notify&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cls&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;老板回来了，各同事行动...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; actioin &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; cls.actions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            actioin()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实例化职员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c1 = StockClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;张丁介&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c2 = SleepingClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;刘万兴&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c3 = Play_gamesClerk(&lt;span class=&#34;string&#34;&gt;&amp;#x27;张思彤&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 告诉前台小姐姐如何通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c1.close_stock_software)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c2.open_word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.attach(c3.open_word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 前台小姐姐发布通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Receptionist.notify()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#老板回来了，各同事行动...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张丁介 关闭了股票软件，并开始办公&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#刘万兴 打开了word，并开始办公&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张思彤 打开了ppt，并开始做作业&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;四观察者模式的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四观察者模式的优缺点&#34;&gt;#&lt;/a&gt; 四。观察者模式的优缺点&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它使彼此交互的对象保持松耦合&lt;/li&gt;
&lt;li&gt;当需要添加其他对象时，无需对主题和观察者做任何修改&lt;/li&gt;
&lt;li&gt;可以随时添加和删除观察者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现不当可能会增加复杂性，导致性能降低&lt;/li&gt;
&lt;li&gt;通知有时是不可靠的，并导致竞争条件或不一致性&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Python" />
        <updated>2021-04-28T08:04:15.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
        <title>日活人数和高并发</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
        <content type="html">&lt;h1 id=&#34;日活人数和高并发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日活人数和高并发&#34;&gt;#&lt;/a&gt; 日活人数和高并发&lt;/h1&gt;
&lt;h1 id=&#34;redis主从复制与优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis主从复制与优化&#34;&gt;#&lt;/a&gt; Redis 主从复制与优化&lt;/h1&gt;
&lt;h2 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h2&gt;
&lt;p&gt;我们关注主从复制之前，首先要考虑单机有什么问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器故障&lt;/li&gt;
&lt;li&gt;容量瓶颈&lt;/li&gt;
&lt;li&gt;QPS 瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是单节点所遇到的问题，所以这个时候出现了主从复制（一主一从，一主多从）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2020101321485247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用主从复制可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据副本&lt;/li&gt;
&lt;li&gt;扩展读性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 master 可以有多个 slave&lt;/li&gt;
&lt;li&gt;一个 slave 只有一个 master&lt;/li&gt;
&lt;li&gt;数据流向是单向的，master 到 slave&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;主从复制的配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制的配置&#34;&gt;#&lt;/a&gt; 主从复制的配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;两种实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slaveof 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两台机器：主节点：47.11.11.11 从节点 47.22.22.22&lt;/p&gt;
&lt;p&gt;在从节点执行 slaveof 命令&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;47.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt; &amp;gt; slacefof &lt;span class=&#34;number&#34;&gt;47.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.11&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;取消复制：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;47.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.22&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt; &amp;gt; slacefof no one&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;修改配置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;slaveof ip  port    &lt;span class=&#34;comment&#34;&gt;//从节点ip + 端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;slave-read-only yes &lt;span class=&#34;comment&#34;&gt;//开启只做读的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;两种方式比较&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201013220336165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看主从&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt;&amp;gt; info replication&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Replication&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role:master   &lt;span class=&#34;comment&#34;&gt;//主节点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;connected_slaves:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_replid:1d43401335a5343b27b1638fc9843e3a593fc1a7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_replid2:&lt;span class=&#34;number&#34;&gt;0000000000000000000000000000000000000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;master_repl_offset:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;second_repl_offset:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_active:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_size:&lt;span class=&#34;number&#34;&gt;1048576&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_first_byte_offset:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repl_backlog_histlen:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;知识点 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主节点 runID：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 redis 节点启动后都会动态分配一个 40 位的十六进制字符串为运行 ID。运行 ID 的主要作用是来唯一识别 redis 节点，比如从节点保存主节点的运行 ID 识别自已正在复制是哪个主节点。如果只使用 ip+port 的方式识别主节点，那么主节点重启变更了整体数据集（如替换 RDB/AOF 文件），从节点再基于偏移量复制数据将是不安全的，因此当运行 ID 变化后从节点将做全量复制。可以在 info server 命令查看当前节点的运行 ID。&lt;/p&gt;
&lt;p&gt;需要注意的是 redis 关闭再启动，运行的 id 会随之变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;全量复制和部分复制等&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全量复制和部分复制等&#34;&gt;#&lt;/a&gt; 全量复制和部分复制等&lt;/h2&gt;
&lt;h3 id=&#34;全量复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全量复制&#34;&gt;#&lt;/a&gt; 全量复制&lt;/h3&gt;
&lt;p&gt;用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。&lt;/p&gt;
&lt;p&gt;redis2.8+ 全量复制流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2020101322385755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;开销：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bgsave 时间&lt;/li&gt;
&lt;li&gt;RDB 文件网络传输&lt;/li&gt;
&lt;li&gt;从节点清空数据时间&lt;/li&gt;
&lt;li&gt;从节点加载 RDB 时间&lt;/li&gt;
&lt;li&gt;可能的 AOF 重写时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;部分复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#部分复制&#34;&gt;#&lt;/a&gt; 部分复制&lt;/h3&gt;
&lt;p&gt;用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。&lt;/p&gt;
&lt;p&gt;流程： &lt;img data-src=&#34;https://img-blog.csdnimg.cn/20201013224506931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复制偏移量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制偏移量&#34;&gt;#&lt;/a&gt; 复制偏移量：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在 info replication 中的 master_repl_offset 指标中。&lt;/li&gt;
&lt;li&gt;从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量 slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0&lt;/li&gt;
&lt;li&gt;从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在 info replication 中的 slave_repl_offset 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制积压缓冲区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制积压缓冲区&#34;&gt;#&lt;/a&gt; 复制积压缓冲区：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为 1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。 在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量 (offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生产中常见问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产中常见问题&#34;&gt;#&lt;/a&gt; 生产中常见问题&lt;/h2&gt;
&lt;h5 id=&#34;读写分离&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写分离&#34;&gt;#&lt;/a&gt; 读写分离&lt;/h5&gt;
&lt;p&gt;分流到从节点。主节点写数据，从节点读数据，可能遇到读问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制数据延迟&lt;/li&gt;
&lt;li&gt;读到过期数据&lt;/li&gt;
&lt;li&gt;从节点故障&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;主从配置不一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从配置不一致&#34;&gt;#&lt;/a&gt; 主从配置不一致&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;例如 maxmemory 不一致 会导致 丢失数据&lt;/li&gt;
&lt;li&gt;例如数据结构优化参数（例如 hash-max-ziplist-entries）: 内存不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;规避全量复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规避全量复制&#34;&gt;#&lt;/a&gt; 规避全量复制&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;第一次全量复制的时候  - 第一次不可避免，尽量小节点 ，低峰处理&lt;/li&gt;
&lt;li&gt;节点 运行 ID 不匹配  - 故障转移，例如哨兵或者集群&lt;/li&gt;
&lt;li&gt;复制积压缓存区不足  - 增大复制缓存区配置 rel_backlog_size , 网络增强&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;规避复制风暴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规避复制风暴&#34;&gt;#&lt;/a&gt; 规避复制风暴&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;单机器复制风暴（redis&amp;lt;4.0 当 master 宕机重启，会导致该机器下所有 slave 同时产生复制。避免单机部署一套 redis 主从）====》主节点分散多台机&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;最后的注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后的注意事项&#34;&gt;#&lt;/a&gt; 最后的注意事项：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在上述的过程的实现是从库不开启 AOF 持久化情况下，如果从库开启的 AOF 持久化，重启时候依然使用全量复制。&lt;/li&gt;
&lt;li&gt;之前从 master 复制过来的数据并不会丢失，只是不再同步之前 master（如上图的 6379 节点）后续写入的数据&lt;/li&gt;
&lt;li&gt;slaveof 可以用来改变其所属的 master 节点，即重新成为另一台 master 的 slave，但是新的 master 首先就会把从节点的数据全部清除掉&lt;/li&gt;
&lt;li&gt;关于读写分离延时：读写分离 ，master 会一步将数据复制到 slave，如果 slave 发生阻塞，则会延迟 master 数据的写命令，造成数据不一致的问题。------- 一般不考虑这个问题&lt;/li&gt;
&lt;li&gt;读到过期数据：redis 在删除 key 时有两种策略，一种是懒惰型策略，即只有当 redis 操作这个 key 时才会将 key 删除，第二种是定期采样 key 删除 -------- 当 key 数据非常多时，采样速度比不上 key 生成速度会造成很多过期数据没有删除，因为 redis 一般都是在 master 节点（增加删除数据），slave 查询到过期数据也不能删除。会导致 slave 读到过期数据（在 redis3.2 中已经解决）&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="python" />
        <updated>2021-04-22T12:45:14.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
        <title>Tree的概念</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
        <content type="html">&lt;h1 id=&#34;二叉树的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树的概念&#34;&gt;#&lt;/a&gt; 二叉树的概念&lt;/h1&gt;
&lt;h4 id=&#34;概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点&#34;&gt;#&lt;/a&gt; 概念：二叉树是树形结构的一个重要类型，二叉树特点是每个结点最多只能有两棵子树，且有左右之分，就是递归调用自己，定一个根节点，二叉树递归的最后一层，就被称为叶节点。&lt;/h4&gt;
&lt;h2 id=&#34;2-二叉树先序遍历就是先访问自己然后左子树然后右子树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-二叉树先序遍历就是先访问自己然后左子树然后右子树&#34;&gt;#&lt;/a&gt; 2、二叉树先序遍历就是先访问自己，然后左子树，然后右子树。&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215615026.png&#34; alt=&#34;image-20210331215615026&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;0137849256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#0137849256&#34;&gt;#&lt;/a&gt; 0,1,3,7,8,4,9,2,5,6&lt;/h4&gt;
&lt;h2 id=&#34;3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树&#34;&gt;#&lt;/a&gt; 3、二叉树的中序遍历是先访问左子树，然后访问自己，最后右子树。&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215700942.png&#34; alt=&#34;image-20210331215700942&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;7381940526&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7381940526&#34;&gt;#&lt;/a&gt; 7,3,8,1,9,4,0,5,2,6&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215811657.png&#34; alt=&#34;image-20210331215811657&#34;&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <updated>2021-03-31T13:26:37.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
        <title>项目总结</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
        <content type="html">&lt;h1 id=&#34;项目总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目总结&#34;&gt;#&lt;/a&gt; 项目总结&lt;/h1&gt;
&lt;h3 id=&#34;1-前端ant-desgin的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-前端ant-desgin的使用&#34;&gt;#&lt;/a&gt; 1、前端 ant desgin 的使用：&lt;/h3&gt;
&lt;h4 id=&#34;1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可&#34;&gt;#&lt;/a&gt; 1、前端 ant 组件为我们配置好了多种样式，复制粘贴修改参数即可，&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;https:&amp;#x2F;&amp;#x2F;ant.design&amp;#x2F;components&amp;#x2F;button-cn&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-docker的基础命令和操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-docker的基础命令和操作&#34;&gt;#&lt;/a&gt; 2、docker 的基础命令和操作：&lt;/h3&gt;
&lt;h4 id=&#34;1-查看所有镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-查看所有镜像&#34;&gt;#&lt;/a&gt; 1、查看所有镜像：&lt;/h4&gt;
&lt;p&gt;​				docker images&lt;/p&gt;
&lt;h4 id=&#34;2-删除镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-删除镜像&#34;&gt;#&lt;/a&gt; 2、删除镜像：&lt;/h4&gt;
&lt;p&gt;​				docker&lt;/p&gt;
&lt;h4 id=&#34;3-暂停镜像不然无法删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-暂停镜像不然无法删除&#34;&gt;#&lt;/a&gt; 3、暂停镜像（不然无法删除）：&lt;/h4&gt;
&lt;p&gt;​				docker stop $(docker ps -a -q)&lt;/p&gt;
&lt;h4 id=&#34;4-如果想要删除所有container的话再加一个指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-如果想要删除所有container的话再加一个指令&#34;&gt;#&lt;/a&gt; 4、如果想要删除所有 container 的话再加一个指令：&lt;/h4&gt;
&lt;p&gt;​				docker rm $(docker ps -a -q)&lt;/p&gt;
&lt;h4 id=&#34;5-查看当前有些什么images&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-查看当前有些什么images&#34;&gt;#&lt;/a&gt; 5、查看当前有些什么 images&lt;/h4&gt;
&lt;p&gt;​				docker images&lt;/p&gt;
&lt;h4 id=&#34;6-删除images通过image的id来指定删除谁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-删除images通过image的id来指定删除谁&#34;&gt;#&lt;/a&gt; 6、删除 images，通过 image 的 id 来指定删除谁&lt;/h4&gt;
&lt;p&gt;​				docker rmi &lt;image id&gt;&lt;/p&gt;
&lt;h4 id=&#34;7-想要删除untagged-images也就是那些id为none的image的话可以用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-想要删除untagged-images也就是那些id为none的image的话可以用&#34;&gt;#&lt;/a&gt; 7、想要删除 untagged images，也就是那些 id 为&lt;None&gt;的 image 的话可以用&lt;/h4&gt;
&lt;p&gt;​				docker rmi $(docker images | grep “^&lt;none&gt;” | awk “{print $3}”)&lt;/p&gt;
&lt;h4 id=&#34;8-要删除全部image的话&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-要删除全部image的话&#34;&gt;#&lt;/a&gt; 8、要删除全部 image 的话&lt;/h4&gt;
&lt;p&gt;​				docker rmi $(docker images -q)&lt;/p&gt;
&lt;h4 id=&#34;9-启动容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-启动容器&#34;&gt;#&lt;/a&gt; 9、启动容器&lt;/h4&gt;
&lt;p&gt;​				docker run -p 6380:6379 redis&lt;/p&gt;
&lt;h4 id=&#34;10-查看所有容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-查看所有容器&#34;&gt;#&lt;/a&gt; 10、查看所有容器&lt;/h4&gt;
&lt;p&gt;​				docker ps&lt;/p&gt;
&lt;h2 id=&#34;3-redis的时间使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-redis的时间使用&#34;&gt;#&lt;/a&gt; 3、redis 的时间使用&lt;/h2&gt;
&lt;h4 id=&#34;1-给变量赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-给变量赋值&#34;&gt;#&lt;/a&gt; 1、给变量赋值&lt;/h4&gt;
&lt;p&gt;​				set 变量 值&lt;/p&gt;
&lt;h4 id=&#34;2-查看变量的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-查看变量的值&#34;&gt;#&lt;/a&gt; 2、查看变量的值&lt;/h4&gt;
&lt;p&gt;​				get 变量&lt;/p&gt;
&lt;h4 id=&#34;3-给变量附上过期时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-给变量附上过期时间&#34;&gt;#&lt;/a&gt; 3、给变量附上过期时间&lt;/h4&gt;
&lt;p&gt;​				expire 变量 秒速&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;4-数据库连接池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-数据库连接池&#34;&gt;#&lt;/a&gt; 4、数据库连接池&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#数据库链接池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#链接池对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pool = redis.ConnectionPool()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#从链接池获取链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conn = redis.Redis(connection_pool=pool)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conn.&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(conn.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5-异步写文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-异步写文件&#34;&gt;#&lt;/a&gt; 5、异步写文件&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test_demo&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; aiofiles.&lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test.txt&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; fp.write(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Have a good time. Have a good time\n&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据写入成功&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tasks=[asyncio.create_task(test_demo()) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; asyncio.gather(*tasks)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    start = time.time()  &lt;span class=&#34;comment&#34;&gt;# 开始时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asyncio.run(main())  &lt;span class=&#34;comment&#34;&gt;# 执行操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end = time.time()    &lt;span class=&#34;comment&#34;&gt;# 结束时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;#x27;异步执行了:&lt;span class=&#34;subst&#34;&gt;&amp;#123;end - start&amp;#125;&lt;/span&gt;秒&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6-悦哥翻墙软件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-悦哥翻墙软件&#34;&gt;#&lt;/a&gt; 6、悦哥翻墙软件&lt;/h2&gt;
&lt;p&gt;​		&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbXkubmV0d29yay9wcm9kdWN0L2luZGV4&#34;&gt;https://cmy.network/product/index&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-队列&#34;&gt;#&lt;/a&gt; 7、队列&lt;/h2&gt;
&lt;h4 id=&#34;1-队列的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-队列的概念&#34;&gt;#&lt;/a&gt; 1、队列的概念&lt;/h4&gt;
&lt;p&gt;​				队列是一种特殊的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTYlODAlQTclRTglQTElQTgvMzIyODA4MQ==&#34;&gt;线性表&lt;/span&gt;，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后				端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队				尾，进行删除操作的端称为队头。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyQueue&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,keyname:&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;,**redis_kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.__db = redis.Redis(**redis_kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.key = keyname&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.s = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#添加数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,x:&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#self.s.append(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#添加队列数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      self.__db.rpush(self.key,x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#删除数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pop&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.s.pop(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;peek&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#return self.s[0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.__db.lpop(self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;#判断是否执行完毕&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;empty&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;(self.s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;8-中间件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-中间件&#34;&gt;#&lt;/a&gt; 8、中间件&lt;/h2&gt;
&lt;h4 id=&#34;1-概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-概念&#34;&gt;#&lt;/a&gt; 1、概念&lt;/h4&gt;
&lt;p&gt;​					中间件是一个 Python 程序员用来处理 Django 的请求和响应的框架级别的钩子，它是一个轻量，低级					别的插件系统，用于全局范围内改变 Django 的输入，输出。中间件可以在系统输入之前进行输入，					在系统输出之前进行输出&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; django.utils.deprecation &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; MiddlewareMixin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; z_Userapp.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; JurisdictionModel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 中间件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Middle&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;MiddlewareMixin&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;process_request&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 获取uid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uid=request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;uid&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 如果存在，则查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; uid:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# user=JurisdictionModel.objects.filter(user_id=uid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.level=&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(uid) &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你需要在 settings.py 中的 MIDDLEWARE 中进行注册才可以使用&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;应用名.middleware.你的中间件类名&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;9-七牛云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-七牛云&#34;&gt;#&lt;/a&gt; 9、七牛云&lt;/h2&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; qiniu &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Auth&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;qiniu_token&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    qn = Auth(&lt;span class=&#34;string&#34;&gt;&amp;#x27;vkoJGPbnvO-zwjVX3DcVJnXtpt9gclvnH5N_A4he&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Mab055XtHiEYRRoyLEn02JBsY2kRnDAsmonQdhiT&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 指定上传空间, 返回token值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token = qn.upload_token(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shixun-p8&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpTokenView&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        七牛云token接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; JsonResponse(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;token&amp;#x27;&lt;/span&gt;: qiniu_token()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;10-又拍云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-又拍云&#34;&gt;#&lt;/a&gt; 10、又拍云&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; upyun&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义文件上传类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UploadFile&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        file = request.FILES.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        up = upyun.UpYun(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shixun-p8&amp;#x27;&lt;/span&gt;, username=&lt;span class=&#34;string&#34;&gt;&amp;#x27;coisnini&amp;#x27;&lt;/span&gt;, password=&lt;span class=&#34;string&#34;&gt;&amp;#x27;5LQiEB6YUY4aTIHQDNLMPpVf2QpnNeft&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;x-gmkerl-rotate&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;180&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; chunk &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; file.chunks():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = up.put(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/touxiang1.jpg&amp;#x27;&lt;/span&gt;, chunk, checksum=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 返回结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; HttpResponse(json.dumps(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;filename&amp;#x27;&lt;/span&gt;: file.name&amp;#125;), content_type=&lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;11-mongodb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-mongodb&#34;&gt;#&lt;/a&gt; 11、MongoDB&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; z_Userapp.MyMongoDB &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; MyMonge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 连接MongoDB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client = MyMonge(&lt;span class=&#34;string&#34;&gt;&amp;#x27;z_Cate&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;CateTemplate&amp;#x27;&lt;/span&gt;, **&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;host&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;127.0.0.1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;port&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27017&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取MongoDB数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GetMongo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;APIView&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 进入数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# db = client.z_Cate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# zst = db.CateTemplate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt; = request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wid = WorkOrderModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; wid.pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = client.find(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;wid&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(wid.&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = client.find(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;wid&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(wid.pid)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Response(&lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(data[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;12-工单递归死循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-工单递归死循环&#34;&gt;#&lt;/a&gt; 12、工单递归死循环&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;xTree&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;datas&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lists = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tree = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parent_id = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; datas:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tree[item[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]] = item&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    root = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; datas:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        obj = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;pid&amp;#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root = tree[obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lists.append(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            parent_id = obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;pid&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; tree[parent_id]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tree[parent_id][&lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt;] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tree[parent_id][&lt;span class=&#34;string&#34;&gt;&amp;#x27;childlist&amp;#x27;&lt;/span&gt;].append(tree[obj[&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lists&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;13-三方登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-三方登录&#34;&gt;#&lt;/a&gt; 13、三方登录&lt;/h2&gt;
&lt;h4 id=&#34;导报&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导报&#34;&gt;#&lt;/a&gt; 导报&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hmac&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; base64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; hashlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sha256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-码云&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-码云&#34;&gt;#&lt;/a&gt; 1、码云&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Gitee&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/oauth/authorize?client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;amp;response_type=code&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GiteeBack&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;View&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        code = request.GET.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.post(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/oauth/token?grant_type=authorization_code&amp;amp;code=%s&amp;amp;client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;amp;client_secret=ec39df1740d798ac832ab3df1ac99aedd04459c6b7d552f43099ef24273554cc&amp;quot;&lt;/span&gt; % code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;https://gitee.com/api/v5/user?access_token=2b8c4824659611c8a920631bb5684008&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name = json.loads(r.text)[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user = UserModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(username=name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; user:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://127.0.0.1:8080/myback&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user = UserModel(username=&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;gitee_&amp;quot;&lt;/span&gt; + name))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            user = UserModel.objects.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(username=name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redirect(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://127.0.0.1:8080/myback&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-钉钉&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-钉钉&#34;&gt;#&lt;/a&gt; 2、钉钉&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 钉钉三方登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def ding_back(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    appid &amp;#x3D; &amp;#39;dingoar91fvryq6pugb1nx&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    redirect_uri &amp;#x3D; &amp;#39;http:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;ding_back&amp;#x2F;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 获取code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code &amp;#x3D; request.GET.get(&amp;quot;code&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t &amp;#x3D; time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timestamp &amp;#x3D; str((int(round(t * 1000))))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 密钥&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    appSecret &amp;#x3D; &amp;#39;Njh7SJwIE-MOoZa9P7nxgFf18iNOzCS2KvUaBybQ1xjTszXRA96XDvrTgttDHhVf&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 构造签名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    signature &amp;#x3D; base64.b64encode(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hmac.new(appSecret.encode(&amp;#39;utf-8&amp;#39;), timestamp.encode(&amp;#39;utf-8&amp;#39;), digestmod&amp;#x3D;sha256).digest())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 请求接口，换取钉钉用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payload &amp;#x3D; &amp;#123;&amp;#39;tmp_auth_code&amp;#39;: code&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    headers &amp;#x3D; &amp;#123;&amp;#39;Content-Type&amp;#39;: &amp;#39;application&amp;#x2F;json&amp;#39;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 导requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res &amp;#x3D; requests.post(&amp;#39;https:&amp;#x2F;&amp;#x2F;oapi.dingtalk.com&amp;#x2F;sns&amp;#x2F;getuserinfo_bycode?signature&amp;#x3D;&amp;#39; + urllib.parse.quote(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        signature.decode(&amp;quot;utf-8&amp;quot;)) + &amp;quot;&amp;amp;timestamp&amp;#x3D;&amp;quot; + timestamp + &amp;quot;&amp;amp;accessKey&amp;#x3D;dingoar91fvryq6pugb1nx&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        data&amp;#x3D;json.dumps(payload), headers&amp;#x3D;headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    re_dict &amp;#x3D; json.loads(res.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(re_dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 判断是否为第一次登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user &amp;#x3D; UserModel.objects.filter(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;])).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sina_id &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user_id &amp;#x3D; &amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if user:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 代表曾经用过钉钉登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sina_id &amp;#x3D; user.username&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user_id &amp;#x3D; user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 代表首次登录，入库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user &amp;#x3D; UserModel(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;]), password&amp;#x3D;&amp;#39;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 保存入库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sina_id &amp;#x3D; str(re_dict.get(&amp;#39;user_info&amp;#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 查询用户id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user &amp;#x3D; UserModel.objects.filter(username&amp;#x3D;str(&amp;quot;dingding_&amp;quot; + re_dict[&amp;#39;user_info&amp;#39;][&amp;#39;nick&amp;#39;])).first()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        user_id &amp;#x3D; user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 进行跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return redirect(&amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1:8080&amp;#x2F;myback?sina_id&amp;#x3D;&amp;quot; + str(sina_id) + &amp;quot;&amp;amp;uid&amp;#x3D;&amp;quot; + str(user_id))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Python" />
        <updated>2019-03-31T07:03:42.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/</id>
        <title>python基础2（数据类型）</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h1&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;python中常见的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python中常见的数据类型&#34;&gt;#&lt;/a&gt; Python 中常见的数据类型&lt;/h2&gt;
&lt;h3 id=&#34;int整型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#int整型&#34;&gt;#&lt;/a&gt; int 整型：&lt;/h3&gt;
&lt;p&gt;​	可变不可变：&lt;/p&gt;
&lt;p&gt;​				值不可变类型，改变变量值实则是改变了变量的指向&lt;/p&gt;
&lt;p&gt;​	常用方法：&lt;/p&gt;
&lt;p&gt;​				bit_length（） 返回 int 变量所占二进制位数&lt;/p&gt;
&lt;p&gt;​				int ()   强转字符串为 int 类型（但是字符串里只能是数字）&lt;/p&gt;
&lt;h3 id=&#34;set数据具有唯一性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set数据具有唯一性&#34;&gt;#&lt;/a&gt; set：数据具有唯一性&lt;/h3&gt;
&lt;p&gt;​		可变不可变：&lt;/p&gt;
&lt;p&gt;​				set 是可变类型&lt;/p&gt;
&lt;p&gt;​		有序无序：&lt;/p&gt;
&lt;p&gt;​				无序，不可取值&lt;/p&gt;
&lt;p&gt;​		常用法法：&lt;/p&gt;
&lt;p&gt;​			新增：&lt;/p&gt;
&lt;p&gt;​					   s1.add (元素)&lt;/p&gt;
&lt;p&gt;​					   s1.update(s2)&lt;/p&gt;
&lt;p&gt;​			删除：clear () 清空 set&lt;/p&gt;
&lt;p&gt;​					   pop () 随机删除并返回值&lt;/p&gt;
&lt;p&gt;​     				  remove (元素) 删除指定元素&lt;/p&gt;
&lt;p&gt;s1.isdisjoint (s1) 判断是否没有交集，没有返回 True 有返回 Flase&lt;/p&gt;
&lt;p&gt;s1.issubset (s2) 判断是都是 s2 的子集&lt;/p&gt;
&lt;p&gt;s1.issuperset (s2) 判断是否是 s2 的父集&lt;/p&gt;
&lt;h3 id=&#34;dict&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dict&#34;&gt;#&lt;/a&gt; dict&lt;/h3&gt;
&lt;p&gt;​			dict 字典的结构就是‘键 - 值对’，每一个键对应一个值，可以通过键来查询值，dict 字典是无序的&lt;/p&gt;
&lt;p&gt;​			定义的键必须是不可变的，所以可以是数字，字符亦或者是布尔值。&lt;/p&gt;
&lt;p&gt;​			但是值得定义可以使任何数据类型&lt;/p&gt;
&lt;h3 id=&#34;list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt; list&lt;/h3&gt;
&lt;h4 id=&#34;1-append&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-append&#34;&gt;#&lt;/a&gt; 1、append&lt;/h4&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#append用于在列表末尾追加新的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.append(4)                          #the result ： [1, 2, 3, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-count&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-count&#34;&gt;#&lt;/a&gt; 2、count&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#count方法统计某个元素在列表中出现的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;,&amp;#39;cc&amp;#39;,&amp;#39;aa&amp;#39;,&amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(a.count(&amp;#39;aa&amp;#39;))                 #the result ： 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;3-extend&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-extend&#34;&gt;#&lt;/a&gt; 3、extend&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#extend方法可以在列表的末尾一次性追加另一个序列中的多个值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; [4,5,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.extend(b)                          #the result ：[1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;4-index&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-index&#34;&gt;#&lt;/a&gt; 4、index&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#index函数用于从列表中找出某个值第一个匹配项的索引位置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(a.index(1))                   #the result ： 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;5-pop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-pop&#34;&gt;#&lt;/a&gt; 5、pop&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.pop()                             #the result ： [1, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.pop(0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;6-insert&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-insert&#34;&gt;#&lt;/a&gt; 6、insert&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#insert方法用于将对象插入到列表中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.insert(0,&amp;#39;aa&amp;#39;)            #the result : [&amp;#39;aa&amp;#39;, 1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;7-remove&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-remove&#34;&gt;#&lt;/a&gt; 7、remove&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#remove方法用于移除列表中某个值的第一个匹配项&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;,&amp;#39;cc&amp;#39;,&amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.remove(&amp;#39;aa&amp;#39;)                      #the result ： [&amp;#39;bb&amp;#39;, &amp;#39;cc&amp;#39;, &amp;#39;aa&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;8-reverse&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-reverse&#34;&gt;#&lt;/a&gt; 8、reverse&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#reverse方法将列表中的元素反向存放&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.reverse()                         #the result ： [&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;9-sort&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-sort&#34;&gt;#&lt;/a&gt; 9、sort&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.sort()                           #the result ：[1, 2, 3, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;10-enumerate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-enumerate&#34;&gt;#&lt;/a&gt; 10、enumerate&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;li &amp;#x3D; [11,22,33,44,55,66]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for k,v in enumerate(li, 1):  # 1.代表 k 从哪个数字开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(k,v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;11-ange和xrange&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-ange和xrange&#34;&gt;#&lt;/a&gt; 11、ange 和 xrange&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;指定范围，生成指定的数字&lt;/li&gt;
&lt;li&gt;注：python3 中的 range 类似 python2 中的 xrange，比如 a = range (1,4) : a 返回的不是列表对象而是一个可迭代对象（&amp;lt;class ‘range’&amp;gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#1、range根据start与stop指定的范围以及step设定的步长，生成一个序列：range([start,] stop[, step])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#2、xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(1,10,2):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;12-列表去空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-列表去空&#34;&gt;#&lt;/a&gt; 12、列表去空&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 法1：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;filter(None, your_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 法2：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while &amp;#39;&amp;#39; in your_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    your_list.remove(&amp;#39;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 法3：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;your_list &amp;#x3D; [x for x in your_list if x !&amp;#x3D; &amp;#39;&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;tuple元祖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tuple元祖&#34;&gt;#&lt;/a&gt; tuple 元祖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;** 元组定义：** 元组和列表一样，也是一种序列，唯一的不同是元组不能修改&lt;/p&gt;
&lt;p&gt;​	可变不可变：&lt;/p&gt;
&lt;p&gt;​			不可变，如果元素为可变类型，元素内部值是可修改的&lt;/p&gt;
&lt;p&gt;​	常用方法：&lt;/p&gt;
&lt;p&gt;​			count (x), 返回 x 在元组中出现的次数&lt;/p&gt;
&lt;p&gt;​			index (x,start,end) 返回 x 在元组指定范围的索引值，可指定起终点索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-创建元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建元组&#34;&gt;#&lt;/a&gt; 1 创建元组&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#1. 创建元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#2. 将列表转换成元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-元祖常用方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-元祖常用方式&#34;&gt;#&lt;/a&gt; 2、元祖常用方式&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t&amp;#x3D;(1,2,3,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print( t.count(1) )   # 2 : 元祖中出现 1 的次数为2次&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print( t.index( 3 ) )  # 2 : 元祖中出现三的索引位置为 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;3-列表和元组常用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-列表和元组常用函数&#34;&gt;#&lt;/a&gt; 3、列表和元组常用函数&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;com(x,y)&lt;/td&gt;
&lt;td&gt;比较两个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;len(seq)&lt;/td&gt;
&lt;td&gt;返回序列的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(seq)&lt;/td&gt;
&lt;td&gt;把序列转换成列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(args)&lt;/td&gt;
&lt;td&gt;返回序列或者参数集合中得最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(args)&lt;/td&gt;
&lt;td&gt;返回序列或者参数集合中的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reversed(seq)&lt;/td&gt;
&lt;td&gt;对序列进行反向迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sorted(seq)&lt;/td&gt;
&lt;td&gt;返回已经排列的包含 seq 所有元素的列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(seq)&lt;/td&gt;
&lt;td&gt;把序列转换成元组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;列表和元祖区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表和元祖区别&#34;&gt;#&lt;/a&gt; 列表和元祖区别&lt;/h4&gt;
&lt;h5 id=&#34;1-列表和元祖区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-列表和元祖区别&#34;&gt;#&lt;/a&gt; 1 列表和元祖区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;可变不可变：&lt;/code&gt; 列表可变，元组不可变，除非整体替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储差异：对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组比列表的访问和处理速度快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表不能作为字典的键，而元组可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元祖内存长度大小固定，所以无法进行切片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;放置一样的元素，元祖的内存空间，比列表少 16 个字节&lt;/p&gt;
&lt;h4 id=&#34;举例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#举例&#34;&gt;#&lt;/a&gt; 举例&lt;/h4&gt;
&lt;p&gt;​	式化字符串，格式化字符串后面的（）本质上就是一个元祖&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;%s 年龄是 %d 身高是 %。2f&amp;quot; %(&amp;quot;小明&amp;quot;,18,1.75))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;str记录可描述性事物状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#str记录可描述性事物状态&#34;&gt;#&lt;/a&gt; str：记录可描述性事物状态&lt;/h2&gt;
&lt;p&gt;可变不可变：值不可变类型，改变变量值实则是改变了变量的指向&lt;/p&gt;
&lt;p&gt;str (): 功能：1、工厂函数，i = “egon” &amp;lt;==&amp;gt; i = str (“egon”)&lt;/p&gt;
&lt;p&gt;​                  2、强制类型转换， i = str (555) ==&amp;gt;i = “555”&lt;/p&gt;
&lt;p&gt;常用操作：i = “abcdef”&lt;/p&gt;
&lt;p&gt;索引取值：i [1] = “b”&lt;/p&gt;
&lt;p&gt;切片：i [1:5:2] ==&amp;gt; “bd”&lt;/p&gt;
&lt;p&gt;常用方法：strip (指定去除字符) #去除首尾字符，默认为空格&lt;/p&gt;
&lt;p&gt;replace (old，new，num) #用子字符串替换字符串中的某些字符，可指定替换个数&lt;/p&gt;
&lt;p&gt;split (指定分隔字符，num) # 按指定字符分隔字符串，可指定分隔次数，默认从左到右分隔，从右到左分隔可用 rsplit ()&lt;/p&gt;
&lt;p&gt;str.join (iterable) #将可迭代对象元素按用 str 连接成字符串，注意可迭代对象元素必须是字符串类型，否则报错&lt;/p&gt;
&lt;p&gt;endswith (指定字符，start，end) #判断是否以指定字符开头，可指定索引起终止位置&lt;/p&gt;
&lt;p&gt;startswith ()# 判断是否以指定字符结尾，可指定索引起终止位置&lt;/p&gt;
&lt;p&gt;upper () #字符串字母大写&lt;/p&gt;
&lt;p&gt;lower ()# 字符串字母小写&lt;/p&gt;
&lt;p&gt;isdigit () #判断字符串是否由纯数字组成&lt;/p&gt;
&lt;p&gt;find (指定字符，start，end) # 返回字符在字符串中的起始索引  可指定起始位置索引，找不到返回 - 1&lt;/p&gt;
&lt;p&gt;index (指定字符，start，end)# 返回字符在字符串中起始位置索引，可指定起始位置索引，找不到报错&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;总结：所有对字符串的操作都是返回了新的值，原字符串不改变&lt;/p&gt;
&lt;h2 id=&#34;py2和py3的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#py2和py3的区别&#34;&gt;#&lt;/a&gt; py2 和 py3 的区别&lt;/h2&gt;
&lt;h3 id=&#34;class类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#class类&#34;&gt;#&lt;/a&gt; class 类&lt;/h3&gt;
&lt;p&gt;​		python2 的 class 类需要手动继承 object 父类&lt;/p&gt;
&lt;p&gt;​		python3 的 class 类默认自动继承 object 父类&lt;/p&gt;
&lt;h3 id=&#34;map函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map函数&#34;&gt;#&lt;/a&gt; map 函数&lt;/h3&gt;
&lt;p&gt;​		Python 2 中，map 函数返回 list，&lt;/p&gt;
&lt;p&gt;​		Python 3 中，map 函数返回 iterator。&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; at &lt;span class=&#34;number&#34;&gt;0x7ff5b103d2b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;不支持has_key&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不支持has_key&#34;&gt;#&lt;/a&gt; 不支持 has_key&lt;/h2&gt;
&lt;p&gt;Python 3 中的字典不再支持 has_key 方法&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, person.has_key(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; person&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; person)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person has key &amp;quot;age&amp;quot;:  True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person has key \&amp;quot;age\&amp;quot;: &amp;quot;&lt;/span&gt;, person.has_key(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AttributeError: &amp;#x27;dict&amp;#x27; object has no attribute &amp;#x27;has_key&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;xrange&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xrange&#34;&gt;#&lt;/a&gt; xrange&lt;/h3&gt;
&lt;p&gt;Python 2 中有 range 和 xrange 两个方法。其区别在于，range 返回一个 list，在被调用的时候即返回整个序列；xrange 返回一个 iterator，在每次循环中生成序列的下一个数字。Python 3 中不再支持 xrange 方法，Python 3 中的 range 方法就相当于 Python 2 中的 xrange 方法。&lt;/p&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h3&gt;
&lt;p&gt;Python 2 中捕获异常一般用下面的语法&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ZeroDivisionError, e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(e)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ZeroDivisionError &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(e)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3 中不再支持前一种语法，必须使用 as 关键字。&lt;/p&gt;
&lt;h2 id=&#34;dict字典有序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dict字典有序&#34;&gt;#&lt;/a&gt; dict 字典有序&lt;/h2&gt;
&lt;p&gt;在 python2 中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d = &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;(b=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, a=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; d.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[‘a’, ‘b’]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 python3 中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d = &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;(b=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, a=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(d.keys())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict_keys([‘b’, ‘a’])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python2, python3 的字典 keys 的结果是不一样的。因此，避免使用字典的 keys 的顺序作为有序数组。虽然，如果你一直使用 python2，代码似乎运行正确，但如果移植到 python3，将造成结果错误&lt;/p&gt;
&lt;p&gt;如果必须使用字典，可以使用 collections 模块中的 OrderDict。这能保证在 python2, python3 中一致性。&lt;/p&gt;
&lt;h2 id=&#34;python的可变类型和不可变类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python的可变类型和不可变类型&#34;&gt;#&lt;/a&gt; python 的可变类型和不可变类型&lt;/h2&gt;
&lt;h3 id=&#34;在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型&#34;&gt;#&lt;/a&gt; 在 Python 中主要有两种数据类型，一种是可变数据类型，另一种是不可变数据类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可变类型&lt;/strong&gt;（mutable）：列表，字典（key 是不可变）&lt;br&gt;
&lt;strong&gt;不可变类型&lt;/strong&gt;（unmutable）：数字，字符串，元组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可变不可变，从对象内存地址方向来说，是指内存中的值（value）是否可以被改变。&lt;br&gt;
python 所声明的变量都以对象的形式存在，存在于机器的固定内存之中。&lt;/p&gt;
&lt;h2 id=&#34;深拷贝浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝浅拷贝&lt;/h2&gt;
&lt;h3 id=&#34;浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝&#34;&gt;#&lt;/a&gt; 浅拷贝&lt;/h3&gt;
&lt;p&gt;​	在 python 中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python 并没有拷贝这个对象，而只是拷贝了这个对象的引用叫做浅拷贝&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095328930-1590606034.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;浅拷贝的三种情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝的三种情况&#34;&gt;#&lt;/a&gt; 浅拷贝的三种情况&lt;/h4&gt;
&lt;p&gt;​	在 Python 中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数&lt;/p&gt;
&lt;p&gt;​	切片操作&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = a[:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;工厂函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工厂函数&#34;&gt;#&lt;/a&gt; 工厂函数&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = &lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# (1,2,3,[7,5])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;copycopy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#copycopy&#34;&gt;#&lt;/a&gt; copy.copy()&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; copy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = copy.copy(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a) &lt;span class=&#34;comment&#34;&gt;# (1,2,3,[7,5])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b) &lt;span class=&#34;comment&#34;&gt;# [1,2,3,[7,5]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;深拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝&#34;&gt;#&lt;/a&gt; 深拷贝&lt;/h3&gt;
&lt;p&gt;包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095505004-75839266.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;形参和实参的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形参和实参的区别&#34;&gt;#&lt;/a&gt; &lt;strong&gt;形参和实参的区别&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;形参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形参&#34;&gt;#&lt;/a&gt; 形参：&lt;/h3&gt;
&lt;p&gt;​		就是形式上的参数，可以理解为数学的 X，没有实际的值，通过别人赋值后才有意义。相当于变量。&lt;/p&gt;
&lt;h3 id=&#34;实参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实参&#34;&gt;#&lt;/a&gt; 实参：&lt;/h3&gt;
&lt;p&gt;​		就是实际意义上的参数，是一个实际存在的参数，可以是字符串或是数字等。&lt;/p&gt;
&lt;h2 id=&#34;不定长参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不定长参数&#34;&gt;#&lt;/a&gt; 不定长参数&lt;/h2&gt;
&lt;p&gt;​		在传入额外的参数时可以不用指明参数名，直接传入参数值即可，第二种因为返回的是字典，所以传入时需要指定参数名。&lt;/p&gt;
&lt;p&gt;下面是两个简单的栗子：&lt;/p&gt;
&lt;h3 id=&#34;args&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#args&#34;&gt;#&lt;/a&gt; *args&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;funA&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b, *args&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; funA(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就只输出了 args 这个元祖中的第一个值。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;‘ *&lt;em&gt;kwargs ’形式：&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;funB&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b, **vardict&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(vardict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(vardict[&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;funB(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, l=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, m=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出结果如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;m&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;值传递引用变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#值传递引用变量&#34;&gt;#&lt;/a&gt; 值传递引用变量&lt;/h2&gt;
&lt;p&gt;Python 作为一门动态语言，变量本身的类型是不固定的，因此更加灵活。那 Python 到底是值传递还是引用传递呢？&lt;/p&gt;
&lt;h5 id=&#34;不可变类型传递的是值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可变类型传递的是值&#34;&gt;#&lt;/a&gt; 不可变类型传递的是值&lt;/h5&gt;
&lt;h5 id=&#34;可变类型传递的是引用地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变类型传递的是引用地址&#34;&gt;#&lt;/a&gt; 可变类型传递的是引用地址&lt;/h5&gt;
</content>
        <category term="Python" />
        <updated>2018-10-15T12:39:55.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</id>
        <title>python中with上下文管理</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/"/>
        <content type="html">&lt;h2 id=&#34;上下文管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文管理&#34;&gt;#&lt;/a&gt; 上下文管理&lt;/h2&gt;
&lt;h4 id=&#34;with语句是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with语句是什么&#34;&gt;#&lt;/a&gt; with 语句是什么&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;with 是一种上下文管理协议，目的在于从流程图中把 try,except 和 finally 关键字和资源分配释放相关代码统统去掉，简化 try….except….finlally 的处理流程&lt;/li&gt;
&lt;li&gt;所以使用 with 处理的对象必须有 enter () 和 exit () 这两个方法
&lt;ul&gt;
&lt;li&gt;with 通过 enter 方法初始化（enter 方法在语句体执行之前进入运行）&lt;/li&gt;
&lt;li&gt;然后在 exit 中做善后以及处理异常（exit () 方法在语句体执行完毕退出后运行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;with语句使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with语句使用场景&#34;&gt;#&lt;/a&gt; with 语句使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的 “清理” 操作，释放资源&lt;/li&gt;
&lt;li&gt;比如文件使用后自动关闭、线程中锁的自动获取和释放等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;with处理文件操作的实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#with处理文件操作的实例&#34;&gt;#&lt;/a&gt; with 处理文件操作的实例&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#39;&amp;#x2F;etc&amp;#x2F;passwd&amp;#39;) as f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for line in f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#39;a2.py&amp;#39;,encoding&amp;#x3D;&amp;#39;utf8&amp;#39;) as f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print( f.readlines())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f &amp;#x3D; open(&amp;#39;a.py&amp;#39;,encoding&amp;#x3D;&amp;#39;utf8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;except Exception as e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(print(e))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Python" />
        <updated>2018-07-13T07:21:41.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/</id>
        <title>python基础1（内存管理）</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;1-python基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-python基础&#34;&gt;#&lt;/a&gt; 1、Python 基础&lt;/h1&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;内存管理&amp;gt;引用计数&amp;gt;垃圾回收&amp;gt;分代回收&amp;gt;对象存储&amp;gt;对象缓存&amp;gt;多次赋值（num&amp;#x3D;1,num&amp;#x3D;2)&amp;gt;内存地址&amp;gt;print(id(num1),id(num2))&amp;gt;内存占用&amp;gt;sys.getsizeof(num1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;1-内存管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-内存管理&#34;&gt;#&lt;/a&gt; 1、内存管理&lt;/h1&gt;
&lt;h3 id=&#34;1-引用计数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-引用计数&#34;&gt;#&lt;/a&gt; 1、引用计数&lt;/h3&gt;
&lt;p&gt;​		python 是通过引用计数来保存内存的变量追踪，记录这个对象以及其他使用对象的引用次数 python 内部有一个名叫‘引用计数器’，变量被引用时就会增加一次引用计数。&lt;/p&gt;
&lt;h3 id=&#34;2-垃圾回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-垃圾回收&#34;&gt;#&lt;/a&gt; 2、垃圾回收&lt;/h3&gt;
&lt;p&gt;​		概念：&lt;/p&gt;
&lt;p&gt;​			当 Python 中的对象越来越多时，占据的空间越来越大，启动垃圾回收（garbage colletion）把没用的对象清除。&lt;/p&gt;
&lt;p&gt;​		原理：&lt;/p&gt;
&lt;p&gt;​			当 Python 的某一个对象引用计数变为 0 时，说明没有任何引用指向对象，比如 x = a, 那么 x 的引用计数就变成了 1，当 x 被删除时，a 的引用计数也就变成了 0，那么 a 就会被回收。&lt;/p&gt;
&lt;h3 id=&#34;3-分代回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-分代回收&#34;&gt;#&lt;/a&gt; 3、分代回收&lt;/h3&gt;
&lt;p&gt;​		Python 将所有的对象分为 0 ， 1 ， 2 三代；&lt;/p&gt;
&lt;p&gt;​		所有新创建的对象都是 0 代对象，&lt;/p&gt;
&lt;p&gt;​		当 0 代对象经过垃圾回收，依然存在时，就会被归为下一代对象。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;4-对象存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-对象存储&#34;&gt;#&lt;/a&gt; 4、对象存储&lt;/h3&gt;
&lt;p&gt;​		Python 中所有的变量和函数在存储时都会被当成一个对象&lt;/p&gt;
&lt;p&gt;​		当对象运行时，对象存储在内存里，随时可以调用&lt;/p&gt;
&lt;h3 id=&#34;5-多次赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-多次赋值&#34;&gt;#&lt;/a&gt; 5、多次赋值&lt;/h3&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;num1,num2 &amp;#x3D; 1,1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(id(num1),id(num2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140737224735808 140737224735808&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-内存地址sysgetsizeof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-内存地址sysgetsizeof&#34;&gt;#&lt;/a&gt; 6、内存地址 sys.getsizeof ()&lt;/h3&gt;
&lt;p&gt;​		查看某个变量的引用计数&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(sys.getsizeof(a))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;7-内存占用getrefcount&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-内存占用getrefcount&#34;&gt;#&lt;/a&gt; 7、内存占用 getrefcount ()&lt;/h3&gt;
&lt;p&gt;查看某个变量出现的次数&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b &amp;#x3D; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(sys.getrefcount(a))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Python" />
        <updated>2018-05-26T12:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/15/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/04/15/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <updated>2018-04-15T13:19:03.000Z</updated>
    </entry>
</feed>
