{
    "version": "https://jsonfeed.org/version/1",
    "title": "路宇航的博客 • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io",
    "items": [
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/05/06/python%E5%9F%BA%E7%A1%804%EF%BC%88%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%89/",
            "title": "python基础4（语法糖）",
            "date_published": "2021-05-06T00:16:50.000Z",
            "content_html": "<h1 id=\"python语法糖\"><a class=\"markdownIt-Anchor\" href=\"#python语法糖\">#</a> python 语法糖</h1>\n<h4 id=\"语法糖说明\"><a class=\"markdownIt-Anchor\" href=\"#语法糖说明\">#</a> 语法糖说明</h4>\n<pre><code>计算机语言中特殊的某种语法\n这种语法对语言的功能并没有影响\n对于程序员有更好的易用性\n能够增加程序的可读性\n通过这类方式编写出来的代码，即好看又好用,好似糖一般的语法\n</code></pre>\n<h5 id=\"一个简单的例子\"><a class=\"markdownIt-Anchor\" href=\"#一个简单的例子\">#</a> 一个简单的例子</h5>\n<p>假设：有 2 个数字，现需要从中得到最大的那个数字。应该如何实现？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">2</span> </span><br><span class=\"line\">c = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> b &gt; c:</span><br><span class=\"line\">    a = b</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    a = c</span><br></pre></td></tr></table></figure>\n<p>其实还有更多的其它实现方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">max</span>(b, c)</span><br><span class=\"line\">a = c &gt; b <span class=\"keyword\">and</span> c <span class=\"keyword\">or</span> b</span><br><span class=\"line\">a = c <span class=\"keyword\">if</span> c &gt; b <span class=\"keyword\">else</span> b</span><br><span class=\"line\">a = [b, c][c &gt; b]</span><br></pre></td></tr></table></figure>\n<p>这些都是可以实现我们需求的方法，殊途同归。但是它们在易用性、简洁性、可读性、性能等方面的表现都不一样。那么问题来了！</p>\n<p>哪个才是我们所说的语法糖呢？</p>\n<p>一些常见的语法糖</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>; b = <span class=\"number\">2</span>; c = <span class=\"number\">3</span></span><br><span class=\"line\">b, c = c, b</span><br><span class=\"line\">a &lt; c &lt; b &lt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> * <span class=\"number\">100</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] + [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到这些语法，在其它语言里通常不会出现的。但是在 Python 中却神奇的被支持了，所以这些都是当之无愧的 Python 语法糖。</p>\n<p>切片操作<br>\n像列表这类可以支持<strong>切片</strong>操作的对象，则是我最初喜欢 Python 的一个非常重要的原因。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[::-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">3</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l[::<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\">#[9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\"><span class=\"comment\">#3</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">#[4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"comment\">#[3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>\n<p>with 语法糖<br>\n with 语法糖实现的是一个上下文管理器，它主要的特点就是帮助我们自动管理上下文的衔接。即在需要的时候传给我们，不需要的时候自动关闭上下文对象。 需要注意的是：使用 with 语法糖是有条件的。即其后跟的对象必须要实现__enter__和__exit__这 2 个魔法属性。具体使用的例子如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;example_2.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>else 语法糖<br>\n Python 中提供一类 else 的语法，它可以在原有语法基础之上，支持更多一种情况的选择。 主要有 for-else，while-else，try-else。需要注意的是，for-else 和 while-else 需要和 break 语句配合时使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;for end&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">else</span></span><br><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;while end&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span> <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span> / <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;except occured&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;it is fine&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;i am finally&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>函数相关语法糖<br>\n Python 中函数我们都非常的熟悉，而在函数的使用上却有着与其它语言不同的选择。</p>\n<p>动态参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_dynamic_args</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;动态参数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)</span><br></pre></td></tr></table></figure>\n<p>这个函数的参数与函数相比，其参数会有些不同之处。因为它们在接收参数时使用了不同方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example_dynamic_args(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"literal\">True</span>, name=<span class=\"string\">&#x27;xiaowu&#x27;</span>, age=<span class=\"number\">18</span>)</span><br><span class=\"line\">l = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"literal\">False</span>]</span><br><span class=\"line\">d = &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;xiaoming&#x27;</span>, age: <span class=\"string\">&#x27;16&#x27;</span>&#125;</span><br><span class=\"line\">example_dynamic_args(*l, **d)</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数</h3>\n<p>​\t\t匿名函数在很多的语言中都存在，通常在临时需要一个函数的场景下使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> x: x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>​\t\tPython 中使用 lambda 表达式来实现匿名函数，观察上面的 lambda 表达式。</p>\n<h5 id=\"其特点如下\"><a class=\"markdownIt-Anchor\" href=\"#其特点如下\">#</a> 其特点如下：</h5>\n<p>​\t可以接受函数</p>\n<p>​\t函数体只有一个表达式</p>\n<p>​\t无需显式的 return 语句</p>\n<p>​\t整个表达式在一个语法行内实现</p>\n<p>​\tlambda 表达式除了一些语法上的限制之外；其它函数该有的特性它都有。比如：支持动态参数。下面是一个使用 lambda 表示的场景：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_dict = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in_dict:&#x27;</span>, in_dict)</span><br><span class=\"line\">out_dict = <span class=\"built_in\">sorted</span>(in_dict.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;out_dict&#x27;</span>, out_dict)</span><br></pre></td></tr></table></figure>\n<p>推导表达式<br>\n推导表达式是 Python 中常见的语法糖，在很多的数据处理场景中，我们可能会使用的到。 最常见的就是列表推导表达式，可以用来过滤、处理列表中的子项并输出一个新的列表。除此之外还有几个推导式也是非常好用的。</p>\n<p>列表推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>] <span class=\"comment\"># 列表推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>生成器推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) <span class=\"comment\"># 生成器推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>集合推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = &#123;i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>&#125; <span class=\"comment\"># 集合推导表达式</span></span><br></pre></td></tr></table></figure>\n<p>print(‘array after:’, array)<br>\n 字典推导表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array before:&#x27;</span>, in_list)</span><br><span class=\"line\">array = &#123;i: i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>&#125;  <span class=\"comment\"># 字典推导表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;array after:&#x27;</span>, array)</span><br></pre></td></tr></table></figure>\n<p>不同推导式在语法使用上基本一致，只是在返回对象的类型上有所差别。</p>\n<p>yield 表达式<br>\n yield 语法也是 Python 中比较有特点的语法糖，可以说是特有的。虽然其它语言有实现类似机制的功能。 yield 是 Python 中实现 ** 协程 (coroutine)** 的一个重要基础。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_generator</span>(<span class=\"params\">in_list</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;生成器&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> in_list:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>装饰器<br>\n重要的往往在最后面，装饰器是学习 Python 绕不过去的坎。就像学习 Java 要理解面向对象和设计模式一样。 学习 Python，你就应该要掌握好闭包、生成器、装饰器等相关知识。而对于编写高并发程序时则要掌握协程相关知识。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_decorator</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;装饰器&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        func()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inner</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/28/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "title": "python设计模式之观察者模式",
            "date_published": "2021-04-28T08:04:15.000Z",
            "content_html": "<h1 id=\"观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#观察者模式\">#</a> 观察者模式</h1>\n<p>观察者模式也叫发布订阅模式，** 定义了对象之间一对多依赖，当一个对象改变状态时，这个对象的所有依赖者都会收到通知并按照自己的方式进行更新。** 举个现实生活的例子，<strong>职员们趁老板不在，都在玩着自己的东西，同时观察着前台小姐姐，前台小姐姐在老板回来的时候，发布通知让各同事回到工作状态。</strong></p>\n<h4 id=\"话不多说上代码\"><a class=\"markdownIt-Anchor\" href=\"#话不多说上代码\">#</a> 话不多说，上代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 看股票的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StockClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_stock_software</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 关闭了股票软件，并开始办公&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 睡着的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepingClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_word</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 打开了word，并开始办公&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 玩游戏的职员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Play_gamesClerk</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_word</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> 打开了ppt，并开始做作业&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receptionist</span>:</span></span><br><span class=\"line\">    actions = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attach</span>(<span class=\"params\">cls, action</span>):</span></span><br><span class=\"line\">        cls.actions.append(action)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;老板回来了，各同事行动...&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> actioin <span class=\"keyword\">in</span> cls.actions:</span><br><span class=\"line\">            actioin()</span><br><span class=\"line\"><span class=\"comment\"># 实例化职员</span></span><br><span class=\"line\">c1 = StockClerk(<span class=\"string\">&#x27;张丁介&#x27;</span>)</span><br><span class=\"line\">c2 = SleepingClerk(<span class=\"string\">&#x27;刘万兴&#x27;</span>)</span><br><span class=\"line\">c3 = Play_gamesClerk(<span class=\"string\">&#x27;张思彤&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告诉前台小姐姐如何通知</span></span><br><span class=\"line\">Receptionist.attach(c1.close_stock_software)</span><br><span class=\"line\">Receptionist.attach(c2.open_word)</span><br><span class=\"line\">Receptionist.attach(c3.open_word)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前台小姐姐发布通知</span></span><br><span class=\"line\">Receptionist.notify()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\">#老板回来了，各同事行动...</span></span><br><span class=\"line\"><span class=\"comment\">#张丁介 关闭了股票软件，并开始办公</span></span><br><span class=\"line\"><span class=\"comment\">#刘万兴 打开了word，并开始办公</span></span><br><span class=\"line\"><span class=\"comment\">#张思彤 打开了ppt，并开始做作业</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"四观察者模式的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#四观察者模式的优缺点\">#</a> 四。观察者模式的优缺点</h2>\n<p>优点：</p>\n<ul>\n<li>它使彼此交互的对象保持松耦合</li>\n<li>当需要添加其他对象时，无需对主题和观察者做任何修改</li>\n<li>可以随时添加和删除观察者</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>实现不当可能会增加复杂性，导致性能降低</li>\n<li>通知有时是不可靠的，并导致竞争条件或不一致性</li>\n</ul>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/04/22/%E6%97%A5%E6%B4%BB%E4%BA%BA%E6%95%B0%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/",
            "title": "日活人数和高并发",
            "date_published": "2021-04-22T12:45:14.000Z",
            "content_html": "<h1 id=\"日活人数和高并发\"><a class=\"markdownIt-Anchor\" href=\"#日活人数和高并发\">#</a> 日活人数和高并发</h1>\n<h1 id=\"redis主从复制与优化\"><a class=\"markdownIt-Anchor\" href=\"#redis主从复制与优化\">#</a> Redis 主从复制与优化</h1>\n<h2 id=\"主从复制\"><a class=\"markdownIt-Anchor\" href=\"#主从复制\">#</a> 主从复制</h2>\n<p>我们关注主从复制之前，首先要考虑单机有什么问题？</p>\n<ul>\n<li>机器故障</li>\n<li>容量瓶颈</li>\n<li>QPS 瓶颈</li>\n</ul>\n<p>这些都是单节点所遇到的问题，所以这个时候出现了主从复制（一主一从，一主多从）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2020101321485247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>使用主从复制可以：</p>\n<ul>\n<li>数据副本</li>\n<li>扩展读性能</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>一个 master 可以有多个 slave</li>\n<li>一个 slave 只有一个 master</li>\n<li>数据流向是单向的，master 到 slave</li>\n</ul>\n<hr>\n<h2 id=\"主从复制的配置\"><a class=\"markdownIt-Anchor\" href=\"#主从复制的配置\">#</a> 主从复制的配置</h2>\n<p><strong>两种实现方式</strong></p>\n<ul>\n<li>slaveof 命令</li>\n</ul>\n<p>两台机器：主节点：47.11.11.11 从节点 47.22.22.22</p>\n<p>在从节点执行 slaveof 命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">47.22</span><span class=\"number\">.22</span><span class=\"number\">.22</span>-<span class=\"number\">6379</span> &gt; slacefof <span class=\"number\">47.11</span><span class=\"number\">.11</span><span class=\"number\">.11</span> <span class=\"number\">6379</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>取消复制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">47.22</span><span class=\"number\">.22</span><span class=\"number\">.22</span>-<span class=\"number\">6379</span> &gt; slacefof no one</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof ip  port    <span class=\"comment\">//从节点ip + 端口</span></span><br><span class=\"line\">slave-read-only yes <span class=\"comment\">//开启只做读的操作</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>两种方式比较</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201013220336165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>查看主从</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master   <span class=\"comment\">//主节点 </span></span><br><span class=\"line\">connected_slaves:<span class=\"number\">0</span></span><br><span class=\"line\">master_replid:1d43401335a5343b27b1638fc9843e3a593fc1a7</span><br><span class=\"line\">master_replid2:<span class=\"number\">0000000000000000000000000000000000000000</span></span><br><span class=\"line\">master_repl_offset:<span class=\"number\">0</span></span><br><span class=\"line\">second_repl_offset:-<span class=\"number\">1</span></span><br><span class=\"line\">repl_backlog_active:<span class=\"number\">0</span></span><br><span class=\"line\">repl_backlog_size:<span class=\"number\">1048576</span></span><br><span class=\"line\">repl_backlog_first_byte_offset:<span class=\"number\">0</span></span><br><span class=\"line\">repl_backlog_histlen:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>知识点 ：</p>\n<ul>\n<li>主节点 runID：</li>\n</ul>\n<p>每个 redis 节点启动后都会动态分配一个 40 位的十六进制字符串为运行 ID。运行 ID 的主要作用是来唯一识别 redis 节点，比如从节点保存主节点的运行 ID 识别自已正在复制是哪个主节点。如果只使用 ip+port 的方式识别主节点，那么主节点重启变更了整体数据集（如替换 RDB/AOF 文件），从节点再基于偏移量复制数据将是不安全的，因此当运行 ID 变化后从节点将做全量复制。可以在 info server 命令查看当前节点的运行 ID。</p>\n<p>需要注意的是 redis 关闭再启动，运行的 id 会随之变化。</p>\n<hr>\n<h2 id=\"全量复制和部分复制等\"><a class=\"markdownIt-Anchor\" href=\"#全量复制和部分复制等\">#</a> 全量复制和部分复制等</h2>\n<h3 id=\"全量复制\"><a class=\"markdownIt-Anchor\" href=\"#全量复制\">#</a> 全量复制</h3>\n<p>用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。</p>\n<p>redis2.8+ 全量复制流程</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2020101322385755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>开销：</p>\n<ol>\n<li>bgsave 时间</li>\n<li>RDB 文件网络传输</li>\n<li>从节点清空数据时间</li>\n<li>从节点加载 RDB 时间</li>\n<li>可能的 AOF 重写时间</li>\n</ol>\n<h3 id=\"部分复制\"><a class=\"markdownIt-Anchor\" href=\"#部分复制\">#</a> 部分复制</h3>\n<p>用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。</p>\n<p>流程： <img data-src=\"https://img-blog.csdnimg.cn/20201013224506931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"复制偏移量\"><a class=\"markdownIt-Anchor\" href=\"#复制偏移量\">#</a> 复制偏移量：</h3>\n<ul>\n<li>参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在 info replication 中的 master_repl_offset 指标中。</li>\n<li>从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量 slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0</li>\n<li>从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在 info replication 中的 slave_repl_offset 中。</li>\n</ul>\n<h3 id=\"复制积压缓冲区\"><a class=\"markdownIt-Anchor\" href=\"#复制积压缓冲区\">#</a> 复制积压缓冲区：</h3>\n<ul>\n<li>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为 1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。 在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量 (offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</li>\n</ul>\n<hr>\n<h2 id=\"生产中常见问题\"><a class=\"markdownIt-Anchor\" href=\"#生产中常见问题\">#</a> 生产中常见问题</h2>\n<h5 id=\"读写分离\"><a class=\"markdownIt-Anchor\" href=\"#读写分离\">#</a> 读写分离</h5>\n<p>分流到从节点。主节点写数据，从节点读数据，可能遇到读问题</p>\n<ol>\n<li>复制数据延迟</li>\n<li>读到过期数据</li>\n<li>从节点故障</li>\n</ol>\n<h5 id=\"主从配置不一致\"><a class=\"markdownIt-Anchor\" href=\"#主从配置不一致\">#</a> 主从配置不一致</h5>\n<ol>\n<li>例如 maxmemory 不一致 会导致 丢失数据</li>\n<li>例如数据结构优化参数（例如 hash-max-ziplist-entries）: 内存不一致</li>\n</ol>\n<h5 id=\"规避全量复制\"><a class=\"markdownIt-Anchor\" href=\"#规避全量复制\">#</a> 规避全量复制</h5>\n<ol>\n<li>第一次全量复制的时候  - 第一次不可避免，尽量小节点 ，低峰处理</li>\n<li>节点 运行 ID 不匹配  - 故障转移，例如哨兵或者集群</li>\n<li>复制积压缓存区不足  - 增大复制缓存区配置 rel_backlog_size , 网络增强</li>\n</ol>\n<h5 id=\"规避复制风暴\"><a class=\"markdownIt-Anchor\" href=\"#规避复制风暴\">#</a> 规避复制风暴</h5>\n<ol>\n<li>单机器复制风暴（redis&lt;4.0 当 master 宕机重启，会导致该机器下所有 slave 同时产生复制。避免单机部署一套 redis 主从）====》主节点分散多台机</li>\n</ol>\n<hr>\n<h3 id=\"最后的注意事项\"><a class=\"markdownIt-Anchor\" href=\"#最后的注意事项\">#</a> 最后的注意事项：</h3>\n<ul>\n<li>在上述的过程的实现是从库不开启 AOF 持久化情况下，如果从库开启的 AOF 持久化，重启时候依然使用全量复制。</li>\n<li>之前从 master 复制过来的数据并不会丢失，只是不再同步之前 master（如上图的 6379 节点）后续写入的数据</li>\n<li>slaveof 可以用来改变其所属的 master 节点，即重新成为另一台 master 的 slave，但是新的 master 首先就会把从节点的数据全部清除掉</li>\n<li>关于读写分离延时：读写分离 ，master 会一步将数据复制到 slave，如果 slave 发生阻塞，则会延迟 master 数据的写命令，造成数据不一致的问题。------- 一般不考虑这个问题</li>\n<li>读到过期数据：redis 在删除 key 时有两种策略，一种是懒惰型策略，即只有当 redis 操作这个 key 时才会将 key 删除，第二种是定期采样 key 删除 -------- 当 key 数据非常多时，采样速度比不上 key 生成速度会造成很多过期数据没有删除，因为 redis 一般都是在 master 节点（增加删除数据），slave 查询到过期数据也不能删除。会导致 slave 读到过期数据（在 redis3.2 中已经解决）</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2021/03/31/Tree%E7%9A%84%E6%A6%82%E5%BF%B5/",
            "title": "Tree的概念",
            "date_published": "2021-03-31T13:26:37.000Z",
            "content_html": "<h1 id=\"二叉树的概念\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的概念\">#</a> 二叉树的概念</h1>\n<h4 id=\"概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点\"><a class=\"markdownIt-Anchor\" href=\"#概念二叉树是树形结构的一个重要类型二叉树特点是每个结点最多只能有两棵子树且有左右之分就是递归调用自己定一个根节点二叉树递归的最后一层就被称为叶节点\">#</a> 概念：二叉树是树形结构的一个重要类型，二叉树特点是每个结点最多只能有两棵子树，且有左右之分，就是递归调用自己，定一个根节点，二叉树递归的最后一层，就被称为叶节点。</h4>\n<h2 id=\"2-二叉树先序遍历就是先访问自己然后左子树然后右子树\"><a class=\"markdownIt-Anchor\" href=\"#2-二叉树先序遍历就是先访问自己然后左子树然后右子树\">#</a> 2、二叉树先序遍历就是先访问自己，然后左子树，然后右子树。</h2>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215615026.png\" alt=\"image-20210331215615026\"></p>\n<h4 id=\"0137849256\"><a class=\"markdownIt-Anchor\" href=\"#0137849256\">#</a> 0,1,3,7,8,4,9,2,5,6</h4>\n<h2 id=\"3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树\"><a class=\"markdownIt-Anchor\" href=\"#3-二叉树的中序遍历是先访问左子树然后访问自己最后右子树\">#</a> 3、二叉树的中序遍历是先访问左子树，然后访问自己，最后右子树。</h2>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215700942.png\" alt=\"image-20210331215700942\"></p>\n<h4 id=\"7381940526\"><a class=\"markdownIt-Anchor\" href=\"#7381940526\">#</a> 7,3,8,1,9,4,0,5,2,6</h4>\n<p><img data-src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210331215811657.png\" alt=\"image-20210331215811657\"></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/",
            "title": "项目总结",
            "date_published": "2019-03-31T07:03:42.000Z",
            "content_html": "<h1 id=\"项目总结\"><a class=\"markdownIt-Anchor\" href=\"#项目总结\">#</a> 项目总结</h1>\n<h3 id=\"1-前端ant-desgin的使用\"><a class=\"markdownIt-Anchor\" href=\"#1-前端ant-desgin的使用\">#</a> 1、前端 ant desgin 的使用：</h3>\n<h4 id=\"1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可\"><a class=\"markdownIt-Anchor\" href=\"#1-前端ant组件为我们配置好了多种样式复制粘贴修改参数即可\">#</a> 1、前端 ant 组件为我们配置好了多种样式，复制粘贴修改参数即可，</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;ant.design&#x2F;components&#x2F;button-cn&#x2F;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-docker的基础命令和操作\"><a class=\"markdownIt-Anchor\" href=\"#2-docker的基础命令和操作\">#</a> 2、docker 的基础命令和操作：</h3>\n<h4 id=\"1-查看所有镜像\"><a class=\"markdownIt-Anchor\" href=\"#1-查看所有镜像\">#</a> 1、查看所有镜像：</h4>\n<p>​\t\t\t\tdocker images</p>\n<h4 id=\"2-删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#2-删除镜像\">#</a> 2、删除镜像：</h4>\n<p>​\t\t\t\tdocker</p>\n<h4 id=\"3-暂停镜像不然无法删除\"><a class=\"markdownIt-Anchor\" href=\"#3-暂停镜像不然无法删除\">#</a> 3、暂停镜像（不然无法删除）：</h4>\n<p>​\t\t\t\tdocker stop $(docker ps -a -q)</p>\n<h4 id=\"4-如果想要删除所有container的话再加一个指令\"><a class=\"markdownIt-Anchor\" href=\"#4-如果想要删除所有container的话再加一个指令\">#</a> 4、如果想要删除所有 container 的话再加一个指令：</h4>\n<p>​\t\t\t\tdocker rm $(docker ps -a -q)</p>\n<h4 id=\"5-查看当前有些什么images\"><a class=\"markdownIt-Anchor\" href=\"#5-查看当前有些什么images\">#</a> 5、查看当前有些什么 images</h4>\n<p>​\t\t\t\tdocker images</p>\n<h4 id=\"6-删除images通过image的id来指定删除谁\"><a class=\"markdownIt-Anchor\" href=\"#6-删除images通过image的id来指定删除谁\">#</a> 6、删除 images，通过 image 的 id 来指定删除谁</h4>\n<p>​\t\t\t\tdocker rmi <image id></p>\n<h4 id=\"7-想要删除untagged-images也就是那些id为none的image的话可以用\"><a class=\"markdownIt-Anchor\" href=\"#7-想要删除untagged-images也就是那些id为none的image的话可以用\">#</a> 7、想要删除 untagged images，也就是那些 id 为<None>的 image 的话可以用</h4>\n<p>​\t\t\t\tdocker rmi $(docker images | grep “^<none>” | awk “{print $3}”)</p>\n<h4 id=\"8-要删除全部image的话\"><a class=\"markdownIt-Anchor\" href=\"#8-要删除全部image的话\">#</a> 8、要删除全部 image 的话</h4>\n<p>​\t\t\t\tdocker rmi $(docker images -q)</p>\n<h4 id=\"9-启动容器\"><a class=\"markdownIt-Anchor\" href=\"#9-启动容器\">#</a> 9、启动容器</h4>\n<p>​\t\t\t\tdocker run -p 6380:6379 redis</p>\n<h4 id=\"10-查看所有容器\"><a class=\"markdownIt-Anchor\" href=\"#10-查看所有容器\">#</a> 10、查看所有容器</h4>\n<p>​\t\t\t\tdocker ps</p>\n<h2 id=\"3-redis的时间使用\"><a class=\"markdownIt-Anchor\" href=\"#3-redis的时间使用\">#</a> 3、redis 的时间使用</h2>\n<h4 id=\"1-给变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#1-给变量赋值\">#</a> 1、给变量赋值</h4>\n<p>​\t\t\t\tset 变量 值</p>\n<h4 id=\"2-查看变量的值\"><a class=\"markdownIt-Anchor\" href=\"#2-查看变量的值\">#</a> 2、查看变量的值</h4>\n<p>​\t\t\t\tget 变量</p>\n<h4 id=\"3-给变量附上过期时间\"><a class=\"markdownIt-Anchor\" href=\"#3-给变量附上过期时间\">#</a> 3、给变量附上过期时间</h4>\n<p>​\t\t\t\texpire 变量 秒速</p>\n<p>​</p>\n<h2 id=\"4-数据库连接池\"><a class=\"markdownIt-Anchor\" href=\"#4-数据库连接池\">#</a> 4、数据库连接池</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数据库链接池</span></span><br><span class=\"line\"><span class=\"comment\">#链接池对象</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从链接池获取链接</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\"></span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>,<span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-异步写文件\"><a class=\"markdownIt-Anchor\" href=\"#5-异步写文件\">#</a> 5、异步写文件</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiofiles.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fp.write(<span class=\"string\">&#x27;Have a good time. Have a good time\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;数据写入成功&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    tasks=[asyncio.create_task(test_demo()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9999</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(*tasks)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    start = time.time()  <span class=\"comment\"># 开始时间</span></span><br><span class=\"line\">    asyncio.run(main())  <span class=\"comment\"># 执行操作</span></span><br><span class=\"line\">    end = time.time()    <span class=\"comment\"># 结束时间</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;异步执行了:<span class=\"subst\">&#123;end - start&#125;</span>秒&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-悦哥翻墙软件\"><a class=\"markdownIt-Anchor\" href=\"#6-悦哥翻墙软件\">#</a> 6、悦哥翻墙软件</h2>\n<p>​\t\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbXkubmV0d29yay9wcm9kdWN0L2luZGV4\">https://cmy.network/product/index</span></p>\n<h2 id=\"7-队列\"><a class=\"markdownIt-Anchor\" href=\"#7-队列\">#</a> 7、队列</h2>\n<h4 id=\"1-队列的概念\"><a class=\"markdownIt-Anchor\" href=\"#1-队列的概念\">#</a> 1、队列的概念</h4>\n<p>​\t\t\t\t队列是一种特殊的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTYlODAlQTclRTglQTElQTgvMzIyODA4MQ==\">线性表</span>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后\t\t\t\t端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队\t\t\t\t尾，进行删除操作的端称为队头。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,keyname:<span class=\"built_in\">str</span>,**redis_kwargs</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">      self.__db = redis.Redis(**redis_kwargs)</span><br><span class=\"line\">      self.key = keyname</span><br><span class=\"line\"></span><br><span class=\"line\">      self.s = []</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#添加数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,x:<span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#self.s.append(x)</span></span><br><span class=\"line\">      <span class=\"comment\">#添加队列数据</span></span><br><span class=\"line\">      self.__db.rpush(self.key,x)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#删除数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.s.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#获取数据</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#return self.s[0]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__db.lpop(self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#判断是否执行完毕</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> <span class=\"built_in\">bool</span>(self.s)</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-中间件\"><a class=\"markdownIt-Anchor\" href=\"#8-中间件\">#</a> 8、中间件</h2>\n<h4 id=\"1-概念\"><a class=\"markdownIt-Anchor\" href=\"#1-概念\">#</a> 1、概念</h4>\n<p>​\t\t\t\t\t中间件是一个 Python 程序员用来处理 Django 的请求和响应的框架级别的钩子，它是一个轻量，低级\t\t\t\t\t别的插件系统，用于全局范围内改变 Django 的输入，输出。中间件可以在系统输入之前进行输入，\t\t\t\t\t在系统输出之前进行输出</p>\n<p>​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"><span class=\"keyword\">from</span> z_Userapp.models <span class=\"keyword\">import</span> JurisdictionModel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中间件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Middle</span>(<span class=\"params\">MiddlewareMixin</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span>(<span class=\"params\">self,request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取uid</span></span><br><span class=\"line\">        uid=request.GET.get(<span class=\"string\">&#x27;uid&#x27;</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 如果存在，则查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> uid:<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\"># user=JurisdictionModel.objects.filter(user_id=uid)</span></span><br><span class=\"line\">            request.level=<span class=\"built_in\">int</span>(uid) &amp; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>你需要在 settings.py 中的 MIDDLEWARE 中进行注册才可以使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;应用名.middleware.你的中间件类名&#x27;</span>,</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-七牛云\"><a class=\"markdownIt-Anchor\" href=\"#9-七牛云\">#</a> 9、七牛云</h2>\n<p>​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> qiniu <span class=\"keyword\">import</span> Auth</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qiniu_token</span>():</span></span><br><span class=\"line\">    qn = Auth(<span class=\"string\">&#x27;vkoJGPbnvO-zwjVX3DcVJnXtpt9gclvnH5N_A4he&#x27;</span>, <span class=\"string\">&#x27;Mab055XtHiEYRRoyLEn02JBsY2kRnDAsmonQdhiT&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 指定上传空间, 返回token值</span></span><br><span class=\"line\">    token = qn.upload_token(<span class=\"string\">&#x27;shixun-p8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpTokenView</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        七牛云token接口</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">&#x27;token&#x27;</span>: qiniu_token()&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-又拍云\"><a class=\"markdownIt-Anchor\" href=\"#10-又拍云\">#</a> 10、又拍云</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> upyun</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义文件上传类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFile</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        file = request.FILES.get(<span class=\"string\">&#x27;file&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(file)</span><br><span class=\"line\">        up = upyun.UpYun(<span class=\"string\">&#x27;shixun-p8&#x27;</span>, username=<span class=\"string\">&#x27;coisnini&#x27;</span>, password=<span class=\"string\">&#x27;5LQiEB6YUY4aTIHQDNLMPpVf2QpnNeft&#x27;</span>)</span><br><span class=\"line\">        headers = &#123;<span class=\"string\">&#x27;x-gmkerl-rotate&#x27;</span>: <span class=\"string\">&#x27;180&#x27;</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> file.chunks():</span><br><span class=\"line\">            res = up.put(<span class=\"string\">&#x27;/touxiang1.jpg&#x27;</span>, chunk, checksum=<span class=\"literal\">True</span>, headers=headers)</span><br><span class=\"line\">        <span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(json.dumps(&#123;<span class=\"string\">&#x27;filename&#x27;</span>: file.name&#125;), content_type=<span class=\"string\">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-mongodb\"><a class=\"markdownIt-Anchor\" href=\"#11-mongodb\">#</a> 11、MongoDB</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> z_Userapp.MyMongoDB <span class=\"keyword\">import</span> MyMonge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接MongoDB</span></span><br><span class=\"line\">client = MyMonge(<span class=\"string\">&#x27;z_Cate&#x27;</span>, <span class=\"string\">&#x27;CateTemplate&#x27;</span>, **&#123;<span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">27017</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取MongoDB数据</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetMongo</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 进入数据库</span></span><br><span class=\"line\">        <span class=\"comment\"># db = client.z_Cate</span></span><br><span class=\"line\">        <span class=\"comment\"># 集合</span></span><br><span class=\"line\">        <span class=\"comment\"># zst = db.CateTemplate</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = request.GET.get(<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        wid = WorkOrderModel.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> wid.pid == <span class=\"number\">0</span>:</span><br><span class=\"line\">            data = client.find(&#123;<span class=\"string\">&#x27;wid&#x27;</span>: <span class=\"built_in\">str</span>(wid.<span class=\"built_in\">id</span>)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            data = client.find(&#123;<span class=\"string\">&#x27;wid&#x27;</span>: <span class=\"built_in\">str</span>(wid.pid)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"built_in\">eval</span>(data[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-工单递归死循环\"><a class=\"markdownIt-Anchor\" href=\"#12-工单递归死循环\">#</a> 12、工单递归死循环</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xTree</span>(<span class=\"params\">datas</span>):</span></span><br><span class=\"line\">    lists = []</span><br><span class=\"line\">    tree = &#123;&#125;</span><br><span class=\"line\">    parent_id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">        item = i</span><br><span class=\"line\">        tree[item[<span class=\"string\">&#x27;id&#x27;</span>]] = item</span><br><span class=\"line\">    root = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">        obj = i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj[<span class=\"string\">&#x27;pid&#x27;</span>]:</span><br><span class=\"line\">            root = tree[obj[<span class=\"string\">&#x27;id&#x27;</span>]]</span><br><span class=\"line\">            lists.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parent_id = obj[<span class=\"string\">&#x27;pid&#x27;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;childlist&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tree[parent_id]:</span><br><span class=\"line\">                tree[parent_id][<span class=\"string\">&#x27;childlist&#x27;</span>] = []</span><br><span class=\"line\">            tree[parent_id][<span class=\"string\">&#x27;childlist&#x27;</span>].append(tree[obj[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-三方登录\"><a class=\"markdownIt-Anchor\" href=\"#13-三方登录\">#</a> 13、三方登录</h2>\n<h4 id=\"导报\"><a class=\"markdownIt-Anchor\" href=\"#导报\">#</a> 导报</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> hmac</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-码云\"><a class=\"markdownIt-Anchor\" href=\"#1-码云\">#</a> 1、码云</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gitee</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(</span><br><span class=\"line\">            <span class=\"string\">&quot;https://gitee.com/oauth/authorize?client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;response_type=code&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiteeBack</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        code = request.GET.get(<span class=\"string\">&quot;code&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        r = requests.post(</span><br><span class=\"line\">            <span class=\"string\">&quot;https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=%s&amp;client_id=7f611851ce2cbd381390632e50e10ab00108a207dcc00d6c8de686a40fd7cd15&amp;redirect_uri=http://127.0.0.1:8000/z/git_back/&amp;client_secret=ec39df1740d798ac832ab3df1ac99aedd04459c6b7d552f43099ef24273554cc&quot;</span> % code)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        r = requests.get(<span class=\"string\">&quot;https://gitee.com/api/v5/user?access_token=2b8c4824659611c8a920631bb5684008&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        name = json.loads(r.text)[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">        user = UserModel.objects.<span class=\"built_in\">filter</span>(username=name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://127.0.0.1:8080/myback&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user = UserModel(username=<span class=\"built_in\">str</span>(<span class=\"string\">&quot;gitee_&quot;</span> + name))</span><br><span class=\"line\">            user.save()</span><br><span class=\"line\">            user = UserModel.objects.<span class=\"built_in\">filter</span>(username=name)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://127.0.0.1:8080/myback&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-钉钉\"><a class=\"markdownIt-Anchor\" href=\"#2-钉钉\">#</a> 2、钉钉</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 钉钉三方登录</span><br><span class=\"line\">def ding_back(request):</span><br><span class=\"line\">    appid &#x3D; &#39;dingoar91fvryq6pugb1nx&#39;</span><br><span class=\"line\">    redirect_uri &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;z&#x2F;ding_back&#x2F;&#39;</span><br><span class=\"line\">    # 获取code</span><br><span class=\"line\">    code &#x3D; request.GET.get(&quot;code&quot;)</span><br><span class=\"line\">    t &#x3D; time.time()</span><br><span class=\"line\">    # 时间戳</span><br><span class=\"line\">    timestamp &#x3D; str((int(round(t * 1000))))</span><br><span class=\"line\">    # 密钥</span><br><span class=\"line\">    appSecret &#x3D; &#39;Njh7SJwIE-MOoZa9P7nxgFf18iNOzCS2KvUaBybQ1xjTszXRA96XDvrTgttDHhVf&#39;</span><br><span class=\"line\">    # 构造签名</span><br><span class=\"line\">    signature &#x3D; base64.b64encode(</span><br><span class=\"line\">        hmac.new(appSecret.encode(&#39;utf-8&#39;), timestamp.encode(&#39;utf-8&#39;), digestmod&#x3D;sha256).digest())</span><br><span class=\"line\">    # 请求接口，换取钉钉用户名</span><br><span class=\"line\">    payload &#x3D; &#123;&#39;tmp_auth_code&#39;: code&#125;</span><br><span class=\"line\">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json&#39;&#125;</span><br><span class=\"line\">    # 导requests</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    res &#x3D; requests.post(&#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;sns&#x2F;getuserinfo_bycode?signature&#x3D;&#39; + urllib.parse.quote(</span><br><span class=\"line\">        signature.decode(&quot;utf-8&quot;)) + &quot;&amp;timestamp&#x3D;&quot; + timestamp + &quot;&amp;accessKey&#x3D;dingoar91fvryq6pugb1nx&quot;,</span><br><span class=\"line\">                        data&#x3D;json.dumps(payload), headers&#x3D;headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    re_dict &#x3D; json.loads(res.text)</span><br><span class=\"line\">    print(re_dict)</span><br><span class=\"line\">    # 判断是否为第一次登录</span><br><span class=\"line\">    user &#x3D; UserModel.objects.filter(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class=\"line\"></span><br><span class=\"line\">    sina_id &#x3D; &#39;&#39;</span><br><span class=\"line\">    user_id &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">    if user:</span><br><span class=\"line\">        # 代表曾经用过钉钉登录</span><br><span class=\"line\">        sina_id &#x3D; user.username</span><br><span class=\"line\">        user_id &#x3D; user.id</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # 代表首次登录，入库</span><br><span class=\"line\">        user &#x3D; UserModel(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;]), password&#x3D;&#39;&#39;)</span><br><span class=\"line\">        # 保存入库</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        sina_id &#x3D; str(re_dict.get(&#39;user_info&#39;))</span><br><span class=\"line\">        # 查询用户id</span><br><span class=\"line\">        user &#x3D; UserModel.objects.filter(username&#x3D;str(&quot;dingding_&quot; + re_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class=\"line\">        user_id &#x3D; user.id</span><br><span class=\"line\"></span><br><span class=\"line\">    # 进行跳转</span><br><span class=\"line\">    return redirect(&quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;myback?sina_id&#x3D;&quot; + str(sina_id) + &quot;&amp;uid&#x3D;&quot; + str(user_id))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/10/15/python%E5%9F%BA%E7%A1%802%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/",
            "title": "python基础2（数据类型）",
            "date_published": "2018-10-15T12:39:55.000Z",
            "content_html": "<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<p>​</p>\n<h2 id=\"python中常见的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#python中常见的数据类型\">#</a> Python 中常见的数据类型</h2>\n<h3 id=\"int整型\"><a class=\"markdownIt-Anchor\" href=\"#int整型\">#</a> int 整型：</h3>\n<p>​\t可变不可变：</p>\n<p>​\t\t\t\t值不可变类型，改变变量值实则是改变了变量的指向</p>\n<p>​\t常用方法：</p>\n<p>​\t\t\t\tbit_length（） 返回 int 变量所占二进制位数</p>\n<p>​\t\t\t\tint ()   强转字符串为 int 类型（但是字符串里只能是数字）</p>\n<h3 id=\"set数据具有唯一性\"><a class=\"markdownIt-Anchor\" href=\"#set数据具有唯一性\">#</a> set：数据具有唯一性</h3>\n<p>​\t\t可变不可变：</p>\n<p>​\t\t\t\tset 是可变类型</p>\n<p>​\t\t有序无序：</p>\n<p>​\t\t\t\t无序，不可取值</p>\n<p>​\t\t常用法法：</p>\n<p>​\t\t\t新增：</p>\n<p>​\t\t\t\t\t   s1.add (元素)</p>\n<p>​\t\t\t\t\t   s1.update(s2)</p>\n<p>​\t\t\t删除：clear () 清空 set</p>\n<p>​\t\t\t\t\t   pop () 随机删除并返回值</p>\n<p>​     \t\t\t\t  remove (元素) 删除指定元素</p>\n<p>s1.isdisjoint (s1) 判断是否没有交集，没有返回 True 有返回 Flase</p>\n<p>s1.issubset (s2) 判断是都是 s2 的子集</p>\n<p>s1.issuperset (s2) 判断是否是 s2 的父集</p>\n<h3 id=\"dict\"><a class=\"markdownIt-Anchor\" href=\"#dict\">#</a> dict</h3>\n<p>​\t\t\tdict 字典的结构就是‘键 - 值对’，每一个键对应一个值，可以通过键来查询值，dict 字典是无序的</p>\n<p>​\t\t\t定义的键必须是不可变的，所以可以是数字，字符亦或者是布尔值。</p>\n<p>​\t\t\t但是值得定义可以使任何数据类型</p>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> list</h3>\n<h4 id=\"1-append\"><a class=\"markdownIt-Anchor\" href=\"#1-append\">#</a> 1、append</h4>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#append用于在列表末尾追加新的对象</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.append(4)                          #the result ： [1, 2, 3, 4]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-count\"><a class=\"markdownIt-Anchor\" href=\"#2-count\">#</a> 2、count</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#count方法统计某个元素在列表中出现的次数</span><br><span class=\"line\">a &#x3D; [&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;,&#39;aa&#39;,&#39;aa&#39;]</span><br><span class=\"line\">print(a.count(&#39;aa&#39;))                 #the result ： 3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-extend\"><a class=\"markdownIt-Anchor\" href=\"#3-extend\">#</a> 3、extend</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#extend方法可以在列表的末尾一次性追加另一个序列中的多个值</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">b &#x3D; [4,5,6]</span><br><span class=\"line\">a.extend(b)                          #the result ：[1, 2, 3, 4, 5, 6]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-index\"><a class=\"markdownIt-Anchor\" href=\"#4-index\">#</a> 4、index</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#index函数用于从列表中找出某个值第一个匹配项的索引位置</span><br><span class=\"line\">a &#x3D; [1,2,3,1]</span><br><span class=\"line\">print(a.index(1))                   #the result ： 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-pop\"><a class=\"markdownIt-Anchor\" href=\"#5-pop\">#</a> 5、pop</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.pop()                             #the result ： [1, 2]</span><br><span class=\"line\">a.pop(0)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-insert\"><a class=\"markdownIt-Anchor\" href=\"#6-insert\">#</a> 6、insert</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#insert方法用于将对象插入到列表中</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">a.insert(0,&#39;aa&#39;)            #the result : [&#39;aa&#39;, 1, 2, 3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"7-remove\"><a class=\"markdownIt-Anchor\" href=\"#7-remove\">#</a> 7、remove</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#remove方法用于移除列表中某个值的第一个匹配项</span><br><span class=\"line\">a &#x3D; [&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;,&#39;aa&#39;]</span><br><span class=\"line\">a.remove(&#39;aa&#39;)                      #the result ： [&#39;bb&#39;, &#39;cc&#39;, &#39;aa&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"8-reverse\"><a class=\"markdownIt-Anchor\" href=\"#8-reverse\">#</a> 8、reverse</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#reverse方法将列表中的元素反向存放</span><br><span class=\"line\">a &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br><span class=\"line\">a.reverse()                         #the result ： [&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"9-sort\"><a class=\"markdownIt-Anchor\" href=\"#9-sort\">#</a> 9、sort</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列</span><br><span class=\"line\">a &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,1,2,3]</span><br><span class=\"line\">a.sort()                           #the result ：[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"10-enumerate\"><a class=\"markdownIt-Anchor\" href=\"#10-enumerate\">#</a> 10、enumerate</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li &#x3D; [11,22,33,44,55,66]</span><br><span class=\"line\">for k,v in enumerate(li, 1):  # 1.代表 k 从哪个数字开始</span><br><span class=\"line\">    print(k,v)</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">1 11</span><br><span class=\"line\">2 22</span><br><span class=\"line\">3 33</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"11-ange和xrange\"><a class=\"markdownIt-Anchor\" href=\"#11-ange和xrange\">#</a> 11、ange 和 xrange</h4>\n<ul>\n<li>指定范围，生成指定的数字</li>\n<li>注：python3 中的 range 类似 python2 中的 xrange，比如 a = range (1,4) : a 返回的不是列表对象而是一个可迭代对象（&lt;class ‘range’&gt;）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1、range根据start与stop指定的范围以及step设定的步长，生成一个序列：range([start,] stop[, step])</span><br><span class=\"line\">#2、xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器</span><br><span class=\"line\">for i in range(1,10,2):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"12-列表去空\"><a class=\"markdownIt-Anchor\" href=\"#12-列表去空\">#</a> 12、列表去空</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 法1：</span><br><span class=\"line\">filter(None, your_list)</span><br><span class=\"line\"></span><br><span class=\"line\"># 法2：</span><br><span class=\"line\">while &#39;&#39; in your_list:</span><br><span class=\"line\">    your_list.remove(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 法3：</span><br><span class=\"line\">your_list &#x3D; [x for x in your_list if x !&#x3D; &#39;&#39;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"tuple元祖\"><a class=\"markdownIt-Anchor\" href=\"#tuple元祖\">#</a> tuple 元祖</h3>\n<ul>\n<li>\n<p>** 元组定义：** 元组和列表一样，也是一种序列，唯一的不同是元组不能修改</p>\n<p>​\t可变不可变：</p>\n<p>​\t\t\t不可变，如果元素为可变类型，元素内部值是可修改的</p>\n<p>​\t常用方法：</p>\n<p>​\t\t\tcount (x), 返回 x 在元组中出现的次数</p>\n<p>​\t\t\tindex (x,start,end) 返回 x 在元组指定范围的索引值，可指定起终点索引</p>\n</li>\n</ul>\n<h4 id=\"1-创建元组\"><a class=\"markdownIt-Anchor\" href=\"#1-创建元组\">#</a> 1 创建元组</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1. 创建元组</span></span><br><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">#2. 将列表转换成元组</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])   </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-元祖常用方式\"><a class=\"markdownIt-Anchor\" href=\"#2-元祖常用方式\">#</a> 2、元祖常用方式</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t&#x3D;(1,2,3,1)</span><br><span class=\"line\">print( t.count(1) )   # 2 : 元祖中出现 1 的次数为2次</span><br><span class=\"line\">print( t.index( 3 ) )  # 2 : 元祖中出现三的索引位置为 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-列表和元组常用函数\"><a class=\"markdownIt-Anchor\" href=\"#3-列表和元组常用函数\">#</a> 3、列表和元组常用函数</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>com(x,y)</td>\n<td>比较两个值</td>\n</tr>\n<tr>\n<td>len(seq)</td>\n<td>返回序列的长度</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>把序列转换成列表</td>\n</tr>\n<tr>\n<td>max(args)</td>\n<td>返回序列或者参数集合中得最大值</td>\n</tr>\n<tr>\n<td>min(args)</td>\n<td>返回序列或者参数集合中的最小值</td>\n</tr>\n<tr>\n<td>reversed(seq)</td>\n<td>对序列进行反向迭代</td>\n</tr>\n<tr>\n<td>sorted(seq)</td>\n<td>返回已经排列的包含 seq 所有元素的列表</td>\n</tr>\n<tr>\n<td>tuple(seq)</td>\n<td>把序列转换成元组</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"列表和元祖区别\"><a class=\"markdownIt-Anchor\" href=\"#列表和元祖区别\">#</a> 列表和元祖区别</h4>\n<h5 id=\"1-列表和元祖区别\"><a class=\"markdownIt-Anchor\" href=\"#1-列表和元祖区别\">#</a> 1 列表和元祖区别</h5>\n<ul>\n<li>\n<p><code>可变不可变：</code> 列表可变，元组不可变，除非整体替换</p>\n</li>\n<li>\n<p>存储差异：对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节</p>\n<ul>\n<li>列表为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些</li>\n</ul>\n</li>\n<li>\n<p>元组比列表的访问和处理速度快。</p>\n</li>\n<li>\n<p>列表不能作为字典的键，而元组可以</p>\n</li>\n<li>\n<p>元祖内存长度大小固定，所以无法进行切片</p>\n</li>\n<li>\n<p>放置一样的元素，元祖的内存空间，比列表少 16 个字节</p>\n<h4 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\">#</a> 举例</h4>\n<p>​\t式化字符串，格式化字符串后面的（）本质上就是一个元祖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;%s 年龄是 %d 身高是 %。2f&quot; %(&quot;小明&quot;,18,1.75))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"str记录可描述性事物状态\"><a class=\"markdownIt-Anchor\" href=\"#str记录可描述性事物状态\">#</a> str：记录可描述性事物状态</h2>\n<p>可变不可变：值不可变类型，改变变量值实则是改变了变量的指向</p>\n<p>str (): 功能：1、工厂函数，i = “egon” &lt;==&gt; i = str (“egon”)</p>\n<p>​                  2、强制类型转换， i = str (555) ==&gt;i = “555”</p>\n<p>常用操作：i = “abcdef”</p>\n<p>索引取值：i [1] = “b”</p>\n<p>切片：i [1:5:2] ==&gt; “bd”</p>\n<p>常用方法：strip (指定去除字符) #去除首尾字符，默认为空格</p>\n<p>replace (old，new，num) #用子字符串替换字符串中的某些字符，可指定替换个数</p>\n<p>split (指定分隔字符，num) # 按指定字符分隔字符串，可指定分隔次数，默认从左到右分隔，从右到左分隔可用 rsplit ()</p>\n<p>str.join (iterable) #将可迭代对象元素按用 str 连接成字符串，注意可迭代对象元素必须是字符串类型，否则报错</p>\n<p>endswith (指定字符，start，end) #判断是否以指定字符开头，可指定索引起终止位置</p>\n<p>startswith ()# 判断是否以指定字符结尾，可指定索引起终止位置</p>\n<p>upper () #字符串字母大写</p>\n<p>lower ()# 字符串字母小写</p>\n<p>isdigit () #判断字符串是否由纯数字组成</p>\n<p>find (指定字符，start，end) # 返回字符在字符串中的起始索引  可指定起始位置索引，找不到返回 - 1</p>\n<p>index (指定字符，start，end)# 返回字符在字符串中起始位置索引，可指定起始位置索引，找不到报错</p>\n<p>…</p>\n<p>总结：所有对字符串的操作都是返回了新的值，原字符串不改变</p>\n<h2 id=\"py2和py3的区别\"><a class=\"markdownIt-Anchor\" href=\"#py2和py3的区别\">#</a> py2 和 py3 的区别</h2>\n<h3 id=\"class类\"><a class=\"markdownIt-Anchor\" href=\"#class类\">#</a> class 类</h3>\n<p>​\t\tpython2 的 class 类需要手动继承 object 父类</p>\n<p>​\t\tpython3 的 class 类默认自动继承 object 父类</p>\n<h3 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\">#</a> map 函数</h3>\n<p>​\t\tPython 2 中，map 函数返回 list，</p>\n<p>​\t\tPython 3 中，map 函数返回 iterator。</p>\n<p>Python 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x+<span class=\"number\">1</span>, <span class=\"built_in\">range</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">//输出</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<p>Python 3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x+<span class=\"number\">1</span>, <span class=\"built_in\">range</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">//输出</span><br><span class=\"line\">&lt;<span class=\"built_in\">map</span> <span class=\"built_in\">object</span> at <span class=\"number\">0x7ff5b103d2b0</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不支持has_key\"><a class=\"markdownIt-Anchor\" href=\"#不支持has_key\">#</a> 不支持 has_key</h2>\n<p>Python 3 中的字典不再支持 has_key 方法</p>\n<p>Python 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">30</span>, <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Xiao Wang&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, person.has_key(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, <span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> person</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person has key &quot;age&quot;:  True</span><br><span class=\"line\">person has key &quot;age&quot;:  True</span><br></pre></td></tr></table></figure>\n<p>Python 3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">30</span>, <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Xiao Wang&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, <span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> person)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person has key &quot;age&quot;:  True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;person has key \\&quot;age\\&quot;: &quot;</span>, person.has_key(<span class=\"string\">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">AttributeError: &#x27;dict&#x27; object has no attribute &#x27;has_key&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xrange\"><a class=\"markdownIt-Anchor\" href=\"#xrange\">#</a> xrange</h3>\n<p>Python 2 中有 range 和 xrange 两个方法。其区别在于，range 返回一个 list，在被调用的时候即返回整个序列；xrange 返回一个 iterator，在每次循环中生成序列的下一个数字。Python 3 中不再支持 xrange 方法，Python 3 中的 range 方法就相当于 Python 2 中的 xrange 方法。</p>\n<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<p>Python 2 中捕获异常一般用下面的语法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span>/<span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError, e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"built_in\">str</span>(e)</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"number\">1</span>/<span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"built_in\">str</span>(e)</span><br></pre></td></tr></table></figure>\n<p>Python 3 中不再支持前一种语法，必须使用 as 关键字。</p>\n<h2 id=\"dict字典有序\"><a class=\"markdownIt-Anchor\" href=\"#dict字典有序\">#</a> dict 字典有序</h2>\n<p>在 python2 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = <span class=\"built_in\">dict</span>(b=<span class=\"number\">12</span>, a=<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> d.keys()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">[‘a’, ‘b’]</span><br></pre></td></tr></table></figure>\n<p>在 python3 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = <span class=\"built_in\">dict</span>(b=<span class=\"number\">12</span>, a=<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.keys())</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">dict_keys([‘b’, ‘a’])</span><br></pre></td></tr></table></figure>\n<p>python2, python3 的字典 keys 的结果是不一样的。因此，避免使用字典的 keys 的顺序作为有序数组。虽然，如果你一直使用 python2，代码似乎运行正确，但如果移植到 python3，将造成结果错误</p>\n<p>如果必须使用字典，可以使用 collections 模块中的 OrderDict。这能保证在 python2, python3 中一致性。</p>\n<h2 id=\"python的可变类型和不可变类型\"><a class=\"markdownIt-Anchor\" href=\"#python的可变类型和不可变类型\">#</a> python 的可变类型和不可变类型</h2>\n<h3 id=\"在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型\"><a class=\"markdownIt-Anchor\" href=\"#在python中主要有两种数据类型-一种是可变数据类型-另一种是不可变数据类型\">#</a> 在 Python 中主要有两种数据类型，一种是可变数据类型，另一种是不可变数据类型</h3>\n<blockquote>\n<p><strong>可变类型</strong>（mutable）：列表，字典（key 是不可变）<br>\n<strong>不可变类型</strong>（unmutable）：数字，字符串，元组</p>\n</blockquote>\n<p>可变不可变，从对象内存地址方向来说，是指内存中的值（value）是否可以被改变。<br>\npython 所声明的变量都以对象的形式存在，存在于机器的固定内存之中。</p>\n<h2 id=\"深拷贝浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝浅拷贝\">#</a> 深拷贝浅拷贝</h2>\n<h3 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h3>\n<p>​\t在 python 中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python 并没有拷贝这个对象，而只是拷贝了这个对象的引用叫做浅拷贝</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095328930-1590606034.png\" alt=\"img\"></p>\n<h4 id=\"浅拷贝的三种情况\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝的三种情况\">#</a> 浅拷贝的三种情况</h4>\n<p>​\t在 Python 中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数</p>\n<p>​\t切片操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">b = a[:]</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"工厂函数\"><a class=\"markdownIt-Anchor\" href=\"#工厂函数\">#</a> 工厂函数</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># (1,2,3,[7,5])</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"copycopy\"><a class=\"markdownIt-Anchor\" href=\"#copycopy\">#</a> copy.copy()</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">b[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\"># (1,2,3,[7,5])</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\"># [1,2,3,[7,5]]</span></span><br><span class=\"line\">//在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝</span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h3>\n<p>包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/546188/201810/546188-20181031095505004-75839266.png\" alt=\"img\"></p>\n<h2 id=\"形参和实参的区别\"><a class=\"markdownIt-Anchor\" href=\"#形参和实参的区别\">#</a> <strong>形参和实参的区别</strong></h2>\n<h3 id=\"形参\"><a class=\"markdownIt-Anchor\" href=\"#形参\">#</a> 形参：</h3>\n<p>​\t\t就是形式上的参数，可以理解为数学的 X，没有实际的值，通过别人赋值后才有意义。相当于变量。</p>\n<h3 id=\"实参\"><a class=\"markdownIt-Anchor\" href=\"#实参\">#</a> 实参：</h3>\n<p>​\t\t就是实际意义上的参数，是一个实际存在的参数，可以是字符串或是数字等。</p>\n<h2 id=\"不定长参数\"><a class=\"markdownIt-Anchor\" href=\"#不定长参数\">#</a> 不定长参数</h2>\n<p>​\t\t在传入额外的参数时可以不用指明参数名，直接传入参数值即可，第二种因为返回的是字典，所以传入时需要指定参数名。</p>\n<p>下面是两个简单的栗子：</p>\n<h3 id=\"args\"><a class=\"markdownIt-Anchor\" href=\"#args\">#</a> *args</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">funA</span>(<span class=\"params\">a, b, *args</span>):</span></span><br><span class=\"line\"><span class=\"number\">2</span>     <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"number\">4</span>     <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\"><span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> funA(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">输出如下：</span><br><span class=\"line\"><span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n<p>这就只输出了 args 这个元祖中的第一个值。</p>\n<p>*<em>‘ *<em>kwargs ’形式：</em></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">funB</span>(<span class=\"params\">a, b, **vardict</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(vardict)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(vardict[<span class=\"string\">&#x27;l&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">funB(<span class=\"number\">1</span>, <span class=\"number\">2</span>, l=<span class=\"number\">3</span>, m=<span class=\"number\">4</span>)</span><br><span class=\"line\">输出结果如下：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;l&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;m&#x27;</span>: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"值传递引用变量\"><a class=\"markdownIt-Anchor\" href=\"#值传递引用变量\">#</a> 值传递引用变量</h2>\n<p>Python 作为一门动态语言，变量本身的类型是不固定的，因此更加灵活。那 Python 到底是值传递还是引用传递呢？</p>\n<h5 id=\"不可变类型传递的是值\"><a class=\"markdownIt-Anchor\" href=\"#不可变类型传递的是值\">#</a> 不可变类型传递的是值</h5>\n<h5 id=\"可变类型传递的是引用地址\"><a class=\"markdownIt-Anchor\" href=\"#可变类型传递的是引用地址\">#</a> 可变类型传递的是引用地址</h5>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/07/13/python%E4%B8%ADwith%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/",
            "title": "python中with上下文管理",
            "date_published": "2018-07-13T07:21:41.000Z",
            "content_html": "<h2 id=\"上下文管理\"><a class=\"markdownIt-Anchor\" href=\"#上下文管理\">#</a> 上下文管理</h2>\n<h4 id=\"with语句是什么\"><a class=\"markdownIt-Anchor\" href=\"#with语句是什么\">#</a> with 语句是什么</h4>\n<ul>\n<li>with 是一种上下文管理协议，目的在于从流程图中把 try,except 和 finally 关键字和资源分配释放相关代码统统去掉，简化 try….except….finlally 的处理流程</li>\n<li>所以使用 with 处理的对象必须有 enter () 和 exit () 这两个方法\n<ul>\n<li>with 通过 enter 方法初始化（enter 方法在语句体执行之前进入运行）</li>\n<li>然后在 exit 中做善后以及处理异常（exit () 方法在语句体执行完毕退出后运行）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"with语句使用场景\"><a class=\"markdownIt-Anchor\" href=\"#with语句使用场景\">#</a> with 语句使用场景</h4>\n<ul>\n<li>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的 “清理” 操作，释放资源</li>\n<li>比如文件使用后自动关闭、线程中锁的自动获取和释放等</li>\n</ul>\n<h4 id=\"with处理文件操作的实例\"><a class=\"markdownIt-Anchor\" href=\"#with处理文件操作的实例\">#</a> with 处理文件操作的实例</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">with open(&#39;&#x2F;etc&#x2F;passwd&#39;) as f:</span><br><span class=\"line\">  for line in f:</span><br><span class=\"line\">    print(line)</span><br><span class=\"line\"></span><br><span class=\"line\"># 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；</span><br><span class=\"line\"># 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。</span><br><span class=\"line\">PYTHON</span><br><span class=\"line\">with open(&#39;a2.py&#39;,encoding&#x3D;&#39;utf8&#39;) as f:</span><br><span class=\"line\">    print( f.readlines())</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    f &#x3D; open(&#39;a.py&#39;,encoding&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">    f.read()</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(print(e))</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2018/05/26/python%E5%9F%BA%E7%A1%801%EF%BC%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/",
            "title": "python基础1（内存管理）",
            "date_published": "2018-05-26T12:33:17.000Z",
            "content_html": "<h1 id=\"1-python基础\"><a class=\"markdownIt-Anchor\" href=\"#1-python基础\">#</a> 1、Python 基础</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存管理&gt;引用计数&gt;垃圾回收&gt;分代回收&gt;对象存储&gt;对象缓存&gt;多次赋值（num&#x3D;1,num&#x3D;2)&gt;内存地址&gt;print(id(num1),id(num2))&gt;内存占用&gt;sys.getsizeof(num1)</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#1-内存管理\">#</a> 1、内存管理</h1>\n<h3 id=\"1-引用计数\"><a class=\"markdownIt-Anchor\" href=\"#1-引用计数\">#</a> 1、引用计数</h3>\n<p>​\t\tpython 是通过引用计数来保存内存的变量追踪，记录这个对象以及其他使用对象的引用次数 python 内部有一个名叫‘引用计数器’，变量被引用时就会增加一次引用计数。</p>\n<h3 id=\"2-垃圾回收\"><a class=\"markdownIt-Anchor\" href=\"#2-垃圾回收\">#</a> 2、垃圾回收</h3>\n<p>​\t\t概念：</p>\n<p>​\t\t\t当 Python 中的对象越来越多时，占据的空间越来越大，启动垃圾回收（garbage colletion）把没用的对象清除。</p>\n<p>​\t\t原理：</p>\n<p>​\t\t\t当 Python 的某一个对象引用计数变为 0 时，说明没有任何引用指向对象，比如 x = a, 那么 x 的引用计数就变成了 1，当 x 被删除时，a 的引用计数也就变成了 0，那么 a 就会被回收。</p>\n<h3 id=\"3-分代回收\"><a class=\"markdownIt-Anchor\" href=\"#3-分代回收\">#</a> 3、分代回收</h3>\n<p>​\t\tPython 将所有的对象分为 0 ， 1 ， 2 三代；</p>\n<p>​\t\t所有新创建的对象都是 0 代对象，</p>\n<p>​\t\t当 0 代对象经过垃圾回收，依然存在时，就会被归为下一代对象。</p>\n<p>​</p>\n<h3 id=\"4-对象存储\"><a class=\"markdownIt-Anchor\" href=\"#4-对象存储\">#</a> 4、对象存储</h3>\n<p>​\t\tPython 中所有的变量和函数在存储时都会被当成一个对象</p>\n<p>​\t\t当对象运行时，对象存储在内存里，随时可以调用</p>\n<h3 id=\"5-多次赋值\"><a class=\"markdownIt-Anchor\" href=\"#5-多次赋值\">#</a> 5、多次赋值</h3>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1,num2 &#x3D; 1,1</span><br><span class=\"line\"></span><br><span class=\"line\">print(id(num1),id(num2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;输出</span><br><span class=\"line\">140737224735808 140737224735808</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-内存地址sysgetsizeof\"><a class=\"markdownIt-Anchor\" href=\"#6-内存地址sysgetsizeof\">#</a> 6、内存地址 sys.getsizeof ()</h3>\n<p>​\t\t查看某个变量的引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\">print(sys.getsizeof(a))</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-内存占用getrefcount\"><a class=\"markdownIt-Anchor\" href=\"#7-内存占用getrefcount\">#</a> 7、内存占用 getrefcount ()</h3>\n<p>查看某个变量出现的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\">print(sys.getrefcount(a))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2017/04/15/hello-world/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2017/04/15/hello-world/",
            "title": "Hello World",
            "date_published": "2017-04-15T13:19:03.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Python"
            ]
        }
    ]
}