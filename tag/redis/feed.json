{
    "version": "https://jsonfeed.org/version/1",
    "title": "路宇航的博客 • All posts by \"redis\" tag",
    "description": "",
    "home_page_url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io",
    "items": [
        {
            "id": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/",
            "url": "https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/06/25/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/",
            "title": "redis哨兵模式",
            "date_published": "2019-06-25T00:09:53.000Z",
            "content_html": "<h1 id=\"redis哨兵sentinel模式\"><a class=\"markdownIt-Anchor\" href=\"#redis哨兵sentinel模式\">#</a> Redis 哨兵（Sentinel）模式</h1>\n<h2 id=\"一-主从复制高可用\"><a class=\"markdownIt-Anchor\" href=\"#一-主从复制高可用\">#</a> 一、主从复制高可用</h2>\n<h3 id=\"当我们使用主从复制出现的问题\"><a class=\"markdownIt-Anchor\" href=\"#当我们使用主从复制出现的问题\">#</a> 当我们使用主从复制出现的问题</h3>\n<ul>\n<li>手动故障转移</li>\n<li>写能力和存储能力受限</li>\n<li>主从复制 -master 宕机故障处理 <img data-src=\"https://img-blog.csdnimg.cn/20201017111328608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p>\n<hr>\n<h3 id=\"~哨兵模式概述\"><a class=\"markdownIt-Anchor\" href=\"#~哨兵模式概述\">#</a> ～哨兵模式概述</h3>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</p>\n<p>哨兵主要有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<blockquote>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n</blockquote>\n<blockquote>\n<p>故障切换（failover）的过程。假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p>\n</blockquote>\n<h2 id=\"二-架构说明\"><a class=\"markdownIt-Anchor\" href=\"#二-架构说明\">#</a> 二、架构说明</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201017111608378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>多个 sentinel 发现并确认 master 有问题。</li>\n<li>选举出一个 sentinel 作为领导</li>\n<li>选出一个 slave 作为 master</li>\n<li>通知其余的 slave 成为新的 master 的 slave</li>\n<li>通知客户端主从变化</li>\n<li>等待老的 master 复活成新的 master 的 slave</li>\n</ol>\n<hr>\n<h2 id=\"三-安装配置\"><a class=\"markdownIt-Anchor\" href=\"#三-安装配置\">#</a> 三、安装配置</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201018091923731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>配置主从节点</li>\n</ol>\n<ul>\n<li>主节点</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动命令：redis-server redis-<span class=\"number\">7000.</span>conf</span><br></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7000</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7000.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7000.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Redis 从节点</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis-<span class=\"number\">7001.</span>conf</span><br><span class=\"line\">redis-server redis-<span class=\"number\">7002.</span>conf</span><br></pre></td></tr></table></figure>\n<p>slave-1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7002</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7002.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7002.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">slaveof <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n<p>slave-2:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port <span class=\"number\">7001</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">pidfile /<span class=\"keyword\">var</span>/run/redis-<span class=\"number\">7001.</span>pid</span><br><span class=\"line\">logfile <span class=\"string\">&quot;7001.log&quot;</span></span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">slaveof <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置开启 sentinel 监控主节点</li>\n</ol>\n<ul>\n<li>sentine 主要配置 编辑 sentinel.conf</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port $&#123;port&#125;</span><br><span class=\"line\">dir <span class=\"string\">&quot;/opt/soft/redis/data/&quot;</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;$&#123;port&#125;.log&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</span></span><br><span class=\"line\">sentinel monitor mymaster <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">7000</span> <span class=\"number\">2</span>   </span><br><span class=\"line\">sentinel down-after-millseseconds mymaster <span class=\"number\">30000</span> <span class=\"comment\">//判断主节点时间</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster <span class=\"number\">1</span>    </span><br><span class=\"line\">sentinel failover-timeout mymaster <span class=\"number\">180000</span></span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>\n<p>可以使用 ps -ef|grep redis-sentinel 命令查看进程、 <img data-src=\"https://img-blog.csdnimg.cn/20201018094305376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"四-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#四-实现原理\">#</a> 四、实现原理</h2>\n<ul>\n<li>故障转移 — java 实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Redis哨兵模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSentinels</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSentinel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">        jedisPoolConfig.setMaxTotal(<span class=\"number\">10</span>);</span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(<span class=\"number\">5</span>);</span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 哨兵信息</span></span><br><span class=\"line\">        Set&lt;String&gt; sentinels = <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;127.0.0.1:26379&quot;</span>,<span class=\"string\">&quot;1127.0.0.1:26379&quot;</span>,<span class=\"string\">&quot;127.0.0.1:26379&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">        JedisSentinelPool pool = <span class=\"keyword\">new</span> JedisSentinelPool(<span class=\"string\">&quot;mymaster&quot;</span>, sentinels,jedisPoolConfig,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取客户端</span></span><br><span class=\"line\">        Jedis jedis = pool.getResource();</span><br><span class=\"line\">        <span class=\"comment\">// 执行两个命令</span></span><br><span class=\"line\">        jedis.set(<span class=\"string\">&quot;mykey&quot;</span>, <span class=\"string\">&quot;myvalue&quot;</span>);</span><br><span class=\"line\">        String value = jedis.get(<span class=\"string\">&quot;mykey&quot;</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们把主服务器停掉，在经过一段时间的报错后，redis 集群会恢复 <img data-src=\"https://img-blog.csdnimg.cn/20201018100544809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>主观下线和客观下线\n<ul>\n<li>主观下线：当前 sentintel 节点认为某个 redis 节点不可用。</li>\n<li>客观下线：所有 sentinel 节点认为某个 redis 节点不可用。</li>\n</ul>\n</li>\n<li>三个定时任务</li>\n</ul>\n<ol>\n<li>\n<p>每 10 秒每个 sentinel 对 master 和 slave 执行 info</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 发现slave节点</span><br><span class=\"line\">- 确认主从关系</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>每 2 秒每个 sentinel 通过 master 节点对 channel 交换信息（发布订阅）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 通过_sentinel_:hello频道交互</span><br><span class=\"line\">- 交互对节点的“看法”和自身信息</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>每 1 秒每个 sentinel 对其他 sentinel 和 redis 执行 ping</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>领导者选举</p>\n<ul>\n<li>\n<p>只需要一个 sentinel 节点完成故障转移</p>\n</li>\n<li>\n<p>通过 sentinel is - master -down -by-addr 命令都希望成为领导者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1. 每个主观下线都Sentitle 节点向其他Sentinel节点发送命令，要求将它设置为领导者</span><br><span class=\"line\">    </span><br><span class=\"line\">-2. 收到命令对Sentinel节点如果没有同一通过其他Sentinel节点发送的命令，那么就将同一该请求，否则拒绝</span><br><span class=\"line\">    </span><br><span class=\"line\">-3. 如果该Sentinel节点发现直接的票数已经超过Sentinel集合半数且超过quorum，那么它将成为领导者</span><br><span class=\"line\">    </span><br><span class=\"line\">-4. 如果此过程由多个Sentinel节点成为领导者，那么将来等待一段时间重新进行选举</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201018102554444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTc3ODM4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>故障转移（Sentinel 领导者节点完成）\n<ul>\n<li>1. 从 slave 节点中选出一个 “合适点” 节点作为 master 节点</li>\n<li>2. 对上面对 slave 节点执行 slaveof no one 命令让其成为 master 节点。</li>\n<li>3. 向剩余的 slave 节点发送命令，让它们成为新的 maater 节点的 slave 节点，复制规避和 parallel-syncs 参数有关</li>\n<li>4. 更新对原来 master 节点配置为 slave，并保持着对其 “关注”，当其恢复后命令他去复制新对 master 节点</li>\n</ul>\n</li>\n<li>选择 “合适的” slave 节点\n<ul>\n<li>1. 选择 slave-priority（slave 节点优先级）最高对 slave 节点，如果存在返回，不存在继续</li>\n<li>2. 选择复制偏移量最大的 slave 节点，复制最完整，存在返回，不存在继续</li>\n<li>3. 选择 runId 最小的 slave 节点</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"五-需要说明的问题\"><a class=\"markdownIt-Anchor\" href=\"#五-需要说明的问题\">#</a> 五、需要说明的问题</h2>\n<ul>\n<li>尽可能在不同物理机上和同一个网络部署 Redis sentinel 的所有节点</li>\n<li>Redis sentinel 中的 sentinel 节点个数应该大于等于 3 且最好是奇数。（节点数多可以保证高可用）</li>\n<li>Redis sentinel 中的数据节点和普通数据节点没有区别。每个 sentinel 节点在本质上还是一个 Redis 实例，只不过和 Redis 数据节点不同的是，其主要作用是监控 Redis 数据节点</li>\n<li>客户端初始化时连接的是 sentinel 节点集合，不再是具体的 Redis 节点，但 sentinel 只是配置中心不是代理。</li>\n</ul>\n",
            "tags": [
                "Redis"
            ]
        }
    ]
}