<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io</id>
    <title>路宇航的博客 • Posts by &#34;vue&#34; tag</title>
    <link href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io" />
    <updated>2020-08-13T07:18:19.000Z</updated>
    <category term="Ant Design" />
    <category term="数据库" />
    <category term="Python" />
    <category term="Celery" />
    <category term="Git" />
    <category term="Docker" />
    <category term="Redis" />
    <category term="Vue" />
    <category term="python" />
    <category term="三方支付" />
    <category term="算法" />
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
        <title>vue拦截器的概念</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/08/13/vue%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
        <content type="html">&lt;h2 id=&#34;一-拦截器的基本介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-拦截器的基本介绍&#34;&gt;#&lt;/a&gt; 一、拦截器的基本介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是拦截器:
&lt;ul&gt;
&lt;li&gt;想拦截住我们的请求过程&lt;br&gt;
比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求&lt;br&gt;
或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拦截器的作用:
&lt;ul&gt;
&lt;li&gt;一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token 验证，验证用户&lt;br&gt;
是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-拦截器的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-拦截器的分类&#34;&gt;#&lt;/a&gt; 二、拦截器的分类&lt;/h2&gt;
&lt;p&gt;请求拦截器和响应拦截器 / 路由拦截器&lt;br&gt;
 &lt;code&gt;PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理&lt;/code&gt; &lt;br&gt;
① axios 提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加 token 头信息。&lt;br&gt;
② axios 提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理 401 身份认证错误。&lt;/p&gt;
&lt;h2 id=&#34;三-代码演示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-代码演示&#34;&gt;#&lt;/a&gt; 三、代码演示&lt;/h2&gt;
&lt;h4 id=&#34;路由拦截器-通过路由进行判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路由拦截器-通过路由进行判断&#34;&gt;#&lt;/a&gt; 路由拦截器：通过路由进行判断&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 配置全局的vue路由拦截器  导航守卫(路由守卫)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(to)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F; 判断 是否是跳转到 admin页 如果是则必须登录才能跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (to.path in [&amp;quot;&amp;#x2F;路由地址&amp;quot;,&amp;quot;&amp;#x2F;...&amp;quot;,&amp;quot;&amp;#x2F;...&amp;quot;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F;判断 是否登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const token &amp;#x3D; sessionStorage.getItem(&amp;quot;token&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (!token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            alert(&amp;quot;没有登录，不能操作&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#x2F;&amp;#x2F;跳转到登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next(&amp;quot;&amp;#x2F;login?back&amp;#x3D;&amp;quot; + to.fullPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;request请求拦截器-在请求发送前进行一些操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#request请求拦截器-在请求发送前进行一些操作&#34;&gt;#&lt;/a&gt; request 请求拦截器：在请求发送前进行一些操作&lt;/h4&gt;
&lt;p&gt;在 main.js 中&lt;br&gt;
 import axios from ‘axios’ // 引入 axios&lt;br&gt;
Vue.prototype.$http = axios // 配置&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 添加请求拦截器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.interceptors.request.use(config &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  let token &amp;#x3D; localStorage.getItem(&amp;#39;token&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     config.headers.token &amp;#x3D; token &amp;#x2F;&amp;#x2F;把token放在请求头中（headers是对象类型）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#x2F;&amp;#x2F; 如果后端使用了rest framework jwt，如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#x2F;&amp;#x2F;config.headers.common[&amp;#39;Authorization&amp;#39;] &amp;#x3D; &amp;#39;jwt &amp;#39; + token &amp;#x2F;&amp;#x2F; 头部设置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return config;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(error) &amp;#x2F;&amp;#x2F;打印错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;response响应拦截器-在接收到响应后进行一些操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#response响应拦截器-在接收到响应后进行一些操作&#34;&gt;#&lt;/a&gt; response 响应拦截器：在接收到响应后进行一些操作&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 响应拦截器（在响应时自动会做的操作）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.interceptors.response.use(response &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　return response &amp;#x2F;&amp;#x2F; 成功直接返回&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(error.request) &amp;#x2F;&amp;#x2F; 打印错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;处理错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (error.request.status &amp;#x3D;&amp;#x3D;&amp;#x3D; 400)&amp;#123;  &amp;#x2F;&amp;#x2F; 400错误的状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    window.location.href &amp;#x3D; &amp;quot;&amp;#x2F;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return error &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;返回错误信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Vue" />
        <updated>2020-08-13T07:18:19.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
        <title>vue中websocket和http的区别</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2020/04/13/vue%E4%B8%ADwebsocket%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
        <content type="html">&lt;h2 id=&#34;什么是websocket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是websocket&#34;&gt;#&lt;/a&gt; 什么是 Websocket&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Websocket 是一种网络通信协议，是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;websocket有什么特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket有什么特点&#34;&gt;#&lt;/a&gt; Websocket 有什么特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;建立在 TCP 协议之上&lt;/li&gt;
&lt;li&gt;性能开销小通信高效&lt;/li&gt;
&lt;li&gt;协议标识符 ws wss（加密之后）&lt;/li&gt;
&lt;li&gt;持久化网络通信协议&lt;/li&gt;
&lt;li&gt;客户端可以与任意服务器通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;websocket是什么样的协议具体有什么优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket是什么样的协议具体有什么优点&#34;&gt;#&lt;/a&gt; Websocket 是什么样的协议，具体有什么优点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先，Websocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说&lt;br&gt;
 HTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了。&lt;br&gt;
在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response ， 在 HTTP 中永远是这样，也就是说一个 request 只能有一个 response。而且这个 response 也是被动的，不能主动发起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;websocket的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket的作用&#34;&gt;#&lt;/a&gt; Websocket 的作用&lt;/h2&gt;
&lt;h3 id=&#34;1ajax轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1ajax轮询&#34;&gt;#&lt;/a&gt; 1）ajax 轮询&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2long-poll长轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2long-poll长轮询&#34;&gt;#&lt;/a&gt; 2）long poll 长轮询&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3websocket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3websocket&#34;&gt;#&lt;/a&gt; 3）WebSocket&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&amp;gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接&amp;#x2F;状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;目前唯一的问题是：不兼容低版本的IE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;websocket使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket使用场景&#34;&gt;#&lt;/a&gt; Websocket 使用场景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;社交聊天、弹幕、多玩家游戏、视频会议 / 聊天、在线教育、智能家居等需要高实时的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;websocket-四个事件两个方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket-四个事件两个方法&#34;&gt;#&lt;/a&gt; Websocket 四个事件，两个方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;4个事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4个事件&#34;&gt;#&lt;/a&gt; 4 个事件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;open Socket.onopen 连接建立时触发&lt;/li&gt;
&lt;li&gt;message Socket.onmessage 客户端接收服务端数据时触发&lt;/li&gt;
&lt;li&gt;error Socket.onerror 通信发生错误时触发&lt;/li&gt;
&lt;li&gt;close Socket.onclose 连接关闭时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;2个方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2个方法&#34;&gt;#&lt;/a&gt; 2 个方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Socket.send () 使用连接发送数据&lt;/li&gt;
&lt;li&gt;Socket.close () 关闭连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是http协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是http协议&#34;&gt;#&lt;/a&gt; 什么是 HTTP 协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超文本传输协议，本质上是一种通信协议。用来将 html 从服务端传送到客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单快速&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户向服务器请求服务时，只需传送请求方法和路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无连接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;websocket与http的关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket与http的关系&#34;&gt;#&lt;/a&gt; Websocket 与 http 的关系&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;相同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#相同点&#34;&gt;#&lt;/a&gt; 相同点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;都是一样基于 TCP 的，都是可靠性传输协议。&lt;/li&gt;
&lt;li&gt;都是应用层协议。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;不同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同点&#34;&gt;#&lt;/a&gt; 不同点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息。HTTP 是单向的。&lt;/li&gt;
&lt;li&gt;WebSocket 是需要浏览器和服务器握手进行建立连接的。而 http 是浏览器发起向服务器的连接，服务器预先并不知道这个连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;websocket实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket实例&#34;&gt;#&lt;/a&gt; Websocket 实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pip install -i &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZQ==&#34;&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span&gt; dwebsocket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;定义视图文件的逻辑viewspy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义视图文件的逻辑viewspy&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS12aWV3cy14czFobDRiNnoxYm55amM0eTR3NmJna3ljN3pwOGZjLnB5&#34;&gt;定义视图文件的逻辑 views.py&lt;/span&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#导入websocket装饰器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from dwebsocket.decorators import accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#接收前端信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def test_socket(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if request.is_websocket():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for message in request.websocket:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c&amp;#x3D;str(message,encoding&amp;#x3D;&amp;#39;utf-8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            print(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.websocket.send(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#主动推送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@accept_websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def test_websocket(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if request.is_websocket():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            time.sleep(1) ## 向前端发送时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dit &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#39;time&amp;#39;:time.strftime(&amp;#39;%Y.%m.%d %H:%M:%S&amp;#39;,time.localtime(time.time()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.websocket.send(json.dumps(dit))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;路由配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路由配置&#34;&gt;#&lt;/a&gt; 路由配置&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;path(&amp;#39;test_socket&amp;#39;,test_socket),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;path(&amp;#39;test_websocket&amp;#39;,test_websocket),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;定义前端发送消息的页面-socketvue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义前端发送消息的页面-socketvue&#34;&gt;#&lt;/a&gt; 定义前端发送消息的页面 – socket.vue&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CODE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;input id&amp;#x3D;&amp;quot;chat-message-input&amp;quot; type&amp;#x3D;&amp;quot;text&amp;quot; size&amp;#x3D;&amp;quot;100&amp;quot;&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;input id&amp;#x3D;&amp;quot;chat-message-submit&amp;quot; type&amp;#x3D;&amp;quot;button&amp;quot; value&amp;#x3D;&amp;quot;Send&amp;quot; @click&amp;#x3D;&amp;#39;sendmessage()&amp;#39;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &amp;quot;socket&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  methods: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sendmessage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.s.send(document.getElementById(&amp;quot;chat-message-input&amp;quot;).value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;生成socket对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var socket &amp;#x3D; new WebSocket(&amp;quot;ws:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;test_socket&amp;#x2F;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onopen &amp;#x3D; function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;WebSocket open&amp;#39;);&amp;#x2F;&amp;#x2F;成功连接上Websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onmessage &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;message: &amp;#39; + e.data);&amp;#x2F;&amp;#x2F;打印服务端返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onclose &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.close(); &amp;#x2F;&amp;#x2F;关闭TCP连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (socket.readyState &amp;#x3D;&amp;#x3D; WebSocket.OPEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.onopen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    window.s &amp;#x3D; socket;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style scoped&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;然后再定义一个页面测试后台的主动推送-socket_pushvue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#然后再定义一个页面测试后台的主动推送-socket_pushvue&#34;&gt;#&lt;/a&gt; 然后再定义一个页面，测试后台的主动推送 – socket_push.vue&lt;/h3&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PYTHON&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &amp;quot;socket_push&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x2F;&amp;#x2F;生成socket对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var socket &amp;#x3D; new WebSocket(&amp;quot;ws:&amp;#x2F;&amp;#x2F;127.0.0.1:8000&amp;#x2F;z&amp;#x2F;test_websocket&amp;#x2F;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onopen &amp;#x3D; function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;WebSocket open&amp;#39;);&amp;#x2F;&amp;#x2F;成功连接上Websocket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onmessage &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(&amp;#39;message: &amp;#39; + e.data);&amp;#x2F;&amp;#x2F;打印服务端返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.onclose &amp;#x3D; function (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.close(); &amp;#x2F;&amp;#x2F;关闭TCP连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (socket.readyState &amp;#x3D;&amp;#x3D; WebSocket.OPEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      socket.onopen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style scoped&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Vue" />
        <updated>2020-04-13T07:20:24.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</id>
        <title>vue钩子函数</title>
        <link rel="alternate" href="https://github.com/tinaidejishuboke/tinaidejishuboke.github.io/2019/09/13/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
        <content type="html">&lt;h2 id=&#34;一-路由钩子函数相关概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-路由钩子函数相关概念&#34;&gt;#&lt;/a&gt; 一、路由钩子函数相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么情况下要使用路由的钩子函数？
&lt;ul&gt;
&lt;li&gt;在路由跳转的时候，我们需要一些权限判断或者其他操作，这个时候就需要使用路由的钩子函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由钩子函数的定义:
&lt;ul&gt;
&lt;li&gt;路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-路由钩子的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-路由钩子的分类&#34;&gt;#&lt;/a&gt; 二、路由钩子的分类&lt;/h2&gt;
&lt;h4 id=&#34;1-全局路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-全局路由钩子&#34;&gt;#&lt;/a&gt; 1、全局路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在初始化 VueRouter 以后，直接使用 router 实例进行注册&lt;br&gt;
包括两个钩子：beforeEach、afterEach（每个路由切换前或者切换后调用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-单个路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-单个路由钩子&#34;&gt;#&lt;/a&gt; 2、单个路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;写在路由配置中，只有访问到这个路径，才能触发钩子函数&lt;br&gt;
包括两个钩子：beforeEnter、beforeLeave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3-组件内路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-组件内路由钩子&#34;&gt;#&lt;/a&gt; 3、组件内路由钩子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;这个钩子要在组件内定义&lt;br&gt;
包括三个钩子：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;（1） 路由对象是在使用 vue-route 启动应用时，每个匹配的组件实例都会被注入 router 的对象，称之为路由对象。&lt;br&gt;
在组件内部可以通过 this.$route 的方式调用&lt;br&gt;
（2）路由对象有： $route.path , $route.params, $route.query, $route.router 等属性&lt;/p&gt;
&lt;h2 id=&#34;三-代码演示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-代码演示&#34;&gt;#&lt;/a&gt; 三、代码演示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;全局路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局路由钩子&#34;&gt;#&lt;/a&gt; 全局路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;routerbeforeeachtofromnext-全局前置守卫&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#routerbeforeeachtofromnext-全局前置守卫&#34;&gt;#&lt;/a&gt; router.beforeEach（（to,from,next）=&amp;gt;{ }）：全局前置守卫&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach(function (to,from,next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(to);  &amp;#x2F;&amp;#x2F;到达的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(next);&amp;#x2F;&amp;#x2F;跳转到其他路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(from);&amp;#x2F;&amp;#x2F;离开的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;routeraftereachtofrom-全局后置钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#routeraftereachtofrom-全局后置钩子&#34;&gt;#&lt;/a&gt; router.afterEach（（to,from）=&amp;gt;{ }）：全局后置钩子&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.afterEach(function (to,from) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(to);  &amp;#x2F;&amp;#x2F;到达的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(from);&amp;#x2F;&amp;#x2F;离开的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;单个路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单个路由钩子&#34;&gt;#&lt;/a&gt; 单个路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforeenter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforeenter&#34;&gt;#&lt;/a&gt; beforeEnter&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default new Router (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    routes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path: &amp;#39;&amp;#x2F;index&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            component: Index,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeEnter: (to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforeleave&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforeleave&#34;&gt;#&lt;/a&gt; beforeLeave&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default new Router (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    routes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path: &amp;#39;&amp;#x2F;index&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            component: Index,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeLeave: (to, from, next) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;组件内路由钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件内路由钩子&#34;&gt;#&lt;/a&gt; 组件内路由钩子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;beforerouteenter-进入这个组件路由之前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteenter-进入这个组件路由之前&#34;&gt;#&lt;/a&gt; beforeRouteEnter: 进入这个组件路由之前&lt;/h4&gt;
&lt;h4 id=&#34;beforerouteleave离开这个组件路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteleave离开这个组件路由&#34;&gt;#&lt;/a&gt; beforeRouteLeave：离开这个组件路由&lt;/h4&gt;
&lt;h4 id=&#34;beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beforerouteupdate在本路由的下级路由切换才会触发beforerouteupdate&#34;&gt;#&lt;/a&gt; beforeRouteUpdate：在本路由的下级路由切换才会触发 beforeRouteUpdate&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        测验：&amp;#123;&amp;#123;zst&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    export default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                zst:&amp;#39;廾匸改变之前&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeCreate()&amp;#123; &amp;#x2F;&amp;#x2F;组件生命周期函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;创建之前&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x2F;&amp;#x2F;进入组件之前，执行 beforRouteEnter &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteEnter(to,from,next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;123&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(this) &amp;#x2F;&amp;#x2F; 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来，得先执行beforRouteEnter，再执行beforeCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next((gx)&amp;#x3D;&amp;gt;&amp;#123; &amp;#x2F;&amp;#x2F;参数gx就是当前组件的实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                gx.zst &amp;#x3D; &amp;#39;被改变了&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteUpdate(to,from,next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            console.log(&amp;#39;abc&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        beforeRouteLeave(to,from,next)&amp;#123;&amp;#x2F;&amp;#x2F;离开组件的时候触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#x2F;&amp;#x2F;什么都不写的时候，走下一步&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Vue" />
        <updated>2019-09-13T07:16:54.000Z</updated>
    </entry>
</feed>
